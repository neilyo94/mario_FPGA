
finalproject.elf:     file format elf32-littlenios2
finalproject.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0800022c

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0000f930 memsz 0x0000f930 flags r-x
    LOAD off    0x00010950 vaddr 0x0800f950 paddr 0x0801143c align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00012f28 vaddr 0x08012f28 paddr 0x08012f28 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f3ac  0800022c  0800022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000378  0800f5d8  0800f5d8  000105d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  0800f950  0801143c  00010950  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  08012f28  08012f28  00012f28  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0001243c  2**0
                  CONTENTS
  7 .sdram        00000000  08013088  08013088  0001243c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001243c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000cd0  00000000  00000000  00012460  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023294  00000000  00000000  00013130  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008d68  00000000  00000000  000363c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ad3d  00000000  00000000  0003f12c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001fd4  00000000  00000000  00049e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003588  00000000  00000000  0004be40  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016d4c  00000000  00000000  0004f3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00066114  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001388  00000000  00000000  00066128  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006a5d2  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006a5d5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006a5e1  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006a5e2  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006a5e3  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006a5e7  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006a5eb  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006a5ef  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006a5fa  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006a605  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0006a610  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000000f  00000000  00000000  0006a61b  2**0
                  CONTENTS, READONLY
 30 .jdi          00004321  00000000  00000000  0006a62a  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0005ad3d  00000000  00000000  0006e94b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
0800022c l    d  .text	00000000 .text
0800f5d8 l    d  .rodata	00000000 .rodata
0800f950 l    d  .rwdata	00000000 .rwdata
08012f28 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08013088 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../finalproject_bsp//obj/HAL/src/crt0.o
08000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800f696 l     O .rodata	00000010 zeroes.4181
0800f6a6 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08002938 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
080044e0 l     F .text	00000008 __fp_lock
080044e8 l     F .text	00000008 __fp_unlock
080044fc l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0800f950 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0800fd94 l     O .rwdata	00000020 lc_ctype_charset
0800fd74 l     O .rwdata	00000020 lc_message_charset
0800fdb4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0800f6d8 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08007a2c l     F .text	000000fc __sprint_r.part.0
0800f80c l     O .rodata	00000010 blanks.4125
0800f7fc l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800a530 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800ce80 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800cfa8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800cfd4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800d0dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800d1d8 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800d2bc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800d4a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0801142c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0800d724 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800d874 l     F .text	00000038 alt_dev_reg
0801039c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800db50 l     F .text	00000204 altera_avalon_jtag_uart_irq
0800dd54 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800e4d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0800e968 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0800eac0 l     F .text	00000050 alt_get_errno
0800eb10 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08012f5c g     O .bss	00000004 alt_instruction_exception_handler
0800706c g     F .text	00000074 _mprec_log10
08007158 g     F .text	0000008c __any_on
08009458 g     F .text	00000054 _isatty_r
0800f6e4 g     O .rodata	00000028 __mprec_tinytens
0800d3e8 g     F .text	00000078 alt_main
08000584 g     F .text	000000b8 _puts_r
08012f88 g     O .bss	00000100 alt_irq
080094ac g     F .text	0000005c _lseek_r
0801143c g       *ABS*	00000000 __flash_rwdata_start
0800b8a0 g     F .text	00000084 .hidden __eqdf2
08013088 g       *ABS*	00000000 __alt_heap_start
08000548 g     F .text	0000003c printf
080096d4 g     F .text	0000009c _wcrtomb_r
08007924 g     F .text	0000005c __sseek
08004844 g     F .text	00000010 __sinit
08009564 g     F .text	00000154 __swbuf_r
080052bc g     F .text	0000007c _setlocale_r
0800469c g     F .text	00000078 __sfmoreglue
0800d480 g     F .text	00000020 __malloc_unlock
08005f1c g     F .text	0000015c memmove
0800482c g     F .text	00000018 _cleanup
0800619c g     F .text	000000a8 _Balloc
0800b924 g     F .text	000000e0 .hidden __gtdf2
0800ef00 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08009400 g     F .text	00000058 _fstat_r
08012f40 g     O .bss	00000004 errno
080078a0 g     F .text	00000008 __seofread
08012f48 g     O .bss	00000004 alt_argv
080193fc g       *ABS*	00000000 _gp
0801021c g     O .rwdata	00000180 alt_fd_list
0800ef20 g     F .text	00000090 alt_find_dev
08005de4 g     F .text	00000138 memcpy
080044f0 g     F .text	0000000c _cleanup_r
0800cca8 g     F .text	000000d0 .hidden __floatsidf
0800ea48 g     F .text	00000078 alt_io_redirect
0800ba04 g     F .text	000000e0 .hidden __ltdf2
0800f5d8 g       *ABS*	00000000 __DTOR_END__
0800063c g     F .text	00000014 puts
0800f198 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08007784 g     F .text	00000074 __fpclassifyd
08006fc8 g     F .text	000000a4 __ratio
08008f64 g     F .text	00000024 __vfiprintf_internal
0800df50 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0800051c g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0800a64c g     F .text	00000008 .hidden __udivsi3
0800d12c g     F .text	000000ac isatty
0800f734 g     O .rodata	000000c8 __mprec_tens
08005338 g     F .text	0000000c __locale_charset
08012f3c g     O .bss	00000004 __malloc_top_pad
08011404 g     O .rwdata	00000004 __mb_cur_max
08005368 g     F .text	0000000c _localeconv_r
080065c4 g     F .text	0000003c __i2b
08004ca8 g     F .text	000004a4 __sfvwrite_r
080077f8 g     F .text	00000054 _sbrk_r
08009508 g     F .text	0000005c _read_r
08011424 g     O .rwdata	00000004 alt_max_fd
08009110 g     F .text	00000100 _fclose_r
080044b0 g     F .text	00000030 fflush
08012f38 g     O .bss	00000004 __malloc_max_sbrked_mem
0800a684 g     F .text	0000089c .hidden __adddf3
08006d70 g     F .text	0000011c __b2d
08009f14 g     F .text	0000061c .hidden __umoddi3
0800d30c g     F .text	000000dc lseek
080113fc g     O .rwdata	00000004 _global_impure_ptr
080071e4 g     F .text	000005a0 _realloc_r
08013088 g       *ABS*	00000000 __bss_end
0800e878 g     F .text	000000f0 alt_iic_isr_register
0800edfc g     F .text	00000104 alt_tick
080098d4 g     F .text	00000640 .hidden __udivdi3
08009224 g     F .text	00000184 _fputwc_r
0800f70c g     O .rodata	00000028 __mprec_bigtens
080063a8 g     F .text	00000104 __s2b
0800cd78 g     F .text	000000a4 .hidden __floatunsidf
08006b18 g     F .text	00000060 __mcmp
08004864 g     F .text	00000018 __fp_lock_all
0800e82c g     F .text	0000004c alt_ic_irq_enabled
0800ed64 g     F .text	00000098 alt_alarm_stop
08012f50 g     O .bss	00000004 alt_irq_active
080000fc g     F .exceptions	000000d0 alt_irq_handler
080101f4 g     O .rwdata	00000028 alt_dev_null
0800e4b4 g     F .text	0000001c alt_dcache_flush_all
080064ac g     F .text	00000068 __hi0bits
0800cc20 g     F .text	00000088 .hidden __fixdfsi
0801143c g       *ABS*	00000000 __ram_rwdata_end
0801141c g     O .rwdata	00000008 alt_dev_list
0800d774 g     F .text	00000100 write
0800f950 g       *ABS*	00000000 __ram_rodata_end
0800d024 g     F .text	000000b8 fstat
0800ba04 g     F .text	000000e0 .hidden __ledf2
08006890 g     F .text	00000140 __pow5mult
08007b40 g     F .text	00001424 ___vfiprintf_internal_r
08012f30 g     O .bss	00000004 __nlocale_changed
0800a654 g     F .text	00000008 .hidden __umodsi3
08013088 g       *ABS*	00000000 end
0800da8c g     F .text	000000c4 altera_avalon_jtag_uart_init
080001cc g     F .exceptions	00000060 alt_instruction_exception_entry
0800f5d8 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800ce1c g     F .text	00000064 .hidden __clzsi2
0800e15c g     F .text	00000218 altera_avalon_jtag_uart_write
08004854 g     F .text	00000004 __sfp_lock_acquire
08005cfc g     F .text	000000e8 memchr
080006e8 g     F .text	000020fc ___vfprintf_internal_r
080049b8 g     F .text	000002f0 _free_r
08005344 g     F .text	00000010 __locale_mb_cur_max
0800f410 g     F .text	00000194 __call_exitprocs
08012f2c g     O .bss	00000004 __mlocale_changed
08011408 g     O .rwdata	00000004 __malloc_sbrk_base
0800022c g     F .text	0000003c _start
08012f54 g     O .bss	00000004 _alt_tick_rate
080069d0 g     F .text	00000148 __lshift
08012f58 g     O .bss	00000004 _alt_nticks
0800d4f0 g     F .text	00000104 read
0800d8e0 g     F .text	00000048 alt_sys_init
0800f2fc g     F .text	00000114 __register_exitproc
08006600 g     F .text	00000290 __multiply
0800ddfc g     F .text	00000068 altera_avalon_jtag_uart_close
0800a65c g     F .text	00000028 .hidden __mulsi3
0800f950 g       *ABS*	00000000 __ram_rwdata_start
0800f5d8 g       *ABS*	00000000 __ram_rodata_start
08012f60 g     O .bss	00000028 __malloc_current_mallinfo
08006e8c g     F .text	0000013c __d2b
0800d928 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0800f0c4 g     F .text	000000d4 alt_get_fd
08008fe4 g     F .text	00000054 _close_r
0800f280 g     F .text	0000007c memcmp
0800d9e8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08013088 g       *ABS*	00000000 __alt_stack_base
0800da38 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08002808 g     F .text	00000130 __swsetup_r
0800af20 g     F .text	00000980 .hidden __divdf3
08004714 g     F .text	00000118 __sfp
080070e0 g     F .text	00000078 __copybits
0800fdec g     O .rwdata	00000408 __malloc_av_
08004860 g     F .text	00000004 __sinit_lock_release
0800bae4 g     F .text	0000086c .hidden __muldf3
0800784c g     F .text	00000054 __sread
0800efb0 g     F .text	00000114 alt_find_file
0800e520 g     F .text	000000a4 alt_dev_llist_insert
0800d460 g     F .text	00000020 __malloc_lock
0800d674 g     F .text	000000b0 sbrk
08004288 g     F .text	00000228 _fflush_r
08009038 g     F .text	000000d8 _calloc_r
08012f28 g       *ABS*	00000000 __bss_start
08006078 g     F .text	00000124 memset
08000268 g     F .text	000002b4 main
08012f4c g     O .bss	00000004 alt_envp
08012f34 g     O .bss	00000004 __malloc_max_total_mem
0800d988 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080096b8 g     F .text	0000001c __swbuf
08007980 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
08009210 g     F .text	00000014 fclose
08002b60 g     F .text	00001728 _dtoa_r
08005554 g     F .text	000007a8 _malloc_r
08009848 g     F .text	00000030 __ascii_wctomb
08011428 g     O .rwdata	00000004 alt_errno
0800514c g     F .text	000000b8 _fwalk
0800a59c g     F .text	00000054 .hidden __divsi3
08004894 g     F .text	00000124 _malloc_trim_r
0800f5d8 g       *ABS*	00000000 __CTOR_END__
08007988 g     F .text	000000a4 strcmp
0800f5d8 g       *ABS*	00000000 __flash_rodata_start
0800f5d8 g       *ABS*	00000000 __DTOR_LIST__
0800b8a0 g     F .text	00000084 .hidden __nedf2
0800d8ac g     F .text	00000034 alt_irq_init
0800d5f4 g     F .text	00000080 alt_release_fd
0800f81c g     O .rodata	00000100 .hidden __clz_tab
08012f28 g     O .bss	00000004 _PathLocale
0800f234 g     F .text	00000014 atexit
08008f88 g     F .text	0000005c _write_r
08005374 g     F .text	0000001c setlocale
08011400 g     O .rwdata	00000004 _impure_ptr
08012f44 g     O .bss	00000004 alt_argc
0800e620 g     F .text	0000005c _do_dtors
08005360 g     F .text	00000008 __locale_cjk_lang
08000020 g       .exceptions	00000000 alt_irq_entry
08006d10 g     F .text	00000060 __ulp
0800487c g     F .text	00000018 __fp_unlock_all
08011414 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08005390 g     F .text	0000000c localeconv
0800e698 g     F .text	00000050 alt_ic_isr_register
0801143c g       *ABS*	00000000 _edata
08013088 g       *ABS*	00000000 _end
0800022c g       *ABS*	00000000 __ram_exceptions_end
0800de64 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0800e788 g     F .text	000000a4 alt_ic_irq_disable
080078a8 g     F .text	0000007c __swrite
0801140c g     O .rwdata	00000004 __malloc_trim_threshold
08005354 g     F .text	0000000c __locale_msgcharset
0800f248 g     F .text	00000038 exit
08005204 g     F .text	000000b8 _fwalk_reent
08006b78 g     F .text	00000198 __mdiff
0800a5f0 g     F .text	0000005c .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08004858 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800f5a4 g     F .text	00000034 _exit
0800e374 g     F .text	00000140 alt_alarm_start
0800539c g     F .text	000001b8 __smakebuf_r
08000650 g     F .text	00000098 strlen
0800ec04 g     F .text	00000160 open
0800b924 g     F .text	000000e0 .hidden __gedf2
08011410 g     O .rwdata	00000004 __wctomb
08007b28 g     F .text	00000018 __sprint_r
0800e67c g     F .text	0000001c alt_icache_flush_all
08011430 g     O .rwdata	00000004 alt_priority_mask
0800e6e8 g     F .text	000000a0 alt_ic_irq_enable
080027e4 g     F .text	00000024 __vfprintf_internal
08009878 g     F .text	0000005c _wctomb_r
0800c350 g     F .text	000008d0 .hidden __subdf3
08006514 g     F .text	000000b0 __lo0bits
08011434 g     O .rwdata	00000008 alt_alarm_list
0800e5c4 g     F .text	0000005c _do_ctors
08009770 g     F .text	000000d8 wcrtomb
0800ced0 g     F .text	000000d8 close
0800d23c g     F .text	00000080 alt_load
080093a8 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
0800485c g     F .text	00000004 __sinit_lock_acquire
0800626c g     F .text	0000013c __multadd
08006244 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408b14 	ori	at,at,556
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001cc0 	call	80001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820074 	movhi	r2,2049
 8000140:	108be204 	addi	r2,r2,12168
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820074 	movhi	r2,2049
 8000158:	108be204 	addi	r2,r2,12168
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	e037883a 	mov	sp,fp
 80001bc:	dfc00117 	ldw	ra,4(sp)
 80001c0:	df000017 	ldw	fp,0(sp)
 80001c4:	dec00204 	addi	sp,sp,8
 80001c8:	f800283a 	ret

080001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001cc:	defffb04 	addi	sp,sp,-20
 80001d0:	dfc00415 	stw	ra,16(sp)
 80001d4:	df000315 	stw	fp,12(sp)
 80001d8:	df000304 	addi	fp,sp,12
 80001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e0:	00bfffc4 	movi	r2,-1
 80001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001ec:	d0a6d817 	ldw	r2,-25760(gp)
 80001f0:	10000726 	beq	r2,zero,8000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f4:	d0a6d817 	ldw	r2,-25760(gp)
 80001f8:	e0fffd17 	ldw	r3,-12(fp)
 80001fc:	1809883a 	mov	r4,r3
 8000200:	e17fff17 	ldw	r5,-4(fp)
 8000204:	e1bffe17 	ldw	r6,-8(fp)
 8000208:	103ee83a 	callr	r2
 800020c:	00000206 	br	8000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000214:	0005883a 	mov	r2,zero
}
 8000218:	e037883a 	mov	sp,fp
 800021c:	dfc00117 	ldw	ra,4(sp)
 8000220:	df000017 	ldw	fp,0(sp)
 8000224:	dec00204 	addi	sp,sp,8
 8000228:	f800283a 	ret

Disassembly of section .text:

0800022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 800022c:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000234:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 8000238:	d6a4ff14 	ori	gp,gp,37884
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 800023c:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000240:	108bca14 	ori	r2,r2,12072

    movhi r3, %hi(__bss_end)
 8000244:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 8000248:	18cc2214 	ori	r3,r3,12424

    beq r2, r3, 1f
 800024c:	10c00326 	beq	r2,r3,800025c <_start+0x30>

0:
    stw zero, (r2)
 8000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000258:	10fffd36 	bltu	r2,r3,8000250 <__alt_data_end+0xfc000250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 800025c:	800d23c0 	call	800d23c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000260:	800d3e80 	call	800d3e8 <alt_main>

08000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000264:	003fff06 	br	8000264 <__alt_data_end+0xfc000264>

08000268 <main>:
//#define to_sw_port ((char*) 0x00000050) // actual address here
#define to_sw_sig ((char*) 0x00000040) // actual address here


int main()
{
 8000268:	defffd04 	addi	sp,sp,-12
 800026c:	dfc00215 	stw	ra,8(sp)
 8000270:	df000115 	stw	fp,4(sp)
 8000274:	df000104 	addi	fp,sp,4
*to_hw_sig = 0;
 8000278:	00801804 	movi	r2,96
 800027c:	10000005 	stb	zero,0(r2)
//|

//(1,0,0)
while(1){

  int i =0;
 8000280:	e03fff15 	stw	zero,-4(fp)
  while(*to_sw_sig != 2){
 8000284:	00009706 	br	80004e4 <main+0x27c>
	printf("Top");
 8000288:	01020074 	movhi	r4,2049
 800028c:	213d7604 	addi	r4,r4,-2600
 8000290:	80005480 	call	8000548 <printf>

    *to_hw_sig = 1;
 8000294:	00801804 	movi	r2,96
 8000298:	00c00044 	movi	r3,1
 800029c:	10c00005 	stb	r3,0(r2)
    *to_hw_data = 8;
 80002a0:	00801c04 	movi	r2,112
 80002a4:	00c00204 	movi	r3,8
 80002a8:	10c00005 	stb	r3,0(r2)
    while(*to_sw_sig != 1) { //Still in reset state
 80002ac:	00000806 	br	80002d0 <main+0x68>
    	if(*to_sw_sig == 2)
 80002b0:	00801004 	movi	r2,64
 80002b4:	10800003 	ldbu	r2,0(r2)
 80002b8:	10803fcc 	andi	r2,r2,255
 80002bc:	1080201c 	xori	r2,r2,128
 80002c0:	10bfe004 	addi	r2,r2,-128
 80002c4:	10800098 	cmpnei	r2,r2,2
 80002c8:	1000011e 	bne	r2,zero,80002d0 <main+0x68>
    		break;
 80002cc:	00000706 	br	80002ec <main+0x84>
  while(*to_sw_sig != 2){
	printf("Top");

    *to_hw_sig = 1;
    *to_hw_data = 8;
    while(*to_sw_sig != 1) { //Still in reset state
 80002d0:	00801004 	movi	r2,64
 80002d4:	10800003 	ldbu	r2,0(r2)
 80002d8:	10803fcc 	andi	r2,r2,255
 80002dc:	1080201c 	xori	r2,r2,128
 80002e0:	10bfe004 	addi	r2,r2,-128
 80002e4:	10800058 	cmpnei	r2,r2,1
 80002e8:	103ff11e 	bne	r2,zero,80002b0 <__alt_data_end+0xfc0002b0>
    	if(*to_sw_sig == 2)
    		break;
    }
    printf("Checkpoint 1\n");
 80002ec:	01020074 	movhi	r4,2049
 80002f0:	213d7704 	addi	r4,r4,-2596
 80002f4:	800063c0 	call	800063c <puts>
    *to_hw_sig = 2;
 80002f8:	00801804 	movi	r2,96
 80002fc:	00c00084 	movi	r3,2
 8000300:	10c00005 	stb	r3,0(r2)
    while(*to_sw_sig != 0) {    	if(*to_sw_sig == 2)
 8000304:	00000806 	br	8000328 <main+0xc0>
 8000308:	00801004 	movi	r2,64
 800030c:	10800003 	ldbu	r2,0(r2)
 8000310:	10803fcc 	andi	r2,r2,255
 8000314:	1080201c 	xori	r2,r2,128
 8000318:	10bfe004 	addi	r2,r2,-128
 800031c:	10800098 	cmpnei	r2,r2,2
 8000320:	1000011e 	bne	r2,zero,8000328 <main+0xc0>
		break;}; //Still in read state
 8000324:	00000606 	br	8000340 <main+0xd8>
    	if(*to_sw_sig == 2)
    		break;
    }
    printf("Checkpoint 1\n");
    *to_hw_sig = 2;
    while(*to_sw_sig != 0) {    	if(*to_sw_sig == 2)
 8000328:	00801004 	movi	r2,64
 800032c:	10800003 	ldbu	r2,0(r2)
 8000330:	10803fcc 	andi	r2,r2,255
 8000334:	1080201c 	xori	r2,r2,128
 8000338:	10bfe004 	addi	r2,r2,-128
 800033c:	103ff21e 	bne	r2,zero,8000308 <__alt_data_end+0xfc000308>
		break;}; //Still in read state
    printf("Checkpoint 2\n");
 8000340:	01020074 	movhi	r4,2049
 8000344:	213d7b04 	addi	r4,r4,-2580
 8000348:	800063c0 	call	800063c <puts>

    *to_hw_sig = 1;
 800034c:	00801804 	movi	r2,96
 8000350:	00c00044 	movi	r3,1
 8000354:	10c00005 	stb	r3,0(r2)
    *to_hw_data = 5;
 8000358:	00801c04 	movi	r2,112
 800035c:	00c00144 	movi	r3,5
 8000360:	10c00005 	stb	r3,0(r2)
    while(*to_sw_sig != 1) {    	if(*to_sw_sig == 2)
 8000364:	00000806 	br	8000388 <main+0x120>
 8000368:	00801004 	movi	r2,64
 800036c:	10800003 	ldbu	r2,0(r2)
 8000370:	10803fcc 	andi	r2,r2,255
 8000374:	1080201c 	xori	r2,r2,128
 8000378:	10bfe004 	addi	r2,r2,-128
 800037c:	10800098 	cmpnei	r2,r2,2
 8000380:	1000011e 	bne	r2,zero,8000388 <main+0x120>
		break;} //Still in ACK state
 8000384:	00000706 	br	80003a4 <main+0x13c>
		break;}; //Still in read state
    printf("Checkpoint 2\n");

    *to_hw_sig = 1;
    *to_hw_data = 5;
    while(*to_sw_sig != 1) {    	if(*to_sw_sig == 2)
 8000388:	00801004 	movi	r2,64
 800038c:	10800003 	ldbu	r2,0(r2)
 8000390:	10803fcc 	andi	r2,r2,255
 8000394:	1080201c 	xori	r2,r2,128
 8000398:	10bfe004 	addi	r2,r2,-128
 800039c:	10800058 	cmpnei	r2,r2,1
 80003a0:	103ff11e 	bne	r2,zero,8000368 <__alt_data_end+0xfc000368>
		break;} //Still in ACK state
    printf("Checkpoint 3\n");
 80003a4:	01020074 	movhi	r4,2049
 80003a8:	213d7f04 	addi	r4,r4,-2564
 80003ac:	800063c0 	call	800063c <puts>
    *to_hw_sig = 2;
 80003b0:	00801804 	movi	r2,96
 80003b4:	00c00084 	movi	r3,2
 80003b8:	10c00005 	stb	r3,0(r2)
    while(*to_sw_sig != 0) {    	if(*to_sw_sig == 2)
 80003bc:	00000806 	br	80003e0 <main+0x178>
 80003c0:	00801004 	movi	r2,64
 80003c4:	10800003 	ldbu	r2,0(r2)
 80003c8:	10803fcc 	andi	r2,r2,255
 80003cc:	1080201c 	xori	r2,r2,128
 80003d0:	10bfe004 	addi	r2,r2,-128
 80003d4:	10800098 	cmpnei	r2,r2,2
 80003d8:	1000011e 	bne	r2,zero,80003e0 <main+0x178>
		break;} // Still in read state
 80003dc:	00000606 	br	80003f8 <main+0x190>
    *to_hw_data = 5;
    while(*to_sw_sig != 1) {    	if(*to_sw_sig == 2)
		break;} //Still in ACK state
    printf("Checkpoint 3\n");
    *to_hw_sig = 2;
    while(*to_sw_sig != 0) {    	if(*to_sw_sig == 2)
 80003e0:	00801004 	movi	r2,64
 80003e4:	10800003 	ldbu	r2,0(r2)
 80003e8:	10803fcc 	andi	r2,r2,255
 80003ec:	1080201c 	xori	r2,r2,128
 80003f0:	10bfe004 	addi	r2,r2,-128
 80003f4:	103ff21e 	bne	r2,zero,80003c0 <__alt_data_end+0xfc0003c0>
		break;} // Still in read state
    printf("Checkpoint 4\n");
 80003f8:	01020074 	movhi	r4,2049
 80003fc:	213d8304 	addi	r4,r4,-2548
 8000400:	800063c0 	call	800063c <puts>

    *to_hw_sig = 1;
 8000404:	00801804 	movi	r2,96
 8000408:	00c00044 	movi	r3,1
 800040c:	10c00005 	stb	r3,0(r2)
    *to_hw_data = 3;     //
 8000410:	00801c04 	movi	r2,112
 8000414:	00c000c4 	movi	r3,3
 8000418:	10c00005 	stb	r3,0(r2)
    while(*to_sw_sig != 1) {    	if(*to_sw_sig == 2)
 800041c:	00000806 	br	8000440 <main+0x1d8>
 8000420:	00801004 	movi	r2,64
 8000424:	10800003 	ldbu	r2,0(r2)
 8000428:	10803fcc 	andi	r2,r2,255
 800042c:	1080201c 	xori	r2,r2,128
 8000430:	10bfe004 	addi	r2,r2,-128
 8000434:	10800098 	cmpnei	r2,r2,2
 8000438:	1000011e 	bne	r2,zero,8000440 <main+0x1d8>
		break;}
 800043c:	00000706 	br	800045c <main+0x1f4>
		break;} // Still in read state
    printf("Checkpoint 4\n");

    *to_hw_sig = 1;
    *to_hw_data = 3;     //
    while(*to_sw_sig != 1) {    	if(*to_sw_sig == 2)
 8000440:	00801004 	movi	r2,64
 8000444:	10800003 	ldbu	r2,0(r2)
 8000448:	10803fcc 	andi	r2,r2,255
 800044c:	1080201c 	xori	r2,r2,128
 8000450:	10bfe004 	addi	r2,r2,-128
 8000454:	10800058 	cmpnei	r2,r2,1
 8000458:	103ff11e 	bne	r2,zero,8000420 <__alt_data_end+0xfc000420>
		break;}
    printf("Checkpoint 5\n");
 800045c:	01020074 	movhi	r4,2049
 8000460:	213d8704 	addi	r4,r4,-2532
 8000464:	800063c0 	call	800063c <puts>
    *to_hw_sig = 2;
 8000468:	00801804 	movi	r2,96
 800046c:	00c00084 	movi	r3,2
 8000470:	10c00005 	stb	r3,0(r2)
    while(*to_sw_sig != 0) {    	if(*to_sw_sig == 2)
 8000474:	00000806 	br	8000498 <main+0x230>
 8000478:	00801004 	movi	r2,64
 800047c:	10800003 	ldbu	r2,0(r2)
 8000480:	10803fcc 	andi	r2,r2,255
 8000484:	1080201c 	xori	r2,r2,128
 8000488:	10bfe004 	addi	r2,r2,-128
 800048c:	10800098 	cmpnei	r2,r2,2
 8000490:	1000011e 	bne	r2,zero,8000498 <main+0x230>
		break;} // Still in read state
 8000494:	00000606 	br	80004b0 <main+0x248>
    *to_hw_data = 3;     //
    while(*to_sw_sig != 1) {    	if(*to_sw_sig == 2)
		break;}
    printf("Checkpoint 5\n");
    *to_hw_sig = 2;
    while(*to_sw_sig != 0) {    	if(*to_sw_sig == 2)
 8000498:	00801004 	movi	r2,64
 800049c:	10800003 	ldbu	r2,0(r2)
 80004a0:	10803fcc 	andi	r2,r2,255
 80004a4:	1080201c 	xori	r2,r2,128
 80004a8:	10bfe004 	addi	r2,r2,-128
 80004ac:	103ff21e 	bne	r2,zero,8000478 <__alt_data_end+0xfc000478>
		break;} // Still in read state
    printf("Checkpoint 6\n");
 80004b0:	01020074 	movhi	r4,2049
 80004b4:	213d8b04 	addi	r4,r4,-2516
 80004b8:	800063c0 	call	800063c <puts>
    
    printf("%d\n", i);
 80004bc:	01020074 	movhi	r4,2049
 80004c0:	213d8f04 	addi	r4,r4,-2500
 80004c4:	e17fff17 	ldw	r5,-4(fp)
 80004c8:	80005480 	call	8000548 <printf>
    i++;
 80004cc:	e0bfff17 	ldw	r2,-4(fp)
 80004d0:	10800044 	addi	r2,r2,1
 80004d4:	e0bfff15 	stw	r2,-4(fp)
    printf("Bottom");
 80004d8:	01020074 	movhi	r4,2049
 80004dc:	213d9004 	addi	r4,r4,-2496
 80004e0:	80005480 	call	8000548 <printf>

//(1,0,0)
while(1){

  int i =0;
  while(*to_sw_sig != 2){
 80004e4:	00801004 	movi	r2,64
 80004e8:	10800003 	ldbu	r2,0(r2)
 80004ec:	10803fcc 	andi	r2,r2,255
 80004f0:	1080201c 	xori	r2,r2,128
 80004f4:	10bfe004 	addi	r2,r2,-128
 80004f8:	10800098 	cmpnei	r2,r2,2
 80004fc:	103f621e 	bne	r2,zero,8000288 <__alt_data_end+0xfc000288>



  }

  printf("Outside\n");
 8000500:	01020074 	movhi	r4,2049
 8000504:	213d9204 	addi	r4,r4,-2488
 8000508:	800063c0 	call	800063c <puts>

  *to_hw_sig = 2;
 800050c:	00801804 	movi	r2,96
 8000510:	00c00084 	movi	r3,2
 8000514:	10c00005 	stb	r3,0(r2)
  //back to hw
}
 8000518:	003f5906 	br	8000280 <__alt_data_end+0xfc000280>

0800051c <_printf_r>:
 800051c:	defffd04 	addi	sp,sp,-12
 8000520:	dfc00015 	stw	ra,0(sp)
 8000524:	d9800115 	stw	r6,4(sp)
 8000528:	d9c00215 	stw	r7,8(sp)
 800052c:	280d883a 	mov	r6,r5
 8000530:	21400217 	ldw	r5,8(r4)
 8000534:	d9c00104 	addi	r7,sp,4
 8000538:	80006e80 	call	80006e8 <___vfprintf_internal_r>
 800053c:	dfc00017 	ldw	ra,0(sp)
 8000540:	dec00304 	addi	sp,sp,12
 8000544:	f800283a 	ret

08000548 <printf>:
 8000548:	defffc04 	addi	sp,sp,-16
 800054c:	dfc00015 	stw	ra,0(sp)
 8000550:	d9400115 	stw	r5,4(sp)
 8000554:	d9800215 	stw	r6,8(sp)
 8000558:	d9c00315 	stw	r7,12(sp)
 800055c:	00820074 	movhi	r2,2049
 8000560:	10850004 	addi	r2,r2,5120
 8000564:	10800017 	ldw	r2,0(r2)
 8000568:	200b883a 	mov	r5,r4
 800056c:	d9800104 	addi	r6,sp,4
 8000570:	11000217 	ldw	r4,8(r2)
 8000574:	80027e40 	call	80027e4 <__vfprintf_internal>
 8000578:	dfc00017 	ldw	ra,0(sp)
 800057c:	dec00404 	addi	sp,sp,16
 8000580:	f800283a 	ret

08000584 <_puts_r>:
 8000584:	defff604 	addi	sp,sp,-40
 8000588:	dc000715 	stw	r16,28(sp)
 800058c:	2021883a 	mov	r16,r4
 8000590:	2809883a 	mov	r4,r5
 8000594:	dc400815 	stw	r17,32(sp)
 8000598:	dfc00915 	stw	ra,36(sp)
 800059c:	2823883a 	mov	r17,r5
 80005a0:	80006500 	call	8000650 <strlen>
 80005a4:	00c20074 	movhi	r3,2049
 80005a8:	18c50004 	addi	r3,r3,5120
 80005ac:	18c00017 	ldw	r3,0(r3)
 80005b0:	11000044 	addi	r4,r2,1
 80005b4:	d8800115 	stw	r2,4(sp)
 80005b8:	18c00217 	ldw	r3,8(r3)
 80005bc:	01420074 	movhi	r5,2049
 80005c0:	297d9404 	addi	r5,r5,-2480
 80005c4:	1880030b 	ldhu	r2,12(r3)
 80005c8:	d9400215 	stw	r5,8(sp)
 80005cc:	d9000615 	stw	r4,24(sp)
 80005d0:	01400044 	movi	r5,1
 80005d4:	01000084 	movi	r4,2
 80005d8:	d9000515 	stw	r4,20(sp)
 80005dc:	dc400015 	stw	r17,0(sp)
 80005e0:	d9400315 	stw	r5,12(sp)
 80005e4:	dec00415 	stw	sp,16(sp)
 80005e8:	1108000c 	andi	r4,r2,8192
 80005ec:	2000061e 	bne	r4,zero,8000608 <_puts_r+0x84>
 80005f0:	19401917 	ldw	r5,100(r3)
 80005f4:	0137ffc4 	movi	r4,-8193
 80005f8:	10880014 	ori	r2,r2,8192
 80005fc:	2908703a 	and	r4,r5,r4
 8000600:	1880030d 	sth	r2,12(r3)
 8000604:	19001915 	stw	r4,100(r3)
 8000608:	81400217 	ldw	r5,8(r16)
 800060c:	8009883a 	mov	r4,r16
 8000610:	d9800404 	addi	r6,sp,16
 8000614:	8004ca80 	call	8004ca8 <__sfvwrite_r>
 8000618:	1000061e 	bne	r2,zero,8000634 <_puts_r+0xb0>
 800061c:	00800284 	movi	r2,10
 8000620:	dfc00917 	ldw	ra,36(sp)
 8000624:	dc400817 	ldw	r17,32(sp)
 8000628:	dc000717 	ldw	r16,28(sp)
 800062c:	dec00a04 	addi	sp,sp,40
 8000630:	f800283a 	ret
 8000634:	00bfffc4 	movi	r2,-1
 8000638:	003ff906 	br	8000620 <__alt_data_end+0xfc000620>

0800063c <puts>:
 800063c:	00820074 	movhi	r2,2049
 8000640:	10850004 	addi	r2,r2,5120
 8000644:	200b883a 	mov	r5,r4
 8000648:	11000017 	ldw	r4,0(r2)
 800064c:	80005841 	jmpi	8000584 <_puts_r>

08000650 <strlen>:
 8000650:	208000cc 	andi	r2,r4,3
 8000654:	10002026 	beq	r2,zero,80006d8 <strlen+0x88>
 8000658:	20800007 	ldb	r2,0(r4)
 800065c:	10002026 	beq	r2,zero,80006e0 <strlen+0x90>
 8000660:	2005883a 	mov	r2,r4
 8000664:	00000206 	br	8000670 <strlen+0x20>
 8000668:	10c00007 	ldb	r3,0(r2)
 800066c:	18001826 	beq	r3,zero,80006d0 <strlen+0x80>
 8000670:	10800044 	addi	r2,r2,1
 8000674:	10c000cc 	andi	r3,r2,3
 8000678:	183ffb1e 	bne	r3,zero,8000668 <__alt_data_end+0xfc000668>
 800067c:	10c00017 	ldw	r3,0(r2)
 8000680:	01ffbff4 	movhi	r7,65279
 8000684:	39ffbfc4 	addi	r7,r7,-257
 8000688:	00ca303a 	nor	r5,zero,r3
 800068c:	01a02074 	movhi	r6,32897
 8000690:	19c7883a 	add	r3,r3,r7
 8000694:	31a02004 	addi	r6,r6,-32640
 8000698:	1946703a 	and	r3,r3,r5
 800069c:	1986703a 	and	r3,r3,r6
 80006a0:	1800091e 	bne	r3,zero,80006c8 <strlen+0x78>
 80006a4:	10800104 	addi	r2,r2,4
 80006a8:	10c00017 	ldw	r3,0(r2)
 80006ac:	19cb883a 	add	r5,r3,r7
 80006b0:	00c6303a 	nor	r3,zero,r3
 80006b4:	28c6703a 	and	r3,r5,r3
 80006b8:	1986703a 	and	r3,r3,r6
 80006bc:	183ff926 	beq	r3,zero,80006a4 <__alt_data_end+0xfc0006a4>
 80006c0:	00000106 	br	80006c8 <strlen+0x78>
 80006c4:	10800044 	addi	r2,r2,1
 80006c8:	10c00007 	ldb	r3,0(r2)
 80006cc:	183ffd1e 	bne	r3,zero,80006c4 <__alt_data_end+0xfc0006c4>
 80006d0:	1105c83a 	sub	r2,r2,r4
 80006d4:	f800283a 	ret
 80006d8:	2005883a 	mov	r2,r4
 80006dc:	003fe706 	br	800067c <__alt_data_end+0xfc00067c>
 80006e0:	0005883a 	mov	r2,zero
 80006e4:	f800283a 	ret

080006e8 <___vfprintf_internal_r>:
 80006e8:	defeb604 	addi	sp,sp,-1320
 80006ec:	dfc14915 	stw	ra,1316(sp)
 80006f0:	ddc14715 	stw	r23,1308(sp)
 80006f4:	dd814615 	stw	r22,1304(sp)
 80006f8:	202f883a 	mov	r23,r4
 80006fc:	282d883a 	mov	r22,r5
 8000700:	d9812a15 	stw	r6,1192(sp)
 8000704:	d9c12d15 	stw	r7,1204(sp)
 8000708:	df014815 	stw	fp,1312(sp)
 800070c:	dd414515 	stw	r21,1300(sp)
 8000710:	dd014415 	stw	r20,1296(sp)
 8000714:	dcc14315 	stw	r19,1292(sp)
 8000718:	dc814215 	stw	r18,1288(sp)
 800071c:	dc414115 	stw	r17,1284(sp)
 8000720:	dc014015 	stw	r16,1280(sp)
 8000724:	80053680 	call	8005368 <_localeconv_r>
 8000728:	10800017 	ldw	r2,0(r2)
 800072c:	1009883a 	mov	r4,r2
 8000730:	d8813515 	stw	r2,1236(sp)
 8000734:	80006500 	call	8000650 <strlen>
 8000738:	d8813815 	stw	r2,1248(sp)
 800073c:	b8000226 	beq	r23,zero,8000748 <___vfprintf_internal_r+0x60>
 8000740:	b8800e17 	ldw	r2,56(r23)
 8000744:	10010526 	beq	r2,zero,8000b5c <___vfprintf_internal_r+0x474>
 8000748:	b0c0030b 	ldhu	r3,12(r22)
 800074c:	1908000c 	andi	r4,r3,8192
 8000750:	1805883a 	mov	r2,r3
 8000754:	2000071e 	bne	r4,zero,8000774 <___vfprintf_internal_r+0x8c>
 8000758:	b1001917 	ldw	r4,100(r22)
 800075c:	18880014 	ori	r2,r3,8192
 8000760:	00f7ffc4 	movi	r3,-8193
 8000764:	20c8703a 	and	r4,r4,r3
 8000768:	b080030d 	sth	r2,12(r22)
 800076c:	1007883a 	mov	r3,r2
 8000770:	b1001915 	stw	r4,100(r22)
 8000774:	1100020c 	andi	r4,r2,8
 8000778:	2000a826 	beq	r4,zero,8000a1c <___vfprintf_internal_r+0x334>
 800077c:	b1000417 	ldw	r4,16(r22)
 8000780:	2000a626 	beq	r4,zero,8000a1c <___vfprintf_internal_r+0x334>
 8000784:	1080068c 	andi	r2,r2,26
 8000788:	01000284 	movi	r4,10
 800078c:	1100ac26 	beq	r2,r4,8000a40 <___vfprintf_internal_r+0x358>
 8000790:	d8c10e04 	addi	r3,sp,1080
 8000794:	d9010dc4 	addi	r4,sp,1079
 8000798:	d9400404 	addi	r5,sp,16
 800079c:	05020074 	movhi	r20,2049
 80007a0:	1905c83a 	sub	r2,r3,r4
 80007a4:	a53da584 	addi	r20,r20,-2410
 80007a8:	d8c12815 	stw	r3,1184(sp)
 80007ac:	d9012915 	stw	r4,1188(sp)
 80007b0:	d9411e15 	stw	r5,1144(sp)
 80007b4:	d8012015 	stw	zero,1152(sp)
 80007b8:	d8011f15 	stw	zero,1148(sp)
 80007bc:	d8013315 	stw	zero,1228(sp)
 80007c0:	d8013715 	stw	zero,1244(sp)
 80007c4:	d8013915 	stw	zero,1252(sp)
 80007c8:	d8013b15 	stw	zero,1260(sp)
 80007cc:	d8013a15 	stw	zero,1256(sp)
 80007d0:	d8012f15 	stw	zero,1212(sp)
 80007d4:	2811883a 	mov	r8,r5
 80007d8:	d8813c15 	stw	r2,1264(sp)
 80007dc:	d8c12a17 	ldw	r3,1192(sp)
 80007e0:	18800007 	ldb	r2,0(r3)
 80007e4:	10021326 	beq	r2,zero,8001034 <___vfprintf_internal_r+0x94c>
 80007e8:	00c00944 	movi	r3,37
 80007ec:	dc012a17 	ldw	r16,1192(sp)
 80007f0:	10c0021e 	bne	r2,r3,80007fc <___vfprintf_internal_r+0x114>
 80007f4:	00001606 	br	8000850 <___vfprintf_internal_r+0x168>
 80007f8:	10c08526 	beq	r2,r3,8000a10 <___vfprintf_internal_r+0x328>
 80007fc:	84000044 	addi	r16,r16,1
 8000800:	80800007 	ldb	r2,0(r16)
 8000804:	103ffc1e 	bne	r2,zero,80007f8 <__alt_data_end+0xfc0007f8>
 8000808:	d9012a17 	ldw	r4,1192(sp)
 800080c:	8123c83a 	sub	r17,r16,r4
 8000810:	88000f26 	beq	r17,zero,8000850 <___vfprintf_internal_r+0x168>
 8000814:	d8812a17 	ldw	r2,1192(sp)
 8000818:	d8c12017 	ldw	r3,1152(sp)
 800081c:	44400115 	stw	r17,4(r8)
 8000820:	40800015 	stw	r2,0(r8)
 8000824:	d8811f17 	ldw	r2,1148(sp)
 8000828:	1c47883a 	add	r3,r3,r17
 800082c:	d8c12015 	stw	r3,1152(sp)
 8000830:	10800044 	addi	r2,r2,1
 8000834:	d8811f15 	stw	r2,1148(sp)
 8000838:	00c001c4 	movi	r3,7
 800083c:	1880b516 	blt	r3,r2,8000b14 <___vfprintf_internal_r+0x42c>
 8000840:	42000204 	addi	r8,r8,8
 8000844:	d8c12f17 	ldw	r3,1212(sp)
 8000848:	1c47883a 	add	r3,r3,r17
 800084c:	d8c12f15 	stw	r3,1212(sp)
 8000850:	80800007 	ldb	r2,0(r16)
 8000854:	1000b626 	beq	r2,zero,8000b30 <___vfprintf_internal_r+0x448>
 8000858:	80800044 	addi	r2,r16,1
 800085c:	84000047 	ldb	r16,1(r16)
 8000860:	0027883a 	mov	r19,zero
 8000864:	0039883a 	mov	fp,zero
 8000868:	dcc12b05 	stb	r19,1196(sp)
 800086c:	d8012785 	stb	zero,1182(sp)
 8000870:	027fffc4 	movi	r9,-1
 8000874:	d8012e15 	stw	zero,1208(sp)
 8000878:	04401604 	movi	r17,88
 800087c:	04800244 	movi	r18,9
 8000880:	da012a15 	stw	r8,1192(sp)
 8000884:	e027883a 	mov	r19,fp
 8000888:	17000044 	addi	fp,r2,1
 800088c:	80bff804 	addi	r2,r16,-32
 8000890:	88831236 	bltu	r17,r2,80014dc <___vfprintf_internal_r+0xdf4>
 8000894:	100490ba 	slli	r2,r2,2
 8000898:	01020034 	movhi	r4,2048
 800089c:	21022b04 	addi	r4,r4,2220
 80008a0:	1105883a 	add	r2,r2,r4
 80008a4:	10800017 	ldw	r2,0(r2)
 80008a8:	1000683a 	jmp	r2
 80008ac:	080013f8 	rdprs	zero,at,79
 80008b0:	080014dc 	xori	zero,at,83
 80008b4:	080014dc 	xori	zero,at,83
 80008b8:	08001414 	ori	zero,at,80
 80008bc:	080014dc 	xori	zero,at,83
 80008c0:	080014dc 	xori	zero,at,83
 80008c4:	080014dc 	xori	zero,at,83
 80008c8:	080014dc 	xori	zero,at,83
 80008cc:	080014dc 	xori	zero,at,83
 80008d0:	080014dc 	xori	zero,at,83
 80008d4:	08001424 	muli	zero,at,80
 80008d8:	0800144c 	andi	zero,at,81
 80008dc:	080014dc 	xori	zero,at,83
 80008e0:	08000b68 	cmpgeui	zero,at,45
 80008e4:	08000b78 	rdprs	zero,at,45
 80008e8:	080014dc 	xori	zero,at,83
 80008ec:	08000bc8 	cmpgei	zero,at,47
 80008f0:	08000bd8 	cmpnei	zero,at,47
 80008f4:	08000bd8 	cmpnei	zero,at,47
 80008f8:	08000bd8 	cmpnei	zero,at,47
 80008fc:	08000bd8 	cmpnei	zero,at,47
 8000900:	08000bd8 	cmpnei	zero,at,47
 8000904:	08000bd8 	cmpnei	zero,at,47
 8000908:	08000bd8 	cmpnei	zero,at,47
 800090c:	08000bd8 	cmpnei	zero,at,47
 8000910:	08000bd8 	cmpnei	zero,at,47
 8000914:	080014dc 	xori	zero,at,83
 8000918:	080014dc 	xori	zero,at,83
 800091c:	080014dc 	xori	zero,at,83
 8000920:	080014dc 	xori	zero,at,83
 8000924:	080014dc 	xori	zero,at,83
 8000928:	080014dc 	xori	zero,at,83
 800092c:	080014dc 	xori	zero,at,83
 8000930:	080014dc 	xori	zero,at,83
 8000934:	080014dc 	xori	zero,at,83
 8000938:	080014dc 	xori	zero,at,83
 800093c:	08000c1c 	xori	zero,at,48
 8000940:	0800103c 	xorhi	zero,at,64
 8000944:	080014dc 	xori	zero,at,83
 8000948:	0800103c 	xorhi	zero,at,64
 800094c:	080014dc 	xori	zero,at,83
 8000950:	080014dc 	xori	zero,at,83
 8000954:	080014dc 	xori	zero,at,83
 8000958:	080014dc 	xori	zero,at,83
 800095c:	080010e4 	muli	zero,at,67
 8000960:	080014dc 	xori	zero,at,83
 8000964:	080014dc 	xori	zero,at,83
 8000968:	080010f4 	orhi	zero,at,67
 800096c:	080014dc 	xori	zero,at,83
 8000970:	080014dc 	xori	zero,at,83
 8000974:	080014dc 	xori	zero,at,83
 8000978:	080014dc 	xori	zero,at,83
 800097c:	080014dc 	xori	zero,at,83
 8000980:	08001138 	rdprs	zero,at,68
 8000984:	080014dc 	xori	zero,at,83
 8000988:	080014dc 	xori	zero,at,83
 800098c:	08001170 	cmpltui	zero,at,69
 8000990:	080014dc 	xori	zero,at,83
 8000994:	080014dc 	xori	zero,at,83
 8000998:	080014dc 	xori	zero,at,83
 800099c:	080014dc 	xori	zero,at,83
 80009a0:	080014dc 	xori	zero,at,83
 80009a4:	080014dc 	xori	zero,at,83
 80009a8:	080014dc 	xori	zero,at,83
 80009ac:	080014dc 	xori	zero,at,83
 80009b0:	080014dc 	xori	zero,at,83
 80009b4:	080014dc 	xori	zero,at,83
 80009b8:	080013ac 	andhi	zero,at,78
 80009bc:	08001358 	cmpnei	zero,at,77
 80009c0:	0800103c 	xorhi	zero,at,64
 80009c4:	0800103c 	xorhi	zero,at,64
 80009c8:	0800103c 	xorhi	zero,at,64
 80009cc:	0800139c 	xori	zero,at,78
 80009d0:	08001358 	cmpnei	zero,at,77
 80009d4:	080014dc 	xori	zero,at,83
 80009d8:	080014dc 	xori	zero,at,83
 80009dc:	08001274 	orhi	zero,at,73
 80009e0:	080014dc 	xori	zero,at,83
 80009e4:	0800128c 	andi	zero,at,74
 80009e8:	080012cc 	andi	zero,at,75
 80009ec:	0800130c 	andi	zero,at,76
 80009f0:	080011d8 	cmpnei	zero,at,71
 80009f4:	080014dc 	xori	zero,at,83
 80009f8:	08001460 	cmpeqi	zero,at,81
 80009fc:	080014dc 	xori	zero,at,83
 8000a00:	080011e8 	cmpgeui	zero,at,71
 8000a04:	080014dc 	xori	zero,at,83
 8000a08:	080014dc 	xori	zero,at,83
 8000a0c:	08001228 	cmpgeui	zero,at,72
 8000a10:	d9412a17 	ldw	r5,1192(sp)
 8000a14:	8163c83a 	sub	r17,r16,r5
 8000a18:	003f7d06 	br	8000810 <__alt_data_end+0xfc000810>
 8000a1c:	b809883a 	mov	r4,r23
 8000a20:	b00b883a 	mov	r5,r22
 8000a24:	80028080 	call	8002808 <__swsetup_r>
 8000a28:	10002d1e 	bne	r2,zero,8000ae0 <___vfprintf_internal_r+0x3f8>
 8000a2c:	b0c0030b 	ldhu	r3,12(r22)
 8000a30:	01000284 	movi	r4,10
 8000a34:	1805883a 	mov	r2,r3
 8000a38:	1080068c 	andi	r2,r2,26
 8000a3c:	113f541e 	bne	r2,r4,8000790 <__alt_data_end+0xfc000790>
 8000a40:	b080038b 	ldhu	r2,14(r22)
 8000a44:	113fffcc 	andi	r4,r2,65535
 8000a48:	2120001c 	xori	r4,r4,32768
 8000a4c:	21200004 	addi	r4,r4,-32768
 8000a50:	203f4f16 	blt	r4,zero,8000790 <__alt_data_end+0xfc000790>
 8000a54:	b2c01917 	ldw	r11,100(r22)
 8000a58:	b2800717 	ldw	r10,28(r22)
 8000a5c:	b2400917 	ldw	r9,36(r22)
 8000a60:	d9812a17 	ldw	r6,1192(sp)
 8000a64:	d9c12d17 	ldw	r7,1204(sp)
 8000a68:	02010004 	movi	r8,1024
 8000a6c:	18ffff4c 	andi	r3,r3,65533
 8000a70:	d881078d 	sth	r2,1054(sp)
 8000a74:	b809883a 	mov	r4,r23
 8000a78:	d8800404 	addi	r2,sp,16
 8000a7c:	d9410404 	addi	r5,sp,1040
 8000a80:	d8c1070d 	sth	r3,1052(sp)
 8000a84:	dac11d15 	stw	r11,1140(sp)
 8000a88:	da810b15 	stw	r10,1068(sp)
 8000a8c:	da410d15 	stw	r9,1076(sp)
 8000a90:	d8810415 	stw	r2,1040(sp)
 8000a94:	d8810815 	stw	r2,1056(sp)
 8000a98:	da010615 	stw	r8,1048(sp)
 8000a9c:	da010915 	stw	r8,1060(sp)
 8000aa0:	d8010a15 	stw	zero,1064(sp)
 8000aa4:	80006e80 	call	80006e8 <___vfprintf_internal_r>
 8000aa8:	1021883a 	mov	r16,r2
 8000aac:	10000416 	blt	r2,zero,8000ac0 <___vfprintf_internal_r+0x3d8>
 8000ab0:	b809883a 	mov	r4,r23
 8000ab4:	d9410404 	addi	r5,sp,1040
 8000ab8:	80042880 	call	8004288 <_fflush_r>
 8000abc:	1007301e 	bne	r2,zero,8002780 <___vfprintf_internal_r+0x2098>
 8000ac0:	d881070b 	ldhu	r2,1052(sp)
 8000ac4:	1080100c 	andi	r2,r2,64
 8000ac8:	10000326 	beq	r2,zero,8000ad8 <___vfprintf_internal_r+0x3f0>
 8000acc:	b080030b 	ldhu	r2,12(r22)
 8000ad0:	10801014 	ori	r2,r2,64
 8000ad4:	b080030d 	sth	r2,12(r22)
 8000ad8:	8005883a 	mov	r2,r16
 8000adc:	00000106 	br	8000ae4 <___vfprintf_internal_r+0x3fc>
 8000ae0:	00bfffc4 	movi	r2,-1
 8000ae4:	dfc14917 	ldw	ra,1316(sp)
 8000ae8:	df014817 	ldw	fp,1312(sp)
 8000aec:	ddc14717 	ldw	r23,1308(sp)
 8000af0:	dd814617 	ldw	r22,1304(sp)
 8000af4:	dd414517 	ldw	r21,1300(sp)
 8000af8:	dd014417 	ldw	r20,1296(sp)
 8000afc:	dcc14317 	ldw	r19,1292(sp)
 8000b00:	dc814217 	ldw	r18,1288(sp)
 8000b04:	dc414117 	ldw	r17,1284(sp)
 8000b08:	dc014017 	ldw	r16,1280(sp)
 8000b0c:	dec14a04 	addi	sp,sp,1320
 8000b10:	f800283a 	ret
 8000b14:	b809883a 	mov	r4,r23
 8000b18:	b00b883a 	mov	r5,r22
 8000b1c:	d9811e04 	addi	r6,sp,1144
 8000b20:	8007b280 	call	8007b28 <__sprint_r>
 8000b24:	1000081e 	bne	r2,zero,8000b48 <___vfprintf_internal_r+0x460>
 8000b28:	da000404 	addi	r8,sp,16
 8000b2c:	003f4506 	br	8000844 <__alt_data_end+0xfc000844>
 8000b30:	d8812017 	ldw	r2,1152(sp)
 8000b34:	10000426 	beq	r2,zero,8000b48 <___vfprintf_internal_r+0x460>
 8000b38:	b809883a 	mov	r4,r23
 8000b3c:	b00b883a 	mov	r5,r22
 8000b40:	d9811e04 	addi	r6,sp,1144
 8000b44:	8007b280 	call	8007b28 <__sprint_r>
 8000b48:	b080030b 	ldhu	r2,12(r22)
 8000b4c:	1080100c 	andi	r2,r2,64
 8000b50:	103fe31e 	bne	r2,zero,8000ae0 <__alt_data_end+0xfc000ae0>
 8000b54:	d8812f17 	ldw	r2,1212(sp)
 8000b58:	003fe206 	br	8000ae4 <__alt_data_end+0xfc000ae4>
 8000b5c:	b809883a 	mov	r4,r23
 8000b60:	80048440 	call	8004844 <__sinit>
 8000b64:	003ef806 	br	8000748 <__alt_data_end+0xfc000748>
 8000b68:	e005883a 	mov	r2,fp
 8000b6c:	9cc00114 	ori	r19,r19,4
 8000b70:	e4000007 	ldb	r16,0(fp)
 8000b74:	003f4406 	br	8000888 <__alt_data_end+0xfc000888>
 8000b78:	e4000007 	ldb	r16,0(fp)
 8000b7c:	01000a84 	movi	r4,42
 8000b80:	e0800044 	addi	r2,fp,1
 8000b84:	8106f626 	beq	r16,r4,8002760 <___vfprintf_internal_r+0x2078>
 8000b88:	857ff404 	addi	r21,r16,-48
 8000b8c:	1039883a 	mov	fp,r2
 8000b90:	0013883a 	mov	r9,zero
 8000b94:	957f3d36 	bltu	r18,r21,800088c <__alt_data_end+0xfc00088c>
 8000b98:	0009883a 	mov	r4,zero
 8000b9c:	01400284 	movi	r5,10
 8000ba0:	800a65c0 	call	800a65c <__mulsi3>
 8000ba4:	e4000007 	ldb	r16,0(fp)
 8000ba8:	a889883a 	add	r4,r21,r2
 8000bac:	e7000044 	addi	fp,fp,1
 8000bb0:	857ff404 	addi	r21,r16,-48
 8000bb4:	957ff92e 	bgeu	r18,r21,8000b9c <__alt_data_end+0xfc000b9c>
 8000bb8:	2013883a 	mov	r9,r4
 8000bbc:	203f330e 	bge	r4,zero,800088c <__alt_data_end+0xfc00088c>
 8000bc0:	027fffc4 	movi	r9,-1
 8000bc4:	003f3106 	br	800088c <__alt_data_end+0xfc00088c>
 8000bc8:	9cc02014 	ori	r19,r19,128
 8000bcc:	e005883a 	mov	r2,fp
 8000bd0:	e4000007 	ldb	r16,0(fp)
 8000bd4:	003f2c06 	br	8000888 <__alt_data_end+0xfc000888>
 8000bd8:	857ff404 	addi	r21,r16,-48
 8000bdc:	d8012e15 	stw	zero,1208(sp)
 8000be0:	e021883a 	mov	r16,fp
 8000be4:	0009883a 	mov	r4,zero
 8000be8:	da412c15 	stw	r9,1200(sp)
 8000bec:	01400284 	movi	r5,10
 8000bf0:	800a65c0 	call	800a65c <__mulsi3>
 8000bf4:	81400007 	ldb	r5,0(r16)
 8000bf8:	1549883a 	add	r4,r2,r21
 8000bfc:	e7000044 	addi	fp,fp,1
 8000c00:	2d7ff404 	addi	r21,r5,-48
 8000c04:	e021883a 	mov	r16,fp
 8000c08:	957ff82e 	bgeu	r18,r21,8000bec <__alt_data_end+0xfc000bec>
 8000c0c:	2821883a 	mov	r16,r5
 8000c10:	d9012e15 	stw	r4,1208(sp)
 8000c14:	da412c17 	ldw	r9,1200(sp)
 8000c18:	003f1c06 	br	800088c <__alt_data_end+0xfc00088c>
 8000c1c:	da012a17 	ldw	r8,1192(sp)
 8000c20:	df012a15 	stw	fp,1192(sp)
 8000c24:	9839883a 	mov	fp,r19
 8000c28:	dcc12b03 	ldbu	r19,1196(sp)
 8000c2c:	e7000414 	ori	fp,fp,16
 8000c30:	e080080c 	andi	r2,fp,32
 8000c34:	dcc12785 	stb	r19,1182(sp)
 8000c38:	d8c12d17 	ldw	r3,1204(sp)
 8000c3c:	1001ce26 	beq	r2,zero,8001378 <___vfprintf_internal_r+0xc90>
 8000c40:	d9012d17 	ldw	r4,1204(sp)
 8000c44:	18800117 	ldw	r2,4(r3)
 8000c48:	1c800017 	ldw	r18,0(r3)
 8000c4c:	21000204 	addi	r4,r4,8
 8000c50:	d9012d15 	stw	r4,1204(sp)
 8000c54:	102b883a 	mov	r21,r2
 8000c58:	10044916 	blt	r2,zero,8001d80 <___vfprintf_internal_r+0x1698>
 8000c5c:	dcc12783 	ldbu	r19,1182(sp)
 8000c60:	da413215 	stw	r9,1224(sp)
 8000c64:	00800044 	movi	r2,1
 8000c68:	9546b03a 	or	r3,r18,r21
 8000c6c:	48000216 	blt	r9,zero,8000c78 <___vfprintf_internal_r+0x590>
 8000c70:	013fdfc4 	movi	r4,-129
 8000c74:	e138703a 	and	fp,fp,r4
 8000c78:	1802251e 	bne	r3,zero,8001510 <___vfprintf_internal_r+0xe28>
 8000c7c:	48031726 	beq	r9,zero,80018dc <___vfprintf_internal_r+0x11f4>
 8000c80:	10803fcc 	andi	r2,r2,255
 8000c84:	00c00044 	movi	r3,1
 8000c88:	10c24526 	beq	r2,r3,80015a0 <___vfprintf_internal_r+0xeb8>
 8000c8c:	00c00084 	movi	r3,2
 8000c90:	10c33426 	beq	r2,r3,8001964 <___vfprintf_internal_r+0x127c>
 8000c94:	d8c10e04 	addi	r3,sp,1080
 8000c98:	9008d0fa 	srli	r4,r18,3
 8000c9c:	a80a977a 	slli	r5,r21,29
 8000ca0:	a82ad0fa 	srli	r21,r21,3
 8000ca4:	948001cc 	andi	r18,r18,7
 8000ca8:	90800c04 	addi	r2,r18,48
 8000cac:	18ffffc4 	addi	r3,r3,-1
 8000cb0:	2924b03a 	or	r18,r5,r4
 8000cb4:	18800005 	stb	r2,0(r3)
 8000cb8:	9548b03a 	or	r4,r18,r21
 8000cbc:	203ff61e 	bne	r4,zero,8000c98 <__alt_data_end+0xfc000c98>
 8000cc0:	e100004c 	andi	r4,fp,1
 8000cc4:	d8c13115 	stw	r3,1220(sp)
 8000cc8:	20039a1e 	bne	r4,zero,8001b34 <___vfprintf_internal_r+0x144c>
 8000ccc:	d8812817 	ldw	r2,1184(sp)
 8000cd0:	10e3c83a 	sub	r17,r2,r3
 8000cd4:	8805883a 	mov	r2,r17
 8000cd8:	8a40010e 	bge	r17,r9,8000ce0 <___vfprintf_internal_r+0x5f8>
 8000cdc:	4805883a 	mov	r2,r9
 8000ce0:	d8812b15 	stw	r2,1196(sp)
 8000ce4:	d8013415 	stw	zero,1232(sp)
 8000ce8:	98803fcc 	andi	r2,r19,255
 8000cec:	1080201c 	xori	r2,r2,128
 8000cf0:	10bfe004 	addi	r2,r2,-128
 8000cf4:	10000326 	beq	r2,zero,8000d04 <___vfprintf_internal_r+0x61c>
 8000cf8:	d8c12b17 	ldw	r3,1196(sp)
 8000cfc:	18c00044 	addi	r3,r3,1
 8000d00:	d8c12b15 	stw	r3,1196(sp)
 8000d04:	e0c0008c 	andi	r3,fp,2
 8000d08:	d8c12c15 	stw	r3,1200(sp)
 8000d0c:	18000326 	beq	r3,zero,8000d1c <___vfprintf_internal_r+0x634>
 8000d10:	d8c12b17 	ldw	r3,1196(sp)
 8000d14:	18c00084 	addi	r3,r3,2
 8000d18:	d8c12b15 	stw	r3,1196(sp)
 8000d1c:	e0c0210c 	andi	r3,fp,132
 8000d20:	d8c13015 	stw	r3,1216(sp)
 8000d24:	1801f81e 	bne	r3,zero,8001508 <___vfprintf_internal_r+0xe20>
 8000d28:	d9012e17 	ldw	r4,1208(sp)
 8000d2c:	d8c12b17 	ldw	r3,1196(sp)
 8000d30:	20ebc83a 	sub	r21,r4,r3
 8000d34:	0541f40e 	bge	zero,r21,8001508 <___vfprintf_internal_r+0xe20>
 8000d38:	02400404 	movi	r9,16
 8000d3c:	d8c12017 	ldw	r3,1152(sp)
 8000d40:	d8811f17 	ldw	r2,1148(sp)
 8000d44:	4d45750e 	bge	r9,r21,800231c <___vfprintf_internal_r+0x1c34>
 8000d48:	01420074 	movhi	r5,2049
 8000d4c:	297da984 	addi	r5,r5,-2394
 8000d50:	d9413615 	stw	r5,1240(sp)
 8000d54:	4827883a 	mov	r19,r9
 8000d58:	048001c4 	movi	r18,7
 8000d5c:	00000306 	br	8000d6c <___vfprintf_internal_r+0x684>
 8000d60:	ad7ffc04 	addi	r21,r21,-16
 8000d64:	42000204 	addi	r8,r8,8
 8000d68:	9d40130e 	bge	r19,r21,8000db8 <___vfprintf_internal_r+0x6d0>
 8000d6c:	01020074 	movhi	r4,2049
 8000d70:	18c00404 	addi	r3,r3,16
 8000d74:	10800044 	addi	r2,r2,1
 8000d78:	213da984 	addi	r4,r4,-2394
 8000d7c:	41000015 	stw	r4,0(r8)
 8000d80:	44c00115 	stw	r19,4(r8)
 8000d84:	d8c12015 	stw	r3,1152(sp)
 8000d88:	d8811f15 	stw	r2,1148(sp)
 8000d8c:	90bff40e 	bge	r18,r2,8000d60 <__alt_data_end+0xfc000d60>
 8000d90:	b809883a 	mov	r4,r23
 8000d94:	b00b883a 	mov	r5,r22
 8000d98:	d9811e04 	addi	r6,sp,1144
 8000d9c:	8007b280 	call	8007b28 <__sprint_r>
 8000da0:	103f691e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 8000da4:	ad7ffc04 	addi	r21,r21,-16
 8000da8:	d8c12017 	ldw	r3,1152(sp)
 8000dac:	d8811f17 	ldw	r2,1148(sp)
 8000db0:	da000404 	addi	r8,sp,16
 8000db4:	9d7fed16 	blt	r19,r21,8000d6c <__alt_data_end+0xfc000d6c>
 8000db8:	d9413617 	ldw	r5,1240(sp)
 8000dbc:	a8c7883a 	add	r3,r21,r3
 8000dc0:	10800044 	addi	r2,r2,1
 8000dc4:	41400015 	stw	r5,0(r8)
 8000dc8:	45400115 	stw	r21,4(r8)
 8000dcc:	d8c12015 	stw	r3,1152(sp)
 8000dd0:	d8811f15 	stw	r2,1148(sp)
 8000dd4:	010001c4 	movi	r4,7
 8000dd8:	20832b16 	blt	r4,r2,8001a88 <___vfprintf_internal_r+0x13a0>
 8000ddc:	d8812787 	ldb	r2,1182(sp)
 8000de0:	42000204 	addi	r8,r8,8
 8000de4:	10000c26 	beq	r2,zero,8000e18 <___vfprintf_internal_r+0x730>
 8000de8:	d8811f17 	ldw	r2,1148(sp)
 8000dec:	d9012784 	addi	r4,sp,1182
 8000df0:	18c00044 	addi	r3,r3,1
 8000df4:	10800044 	addi	r2,r2,1
 8000df8:	41000015 	stw	r4,0(r8)
 8000dfc:	01000044 	movi	r4,1
 8000e00:	41000115 	stw	r4,4(r8)
 8000e04:	d8c12015 	stw	r3,1152(sp)
 8000e08:	d8811f15 	stw	r2,1148(sp)
 8000e0c:	010001c4 	movi	r4,7
 8000e10:	2082c416 	blt	r4,r2,8001924 <___vfprintf_internal_r+0x123c>
 8000e14:	42000204 	addi	r8,r8,8
 8000e18:	d8812c17 	ldw	r2,1200(sp)
 8000e1c:	10000c26 	beq	r2,zero,8000e50 <___vfprintf_internal_r+0x768>
 8000e20:	d8811f17 	ldw	r2,1148(sp)
 8000e24:	d9012704 	addi	r4,sp,1180
 8000e28:	18c00084 	addi	r3,r3,2
 8000e2c:	10800044 	addi	r2,r2,1
 8000e30:	41000015 	stw	r4,0(r8)
 8000e34:	01000084 	movi	r4,2
 8000e38:	41000115 	stw	r4,4(r8)
 8000e3c:	d8c12015 	stw	r3,1152(sp)
 8000e40:	d8811f15 	stw	r2,1148(sp)
 8000e44:	010001c4 	movi	r4,7
 8000e48:	2082be16 	blt	r4,r2,8001944 <___vfprintf_internal_r+0x125c>
 8000e4c:	42000204 	addi	r8,r8,8
 8000e50:	d9013017 	ldw	r4,1216(sp)
 8000e54:	00802004 	movi	r2,128
 8000e58:	20822026 	beq	r4,r2,80016dc <___vfprintf_internal_r+0xff4>
 8000e5c:	d9413217 	ldw	r5,1224(sp)
 8000e60:	2c67c83a 	sub	r19,r5,r17
 8000e64:	04c0260e 	bge	zero,r19,8000f00 <___vfprintf_internal_r+0x818>
 8000e68:	05400404 	movi	r21,16
 8000e6c:	d8811f17 	ldw	r2,1148(sp)
 8000e70:	acc4720e 	bge	r21,r19,800203c <___vfprintf_internal_r+0x1954>
 8000e74:	01420074 	movhi	r5,2049
 8000e78:	297da584 	addi	r5,r5,-2410
 8000e7c:	d9412c15 	stw	r5,1200(sp)
 8000e80:	048001c4 	movi	r18,7
 8000e84:	00000306 	br	8000e94 <___vfprintf_internal_r+0x7ac>
 8000e88:	9cfffc04 	addi	r19,r19,-16
 8000e8c:	42000204 	addi	r8,r8,8
 8000e90:	acc0110e 	bge	r21,r19,8000ed8 <___vfprintf_internal_r+0x7f0>
 8000e94:	18c00404 	addi	r3,r3,16
 8000e98:	10800044 	addi	r2,r2,1
 8000e9c:	45000015 	stw	r20,0(r8)
 8000ea0:	45400115 	stw	r21,4(r8)
 8000ea4:	d8c12015 	stw	r3,1152(sp)
 8000ea8:	d8811f15 	stw	r2,1148(sp)
 8000eac:	90bff60e 	bge	r18,r2,8000e88 <__alt_data_end+0xfc000e88>
 8000eb0:	b809883a 	mov	r4,r23
 8000eb4:	b00b883a 	mov	r5,r22
 8000eb8:	d9811e04 	addi	r6,sp,1144
 8000ebc:	8007b280 	call	8007b28 <__sprint_r>
 8000ec0:	103f211e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 8000ec4:	9cfffc04 	addi	r19,r19,-16
 8000ec8:	d8c12017 	ldw	r3,1152(sp)
 8000ecc:	d8811f17 	ldw	r2,1148(sp)
 8000ed0:	da000404 	addi	r8,sp,16
 8000ed4:	acffef16 	blt	r21,r19,8000e94 <__alt_data_end+0xfc000e94>
 8000ed8:	d9012c17 	ldw	r4,1200(sp)
 8000edc:	1cc7883a 	add	r3,r3,r19
 8000ee0:	10800044 	addi	r2,r2,1
 8000ee4:	41000015 	stw	r4,0(r8)
 8000ee8:	44c00115 	stw	r19,4(r8)
 8000eec:	d8c12015 	stw	r3,1152(sp)
 8000ef0:	d8811f15 	stw	r2,1148(sp)
 8000ef4:	010001c4 	movi	r4,7
 8000ef8:	20828216 	blt	r4,r2,8001904 <___vfprintf_internal_r+0x121c>
 8000efc:	42000204 	addi	r8,r8,8
 8000f00:	e080400c 	andi	r2,fp,256
 8000f04:	1001ac1e 	bne	r2,zero,80015b8 <___vfprintf_internal_r+0xed0>
 8000f08:	d8811f17 	ldw	r2,1148(sp)
 8000f0c:	d9413117 	ldw	r5,1220(sp)
 8000f10:	1c47883a 	add	r3,r3,r17
 8000f14:	10800044 	addi	r2,r2,1
 8000f18:	41400015 	stw	r5,0(r8)
 8000f1c:	44400115 	stw	r17,4(r8)
 8000f20:	d8c12015 	stw	r3,1152(sp)
 8000f24:	d8811f15 	stw	r2,1148(sp)
 8000f28:	010001c4 	movi	r4,7
 8000f2c:	20825d16 	blt	r4,r2,80018a4 <___vfprintf_internal_r+0x11bc>
 8000f30:	42000204 	addi	r8,r8,8
 8000f34:	e080010c 	andi	r2,fp,4
 8000f38:	10003126 	beq	r2,zero,8001000 <___vfprintf_internal_r+0x918>
 8000f3c:	d8812e17 	ldw	r2,1208(sp)
 8000f40:	d9012b17 	ldw	r4,1196(sp)
 8000f44:	1121c83a 	sub	r16,r2,r4
 8000f48:	04002d0e 	bge	zero,r16,8001000 <___vfprintf_internal_r+0x918>
 8000f4c:	04400404 	movi	r17,16
 8000f50:	d8811f17 	ldw	r2,1148(sp)
 8000f54:	8c05340e 	bge	r17,r16,8002428 <___vfprintf_internal_r+0x1d40>
 8000f58:	01020074 	movhi	r4,2049
 8000f5c:	213da984 	addi	r4,r4,-2394
 8000f60:	d9013615 	stw	r4,1240(sp)
 8000f64:	048001c4 	movi	r18,7
 8000f68:	00000306 	br	8000f78 <___vfprintf_internal_r+0x890>
 8000f6c:	843ffc04 	addi	r16,r16,-16
 8000f70:	42000204 	addi	r8,r8,8
 8000f74:	8c00130e 	bge	r17,r16,8000fc4 <___vfprintf_internal_r+0x8dc>
 8000f78:	01420074 	movhi	r5,2049
 8000f7c:	18c00404 	addi	r3,r3,16
 8000f80:	10800044 	addi	r2,r2,1
 8000f84:	297da984 	addi	r5,r5,-2394
 8000f88:	41400015 	stw	r5,0(r8)
 8000f8c:	44400115 	stw	r17,4(r8)
 8000f90:	d8c12015 	stw	r3,1152(sp)
 8000f94:	d8811f15 	stw	r2,1148(sp)
 8000f98:	90bff40e 	bge	r18,r2,8000f6c <__alt_data_end+0xfc000f6c>
 8000f9c:	b809883a 	mov	r4,r23
 8000fa0:	b00b883a 	mov	r5,r22
 8000fa4:	d9811e04 	addi	r6,sp,1144
 8000fa8:	8007b280 	call	8007b28 <__sprint_r>
 8000fac:	103ee61e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 8000fb0:	843ffc04 	addi	r16,r16,-16
 8000fb4:	d8c12017 	ldw	r3,1152(sp)
 8000fb8:	d8811f17 	ldw	r2,1148(sp)
 8000fbc:	da000404 	addi	r8,sp,16
 8000fc0:	8c3fed16 	blt	r17,r16,8000f78 <__alt_data_end+0xfc000f78>
 8000fc4:	d9013617 	ldw	r4,1240(sp)
 8000fc8:	1c07883a 	add	r3,r3,r16
 8000fcc:	10800044 	addi	r2,r2,1
 8000fd0:	41000015 	stw	r4,0(r8)
 8000fd4:	44000115 	stw	r16,4(r8)
 8000fd8:	d8c12015 	stw	r3,1152(sp)
 8000fdc:	d8811f15 	stw	r2,1148(sp)
 8000fe0:	010001c4 	movi	r4,7
 8000fe4:	2080060e 	bge	r4,r2,8001000 <___vfprintf_internal_r+0x918>
 8000fe8:	b809883a 	mov	r4,r23
 8000fec:	b00b883a 	mov	r5,r22
 8000ff0:	d9811e04 	addi	r6,sp,1144
 8000ff4:	8007b280 	call	8007b28 <__sprint_r>
 8000ff8:	103ed31e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 8000ffc:	d8c12017 	ldw	r3,1152(sp)
 8001000:	df012b17 	ldw	fp,1196(sp)
 8001004:	d9412e17 	ldw	r5,1208(sp)
 8001008:	e140010e 	bge	fp,r5,8001010 <___vfprintf_internal_r+0x928>
 800100c:	2839883a 	mov	fp,r5
 8001010:	d8812f17 	ldw	r2,1212(sp)
 8001014:	1705883a 	add	r2,r2,fp
 8001018:	d8812f15 	stw	r2,1212(sp)
 800101c:	1802291e 	bne	r3,zero,80018c4 <___vfprintf_internal_r+0x11dc>
 8001020:	d8c12a17 	ldw	r3,1192(sp)
 8001024:	d8011f15 	stw	zero,1148(sp)
 8001028:	da000404 	addi	r8,sp,16
 800102c:	18800007 	ldb	r2,0(r3)
 8001030:	103ded1e 	bne	r2,zero,80007e8 <__alt_data_end+0xfc0007e8>
 8001034:	dc012a17 	ldw	r16,1192(sp)
 8001038:	003e0506 	br	8000850 <__alt_data_end+0xfc000850>
 800103c:	d9012d17 	ldw	r4,1204(sp)
 8001040:	d9412d17 	ldw	r5,1204(sp)
 8001044:	da012a17 	ldw	r8,1192(sp)
 8001048:	21000017 	ldw	r4,0(r4)
 800104c:	29400117 	ldw	r5,4(r5)
 8001050:	df012a15 	stw	fp,1192(sp)
 8001054:	9839883a 	mov	fp,r19
 8001058:	dcc12b03 	ldbu	r19,1196(sp)
 800105c:	d9013715 	stw	r4,1244(sp)
 8001060:	d9413915 	stw	r5,1252(sp)
 8001064:	da013f15 	stw	r8,1276(sp)
 8001068:	da413e15 	stw	r9,1272(sp)
 800106c:	dcc12785 	stb	r19,1182(sp)
 8001070:	80077840 	call	8007784 <__fpclassifyd>
 8001074:	d8c12d17 	ldw	r3,1204(sp)
 8001078:	04400044 	movi	r17,1
 800107c:	da013f17 	ldw	r8,1276(sp)
 8001080:	1c800204 	addi	r18,r3,8
 8001084:	da413e17 	ldw	r9,1272(sp)
 8001088:	d9013717 	ldw	r4,1244(sp)
 800108c:	d9413917 	ldw	r5,1252(sp)
 8001090:	1443451e 	bne	r2,r17,8001da8 <___vfprintf_internal_r+0x16c0>
 8001094:	000d883a 	mov	r6,zero
 8001098:	000f883a 	mov	r7,zero
 800109c:	800ba040 	call	800ba04 <__ledf2>
 80010a0:	da013f17 	ldw	r8,1276(sp)
 80010a4:	1004fe16 	blt	r2,zero,80024a0 <___vfprintf_internal_r+0x1db8>
 80010a8:	dcc12783 	ldbu	r19,1182(sp)
 80010ac:	008011c4 	movi	r2,71
 80010b0:	14045d0e 	bge	r2,r16,8002228 <___vfprintf_internal_r+0x1b40>
 80010b4:	01420074 	movhi	r5,2049
 80010b8:	297d9604 	addi	r5,r5,-2472
 80010bc:	d9413115 	stw	r5,1220(sp)
 80010c0:	00c000c4 	movi	r3,3
 80010c4:	00bfdfc4 	movi	r2,-129
 80010c8:	d8c12b15 	stw	r3,1196(sp)
 80010cc:	e0b8703a 	and	fp,fp,r2
 80010d0:	dc812d15 	stw	r18,1204(sp)
 80010d4:	1823883a 	mov	r17,r3
 80010d8:	d8013215 	stw	zero,1224(sp)
 80010dc:	d8013415 	stw	zero,1232(sp)
 80010e0:	003f0106 	br	8000ce8 <__alt_data_end+0xfc000ce8>
 80010e4:	9cc00214 	ori	r19,r19,8
 80010e8:	e005883a 	mov	r2,fp
 80010ec:	e4000007 	ldb	r16,0(fp)
 80010f0:	003de506 	br	8000888 <__alt_data_end+0xfc000888>
 80010f4:	da012a17 	ldw	r8,1192(sp)
 80010f8:	df012a15 	stw	fp,1192(sp)
 80010fc:	9f000414 	ori	fp,r19,16
 8001100:	e0c0080c 	andi	r3,fp,32
 8001104:	d8812d17 	ldw	r2,1204(sp)
 8001108:	18007626 	beq	r3,zero,80012e4 <___vfprintf_internal_r+0xbfc>
 800110c:	d9412d17 	ldw	r5,1204(sp)
 8001110:	14800017 	ldw	r18,0(r2)
 8001114:	15400117 	ldw	r21,4(r2)
 8001118:	29400204 	addi	r5,r5,8
 800111c:	d9412d15 	stw	r5,1204(sp)
 8001120:	0005883a 	mov	r2,zero
 8001124:	9546b03a 	or	r3,r18,r21
 8001128:	d8012785 	stb	zero,1182(sp)
 800112c:	da413215 	stw	r9,1224(sp)
 8001130:	0027883a 	mov	r19,zero
 8001134:	003ecd06 	br	8000c6c <__alt_data_end+0xfc000c6c>
 8001138:	da012a17 	ldw	r8,1192(sp)
 800113c:	df012a15 	stw	fp,1192(sp)
 8001140:	9f000414 	ori	fp,r19,16
 8001144:	e0c0080c 	andi	r3,fp,32
 8001148:	d8812d17 	ldw	r2,1204(sp)
 800114c:	18002c26 	beq	r3,zero,8001200 <___vfprintf_internal_r+0xb18>
 8001150:	d9012d17 	ldw	r4,1204(sp)
 8001154:	14800017 	ldw	r18,0(r2)
 8001158:	15400117 	ldw	r21,4(r2)
 800115c:	21000204 	addi	r4,r4,8
 8001160:	d9012d15 	stw	r4,1204(sp)
 8001164:	00800044 	movi	r2,1
 8001168:	9546b03a 	or	r3,r18,r21
 800116c:	003fee06 	br	8001128 <__alt_data_end+0xfc001128>
 8001170:	da012a17 	ldw	r8,1192(sp)
 8001174:	df012a15 	stw	fp,1192(sp)
 8001178:	9839883a 	mov	fp,r19
 800117c:	dcc12b03 	ldbu	r19,1196(sp)
 8001180:	01420074 	movhi	r5,2049
 8001184:	297d9904 	addi	r5,r5,-2460
 8001188:	dcc12785 	stb	r19,1182(sp)
 800118c:	d9413b15 	stw	r5,1260(sp)
 8001190:	e0c0080c 	andi	r3,fp,32
 8001194:	d8812d17 	ldw	r2,1204(sp)
 8001198:	18002e26 	beq	r3,zero,8001254 <___vfprintf_internal_r+0xb6c>
 800119c:	d9412d17 	ldw	r5,1204(sp)
 80011a0:	14800017 	ldw	r18,0(r2)
 80011a4:	15400117 	ldw	r21,4(r2)
 80011a8:	29400204 	addi	r5,r5,8
 80011ac:	d9412d15 	stw	r5,1204(sp)
 80011b0:	e080004c 	andi	r2,fp,1
 80011b4:	10025c26 	beq	r2,zero,8001b28 <___vfprintf_internal_r+0x1440>
 80011b8:	9546b03a 	or	r3,r18,r21
 80011bc:	18038f26 	beq	r3,zero,8001ffc <___vfprintf_internal_r+0x1914>
 80011c0:	00800c04 	movi	r2,48
 80011c4:	d8812705 	stb	r2,1180(sp)
 80011c8:	dc012745 	stb	r16,1181(sp)
 80011cc:	e7000094 	ori	fp,fp,2
 80011d0:	00800084 	movi	r2,2
 80011d4:	003fd406 	br	8001128 <__alt_data_end+0xfc001128>
 80011d8:	9cc00814 	ori	r19,r19,32
 80011dc:	e005883a 	mov	r2,fp
 80011e0:	e4000007 	ldb	r16,0(fp)
 80011e4:	003da806 	br	8000888 <__alt_data_end+0xfc000888>
 80011e8:	da012a17 	ldw	r8,1192(sp)
 80011ec:	df012a15 	stw	fp,1192(sp)
 80011f0:	9839883a 	mov	fp,r19
 80011f4:	e0c0080c 	andi	r3,fp,32
 80011f8:	d8812d17 	ldw	r2,1204(sp)
 80011fc:	183fd41e 	bne	r3,zero,8001150 <__alt_data_end+0xfc001150>
 8001200:	e0c0040c 	andi	r3,fp,16
 8001204:	18035f26 	beq	r3,zero,8001f84 <___vfprintf_internal_r+0x189c>
 8001208:	d9412d17 	ldw	r5,1204(sp)
 800120c:	14800017 	ldw	r18,0(r2)
 8001210:	002b883a 	mov	r21,zero
 8001214:	29400104 	addi	r5,r5,4
 8001218:	d9412d15 	stw	r5,1204(sp)
 800121c:	00800044 	movi	r2,1
 8001220:	9007883a 	mov	r3,r18
 8001224:	003fc006 	br	8001128 <__alt_data_end+0xfc001128>
 8001228:	da012a17 	ldw	r8,1192(sp)
 800122c:	df012a15 	stw	fp,1192(sp)
 8001230:	9839883a 	mov	fp,r19
 8001234:	dcc12b03 	ldbu	r19,1196(sp)
 8001238:	01020074 	movhi	r4,2049
 800123c:	213d9e04 	addi	r4,r4,-2440
 8001240:	d9013b15 	stw	r4,1260(sp)
 8001244:	dcc12785 	stb	r19,1182(sp)
 8001248:	e0c0080c 	andi	r3,fp,32
 800124c:	d8812d17 	ldw	r2,1204(sp)
 8001250:	183fd21e 	bne	r3,zero,800119c <__alt_data_end+0xfc00119c>
 8001254:	e0c0040c 	andi	r3,fp,16
 8001258:	18035426 	beq	r3,zero,8001fac <___vfprintf_internal_r+0x18c4>
 800125c:	d8c12d17 	ldw	r3,1204(sp)
 8001260:	14800017 	ldw	r18,0(r2)
 8001264:	002b883a 	mov	r21,zero
 8001268:	18c00104 	addi	r3,r3,4
 800126c:	d8c12d15 	stw	r3,1204(sp)
 8001270:	003fcf06 	br	80011b0 <__alt_data_end+0xfc0011b0>
 8001274:	e4000007 	ldb	r16,0(fp)
 8001278:	00801b04 	movi	r2,108
 800127c:	8083f726 	beq	r16,r2,800225c <___vfprintf_internal_r+0x1b74>
 8001280:	9cc00414 	ori	r19,r19,16
 8001284:	e005883a 	mov	r2,fp
 8001288:	003d7f06 	br	8000888 <__alt_data_end+0xfc000888>
 800128c:	da012a17 	ldw	r8,1192(sp)
 8001290:	df012a15 	stw	fp,1192(sp)
 8001294:	9839883a 	mov	fp,r19
 8001298:	dcc12b03 	ldbu	r19,1196(sp)
 800129c:	e080080c 	andi	r2,fp,32
 80012a0:	dcc12785 	stb	r19,1182(sp)
 80012a4:	10032226 	beq	r2,zero,8001f30 <___vfprintf_internal_r+0x1848>
 80012a8:	d9412d17 	ldw	r5,1204(sp)
 80012ac:	d9012f17 	ldw	r4,1212(sp)
 80012b0:	28800017 	ldw	r2,0(r5)
 80012b4:	2007d7fa 	srai	r3,r4,31
 80012b8:	29400104 	addi	r5,r5,4
 80012bc:	d9412d15 	stw	r5,1204(sp)
 80012c0:	11000015 	stw	r4,0(r2)
 80012c4:	10c00115 	stw	r3,4(r2)
 80012c8:	003d4406 	br	80007dc <__alt_data_end+0xfc0007dc>
 80012cc:	da012a17 	ldw	r8,1192(sp)
 80012d0:	df012a15 	stw	fp,1192(sp)
 80012d4:	9839883a 	mov	fp,r19
 80012d8:	e0c0080c 	andi	r3,fp,32
 80012dc:	d8812d17 	ldw	r2,1204(sp)
 80012e0:	183f8a1e 	bne	r3,zero,800110c <__alt_data_end+0xfc00110c>
 80012e4:	e0c0040c 	andi	r3,fp,16
 80012e8:	18031c26 	beq	r3,zero,8001f5c <___vfprintf_internal_r+0x1874>
 80012ec:	14800017 	ldw	r18,0(r2)
 80012f0:	d8812d17 	ldw	r2,1204(sp)
 80012f4:	002b883a 	mov	r21,zero
 80012f8:	9007883a 	mov	r3,r18
 80012fc:	10800104 	addi	r2,r2,4
 8001300:	d8812d15 	stw	r2,1204(sp)
 8001304:	0005883a 	mov	r2,zero
 8001308:	003f8706 	br	8001128 <__alt_data_end+0xfc001128>
 800130c:	d9412d17 	ldw	r5,1204(sp)
 8001310:	00800c04 	movi	r2,48
 8001314:	d8812705 	stb	r2,1180(sp)
 8001318:	2c800017 	ldw	r18,0(r5)
 800131c:	00801e04 	movi	r2,120
 8001320:	d8812745 	stb	r2,1181(sp)
 8001324:	00820074 	movhi	r2,2049
 8001328:	10bd9e04 	addi	r2,r2,-2440
 800132c:	29400104 	addi	r5,r5,4
 8001330:	da012a17 	ldw	r8,1192(sp)
 8001334:	d8813b15 	stw	r2,1260(sp)
 8001338:	df012a15 	stw	fp,1192(sp)
 800133c:	002b883a 	mov	r21,zero
 8001340:	9f000094 	ori	fp,r19,2
 8001344:	d9412d15 	stw	r5,1204(sp)
 8001348:	00800084 	movi	r2,2
 800134c:	04001e04 	movi	r16,120
 8001350:	9007883a 	mov	r3,r18
 8001354:	003f7406 	br	8001128 <__alt_data_end+0xfc001128>
 8001358:	da012a17 	ldw	r8,1192(sp)
 800135c:	df012a15 	stw	fp,1192(sp)
 8001360:	9839883a 	mov	fp,r19
 8001364:	dcc12b03 	ldbu	r19,1196(sp)
 8001368:	e080080c 	andi	r2,fp,32
 800136c:	d8c12d17 	ldw	r3,1204(sp)
 8001370:	dcc12785 	stb	r19,1182(sp)
 8001374:	103e321e 	bne	r2,zero,8000c40 <__alt_data_end+0xfc000c40>
 8001378:	e080040c 	andi	r2,fp,16
 800137c:	10031326 	beq	r2,zero,8001fcc <___vfprintf_internal_r+0x18e4>
 8001380:	1c800017 	ldw	r18,0(r3)
 8001384:	d9412d17 	ldw	r5,1204(sp)
 8001388:	902bd7fa 	srai	r21,r18,31
 800138c:	29400104 	addi	r5,r5,4
 8001390:	d9412d15 	stw	r5,1204(sp)
 8001394:	a805883a 	mov	r2,r21
 8001398:	003e2f06 	br	8000c58 <__alt_data_end+0xfc000c58>
 800139c:	9cc01014 	ori	r19,r19,64
 80013a0:	e005883a 	mov	r2,fp
 80013a4:	e4000007 	ldb	r16,0(fp)
 80013a8:	003d3706 	br	8000888 <__alt_data_end+0xfc000888>
 80013ac:	d8c12d17 	ldw	r3,1204(sp)
 80013b0:	d9012d17 	ldw	r4,1204(sp)
 80013b4:	da012a17 	ldw	r8,1192(sp)
 80013b8:	18800017 	ldw	r2,0(r3)
 80013bc:	21000104 	addi	r4,r4,4
 80013c0:	00c00044 	movi	r3,1
 80013c4:	df012a15 	stw	fp,1192(sp)
 80013c8:	d8c12b15 	stw	r3,1196(sp)
 80013cc:	9839883a 	mov	fp,r19
 80013d0:	d8012785 	stb	zero,1182(sp)
 80013d4:	d8810405 	stb	r2,1040(sp)
 80013d8:	d9012d15 	stw	r4,1204(sp)
 80013dc:	1823883a 	mov	r17,r3
 80013e0:	d8c10404 	addi	r3,sp,1040
 80013e4:	d8013215 	stw	zero,1224(sp)
 80013e8:	d8013415 	stw	zero,1232(sp)
 80013ec:	d8c13115 	stw	r3,1220(sp)
 80013f0:	0005883a 	mov	r2,zero
 80013f4:	003e4306 	br	8000d04 <__alt_data_end+0xfc000d04>
 80013f8:	d8812b07 	ldb	r2,1196(sp)
 80013fc:	1002fc1e 	bne	r2,zero,8001ff0 <___vfprintf_internal_r+0x1908>
 8001400:	00c00804 	movi	r3,32
 8001404:	d8c12b05 	stb	r3,1196(sp)
 8001408:	e005883a 	mov	r2,fp
 800140c:	e4000007 	ldb	r16,0(fp)
 8001410:	003d1d06 	br	8000888 <__alt_data_end+0xfc000888>
 8001414:	9cc00054 	ori	r19,r19,1
 8001418:	e005883a 	mov	r2,fp
 800141c:	e4000007 	ldb	r16,0(fp)
 8001420:	003d1906 	br	8000888 <__alt_data_end+0xfc000888>
 8001424:	d9012d17 	ldw	r4,1204(sp)
 8001428:	d9412d17 	ldw	r5,1204(sp)
 800142c:	21000017 	ldw	r4,0(r4)
 8001430:	28c00104 	addi	r3,r5,4
 8001434:	d9012e15 	stw	r4,1208(sp)
 8001438:	20038c16 	blt	r4,zero,800226c <___vfprintf_internal_r+0x1b84>
 800143c:	d8c12d15 	stw	r3,1204(sp)
 8001440:	e005883a 	mov	r2,fp
 8001444:	e4000007 	ldb	r16,0(fp)
 8001448:	003d0f06 	br	8000888 <__alt_data_end+0xfc000888>
 800144c:	00c00ac4 	movi	r3,43
 8001450:	d8c12b05 	stb	r3,1196(sp)
 8001454:	e005883a 	mov	r2,fp
 8001458:	e4000007 	ldb	r16,0(fp)
 800145c:	003d0a06 	br	8000888 <__alt_data_end+0xfc000888>
 8001460:	d8c12d17 	ldw	r3,1204(sp)
 8001464:	d9012d17 	ldw	r4,1204(sp)
 8001468:	da012a17 	ldw	r8,1192(sp)
 800146c:	18c00017 	ldw	r3,0(r3)
 8001470:	df012a15 	stw	fp,1192(sp)
 8001474:	d8012785 	stb	zero,1182(sp)
 8001478:	d8c13115 	stw	r3,1220(sp)
 800147c:	9839883a 	mov	fp,r19
 8001480:	24800104 	addi	r18,r4,4
 8001484:	1803f726 	beq	r3,zero,8002464 <___vfprintf_internal_r+0x1d7c>
 8001488:	d9013117 	ldw	r4,1220(sp)
 800148c:	48038916 	blt	r9,zero,80022b4 <___vfprintf_internal_r+0x1bcc>
 8001490:	480d883a 	mov	r6,r9
 8001494:	000b883a 	mov	r5,zero
 8001498:	da013f15 	stw	r8,1276(sp)
 800149c:	da413e15 	stw	r9,1272(sp)
 80014a0:	8005cfc0 	call	8005cfc <memchr>
 80014a4:	da013f17 	ldw	r8,1276(sp)
 80014a8:	da413e17 	ldw	r9,1272(sp)
 80014ac:	10045926 	beq	r2,zero,8002614 <___vfprintf_internal_r+0x1f2c>
 80014b0:	d8c13117 	ldw	r3,1220(sp)
 80014b4:	10e3c83a 	sub	r17,r2,r3
 80014b8:	4c433516 	blt	r9,r17,8002190 <___vfprintf_internal_r+0x1aa8>
 80014bc:	8805883a 	mov	r2,r17
 80014c0:	88038116 	blt	r17,zero,80022c8 <___vfprintf_internal_r+0x1be0>
 80014c4:	dcc12783 	ldbu	r19,1182(sp)
 80014c8:	d8812b15 	stw	r2,1196(sp)
 80014cc:	dc812d15 	stw	r18,1204(sp)
 80014d0:	d8013215 	stw	zero,1224(sp)
 80014d4:	d8013415 	stw	zero,1232(sp)
 80014d8:	003e0306 	br	8000ce8 <__alt_data_end+0xfc000ce8>
 80014dc:	da012a17 	ldw	r8,1192(sp)
 80014e0:	df012a15 	stw	fp,1192(sp)
 80014e4:	9839883a 	mov	fp,r19
 80014e8:	dcc12b03 	ldbu	r19,1196(sp)
 80014ec:	dcc12785 	stb	r19,1182(sp)
 80014f0:	803d8f26 	beq	r16,zero,8000b30 <__alt_data_end+0xfc000b30>
 80014f4:	00c00044 	movi	r3,1
 80014f8:	d8c12b15 	stw	r3,1196(sp)
 80014fc:	dc010405 	stb	r16,1040(sp)
 8001500:	d8012785 	stb	zero,1182(sp)
 8001504:	003fb506 	br	80013dc <__alt_data_end+0xfc0013dc>
 8001508:	d8c12017 	ldw	r3,1152(sp)
 800150c:	003e3506 	br	8000de4 <__alt_data_end+0xfc000de4>
 8001510:	10803fcc 	andi	r2,r2,255
 8001514:	00c00044 	movi	r3,1
 8001518:	10fddc1e 	bne	r2,r3,8000c8c <__alt_data_end+0xfc000c8c>
 800151c:	a800021e 	bne	r21,zero,8001528 <___vfprintf_internal_r+0xe40>
 8001520:	00800244 	movi	r2,9
 8001524:	14801e2e 	bgeu	r2,r18,80015a0 <___vfprintf_internal_r+0xeb8>
 8001528:	dc012b15 	stw	r16,1196(sp)
 800152c:	dc410e04 	addi	r17,sp,1080
 8001530:	9021883a 	mov	r16,r18
 8001534:	da012c15 	stw	r8,1200(sp)
 8001538:	a825883a 	mov	r18,r21
 800153c:	482b883a 	mov	r21,r9
 8001540:	8009883a 	mov	r4,r16
 8001544:	900b883a 	mov	r5,r18
 8001548:	01800284 	movi	r6,10
 800154c:	000f883a 	mov	r7,zero
 8001550:	8009f140 	call	8009f14 <__umoddi3>
 8001554:	10800c04 	addi	r2,r2,48
 8001558:	8c7fffc4 	addi	r17,r17,-1
 800155c:	8009883a 	mov	r4,r16
 8001560:	900b883a 	mov	r5,r18
 8001564:	01800284 	movi	r6,10
 8001568:	000f883a 	mov	r7,zero
 800156c:	88800005 	stb	r2,0(r17)
 8001570:	80098d40 	call	80098d4 <__udivdi3>
 8001574:	1021883a 	mov	r16,r2
 8001578:	10c4b03a 	or	r2,r2,r3
 800157c:	1825883a 	mov	r18,r3
 8001580:	103fef1e 	bne	r2,zero,8001540 <__alt_data_end+0xfc001540>
 8001584:	d9012817 	ldw	r4,1184(sp)
 8001588:	dc413115 	stw	r17,1220(sp)
 800158c:	dc012b17 	ldw	r16,1196(sp)
 8001590:	da012c17 	ldw	r8,1200(sp)
 8001594:	a813883a 	mov	r9,r21
 8001598:	2463c83a 	sub	r17,r4,r17
 800159c:	003dcd06 	br	8000cd4 <__alt_data_end+0xfc000cd4>
 80015a0:	94800c04 	addi	r18,r18,48
 80015a4:	d8c10dc4 	addi	r3,sp,1079
 80015a8:	dc810dc5 	stb	r18,1079(sp)
 80015ac:	dc413c17 	ldw	r17,1264(sp)
 80015b0:	d8c13115 	stw	r3,1220(sp)
 80015b4:	003dc706 	br	8000cd4 <__alt_data_end+0xfc000cd4>
 80015b8:	00801944 	movi	r2,101
 80015bc:	1400720e 	bge	r2,r16,8001788 <___vfprintf_internal_r+0x10a0>
 80015c0:	d9013717 	ldw	r4,1244(sp)
 80015c4:	d9413917 	ldw	r5,1252(sp)
 80015c8:	000d883a 	mov	r6,zero
 80015cc:	000f883a 	mov	r7,zero
 80015d0:	d8c13d15 	stw	r3,1268(sp)
 80015d4:	da013f15 	stw	r8,1276(sp)
 80015d8:	800b8a00 	call	800b8a0 <__eqdf2>
 80015dc:	d8c13d17 	ldw	r3,1268(sp)
 80015e0:	da013f17 	ldw	r8,1276(sp)
 80015e4:	1000f41e 	bne	r2,zero,80019b8 <___vfprintf_internal_r+0x12d0>
 80015e8:	d8811f17 	ldw	r2,1148(sp)
 80015ec:	01020074 	movhi	r4,2049
 80015f0:	213da504 	addi	r4,r4,-2412
 80015f4:	18c00044 	addi	r3,r3,1
 80015f8:	10800044 	addi	r2,r2,1
 80015fc:	41000015 	stw	r4,0(r8)
 8001600:	01000044 	movi	r4,1
 8001604:	41000115 	stw	r4,4(r8)
 8001608:	d8c12015 	stw	r3,1152(sp)
 800160c:	d8811f15 	stw	r2,1148(sp)
 8001610:	010001c4 	movi	r4,7
 8001614:	20828d16 	blt	r4,r2,800204c <___vfprintf_internal_r+0x1964>
 8001618:	42000204 	addi	r8,r8,8
 800161c:	d8812617 	ldw	r2,1176(sp)
 8001620:	d9413317 	ldw	r5,1228(sp)
 8001624:	11400216 	blt	r2,r5,8001630 <___vfprintf_internal_r+0xf48>
 8001628:	e080004c 	andi	r2,fp,1
 800162c:	103e4126 	beq	r2,zero,8000f34 <__alt_data_end+0xfc000f34>
 8001630:	d8813817 	ldw	r2,1248(sp)
 8001634:	d9013517 	ldw	r4,1236(sp)
 8001638:	d9413817 	ldw	r5,1248(sp)
 800163c:	1887883a 	add	r3,r3,r2
 8001640:	d8811f17 	ldw	r2,1148(sp)
 8001644:	41000015 	stw	r4,0(r8)
 8001648:	41400115 	stw	r5,4(r8)
 800164c:	10800044 	addi	r2,r2,1
 8001650:	d8c12015 	stw	r3,1152(sp)
 8001654:	d8811f15 	stw	r2,1148(sp)
 8001658:	010001c4 	movi	r4,7
 800165c:	20830916 	blt	r4,r2,8002284 <___vfprintf_internal_r+0x1b9c>
 8001660:	42000204 	addi	r8,r8,8
 8001664:	d8813317 	ldw	r2,1228(sp)
 8001668:	143fffc4 	addi	r16,r2,-1
 800166c:	043e310e 	bge	zero,r16,8000f34 <__alt_data_end+0xfc000f34>
 8001670:	04400404 	movi	r17,16
 8001674:	d8811f17 	ldw	r2,1148(sp)
 8001678:	8c007e0e 	bge	r17,r16,8001874 <___vfprintf_internal_r+0x118c>
 800167c:	01420074 	movhi	r5,2049
 8001680:	297da584 	addi	r5,r5,-2410
 8001684:	d9412c15 	stw	r5,1200(sp)
 8001688:	04c001c4 	movi	r19,7
 800168c:	00000306 	br	800169c <___vfprintf_internal_r+0xfb4>
 8001690:	42000204 	addi	r8,r8,8
 8001694:	843ffc04 	addi	r16,r16,-16
 8001698:	8c00790e 	bge	r17,r16,8001880 <___vfprintf_internal_r+0x1198>
 800169c:	18c00404 	addi	r3,r3,16
 80016a0:	10800044 	addi	r2,r2,1
 80016a4:	45000015 	stw	r20,0(r8)
 80016a8:	44400115 	stw	r17,4(r8)
 80016ac:	d8c12015 	stw	r3,1152(sp)
 80016b0:	d8811f15 	stw	r2,1148(sp)
 80016b4:	98bff60e 	bge	r19,r2,8001690 <__alt_data_end+0xfc001690>
 80016b8:	b809883a 	mov	r4,r23
 80016bc:	b00b883a 	mov	r5,r22
 80016c0:	d9811e04 	addi	r6,sp,1144
 80016c4:	8007b280 	call	8007b28 <__sprint_r>
 80016c8:	103d1f1e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 80016cc:	d8c12017 	ldw	r3,1152(sp)
 80016d0:	d8811f17 	ldw	r2,1148(sp)
 80016d4:	da000404 	addi	r8,sp,16
 80016d8:	003fee06 	br	8001694 <__alt_data_end+0xfc001694>
 80016dc:	d9412e17 	ldw	r5,1208(sp)
 80016e0:	d8812b17 	ldw	r2,1196(sp)
 80016e4:	28a7c83a 	sub	r19,r5,r2
 80016e8:	04fddc0e 	bge	zero,r19,8000e5c <__alt_data_end+0xfc000e5c>
 80016ec:	05400404 	movi	r21,16
 80016f0:	d8811f17 	ldw	r2,1148(sp)
 80016f4:	acc3870e 	bge	r21,r19,8002514 <___vfprintf_internal_r+0x1e2c>
 80016f8:	01420074 	movhi	r5,2049
 80016fc:	297da584 	addi	r5,r5,-2410
 8001700:	d9412c15 	stw	r5,1200(sp)
 8001704:	048001c4 	movi	r18,7
 8001708:	00000306 	br	8001718 <___vfprintf_internal_r+0x1030>
 800170c:	9cfffc04 	addi	r19,r19,-16
 8001710:	42000204 	addi	r8,r8,8
 8001714:	acc0110e 	bge	r21,r19,800175c <___vfprintf_internal_r+0x1074>
 8001718:	18c00404 	addi	r3,r3,16
 800171c:	10800044 	addi	r2,r2,1
 8001720:	45000015 	stw	r20,0(r8)
 8001724:	45400115 	stw	r21,4(r8)
 8001728:	d8c12015 	stw	r3,1152(sp)
 800172c:	d8811f15 	stw	r2,1148(sp)
 8001730:	90bff60e 	bge	r18,r2,800170c <__alt_data_end+0xfc00170c>
 8001734:	b809883a 	mov	r4,r23
 8001738:	b00b883a 	mov	r5,r22
 800173c:	d9811e04 	addi	r6,sp,1144
 8001740:	8007b280 	call	8007b28 <__sprint_r>
 8001744:	103d001e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 8001748:	9cfffc04 	addi	r19,r19,-16
 800174c:	d8c12017 	ldw	r3,1152(sp)
 8001750:	d8811f17 	ldw	r2,1148(sp)
 8001754:	da000404 	addi	r8,sp,16
 8001758:	acffef16 	blt	r21,r19,8001718 <__alt_data_end+0xfc001718>
 800175c:	d9012c17 	ldw	r4,1200(sp)
 8001760:	1cc7883a 	add	r3,r3,r19
 8001764:	10800044 	addi	r2,r2,1
 8001768:	41000015 	stw	r4,0(r8)
 800176c:	44c00115 	stw	r19,4(r8)
 8001770:	d8c12015 	stw	r3,1152(sp)
 8001774:	d8811f15 	stw	r2,1148(sp)
 8001778:	010001c4 	movi	r4,7
 800177c:	20817816 	blt	r4,r2,8001d60 <___vfprintf_internal_r+0x1678>
 8001780:	42000204 	addi	r8,r8,8
 8001784:	003db506 	br	8000e5c <__alt_data_end+0xfc000e5c>
 8001788:	d9413317 	ldw	r5,1228(sp)
 800178c:	00800044 	movi	r2,1
 8001790:	18c00044 	addi	r3,r3,1
 8001794:	11413e0e 	bge	r2,r5,8001c90 <___vfprintf_internal_r+0x15a8>
 8001798:	dc011f17 	ldw	r16,1148(sp)
 800179c:	d8813117 	ldw	r2,1220(sp)
 80017a0:	d8c12015 	stw	r3,1152(sp)
 80017a4:	84000044 	addi	r16,r16,1
 80017a8:	40800015 	stw	r2,0(r8)
 80017ac:	00800044 	movi	r2,1
 80017b0:	40800115 	stw	r2,4(r8)
 80017b4:	dc011f15 	stw	r16,1148(sp)
 80017b8:	008001c4 	movi	r2,7
 80017bc:	14015616 	blt	r2,r16,8001d18 <___vfprintf_internal_r+0x1630>
 80017c0:	42000204 	addi	r8,r8,8
 80017c4:	d9013817 	ldw	r4,1248(sp)
 80017c8:	d9413517 	ldw	r5,1236(sp)
 80017cc:	84000044 	addi	r16,r16,1
 80017d0:	1907883a 	add	r3,r3,r4
 80017d4:	41400015 	stw	r5,0(r8)
 80017d8:	41000115 	stw	r4,4(r8)
 80017dc:	d8c12015 	stw	r3,1152(sp)
 80017e0:	dc011f15 	stw	r16,1148(sp)
 80017e4:	008001c4 	movi	r2,7
 80017e8:	14015416 	blt	r2,r16,8001d3c <___vfprintf_internal_r+0x1654>
 80017ec:	44400204 	addi	r17,r8,8
 80017f0:	d9013717 	ldw	r4,1244(sp)
 80017f4:	d9413917 	ldw	r5,1252(sp)
 80017f8:	000d883a 	mov	r6,zero
 80017fc:	000f883a 	mov	r7,zero
 8001800:	d8c13d15 	stw	r3,1268(sp)
 8001804:	800b8a00 	call	800b8a0 <__eqdf2>
 8001808:	d8c13d17 	ldw	r3,1268(sp)
 800180c:	1000a726 	beq	r2,zero,8001aac <___vfprintf_internal_r+0x13c4>
 8001810:	d9013317 	ldw	r4,1228(sp)
 8001814:	d9413117 	ldw	r5,1220(sp)
 8001818:	84000044 	addi	r16,r16,1
 800181c:	20bfffc4 	addi	r2,r4,-1
 8001820:	1887883a 	add	r3,r3,r2
 8001824:	29000044 	addi	r4,r5,1
 8001828:	88800115 	stw	r2,4(r17)
 800182c:	89000015 	stw	r4,0(r17)
 8001830:	d8c12015 	stw	r3,1152(sp)
 8001834:	dc011f15 	stw	r16,1148(sp)
 8001838:	008001c4 	movi	r2,7
 800183c:	14012d16 	blt	r2,r16,8001cf4 <___vfprintf_internal_r+0x160c>
 8001840:	8c400204 	addi	r17,r17,8
 8001844:	d9413a17 	ldw	r5,1256(sp)
 8001848:	dcc122c4 	addi	r19,sp,1163
 800184c:	84000044 	addi	r16,r16,1
 8001850:	28c7883a 	add	r3,r5,r3
 8001854:	8cc00015 	stw	r19,0(r17)
 8001858:	89400115 	stw	r5,4(r17)
 800185c:	d8c12015 	stw	r3,1152(sp)
 8001860:	dc011f15 	stw	r16,1148(sp)
 8001864:	008001c4 	movi	r2,7
 8001868:	14000e16 	blt	r2,r16,80018a4 <___vfprintf_internal_r+0x11bc>
 800186c:	8a000204 	addi	r8,r17,8
 8001870:	003db006 	br	8000f34 <__alt_data_end+0xfc000f34>
 8001874:	01020074 	movhi	r4,2049
 8001878:	213da584 	addi	r4,r4,-2410
 800187c:	d9012c15 	stw	r4,1200(sp)
 8001880:	d9012c17 	ldw	r4,1200(sp)
 8001884:	1c07883a 	add	r3,r3,r16
 8001888:	44000115 	stw	r16,4(r8)
 800188c:	41000015 	stw	r4,0(r8)
 8001890:	10800044 	addi	r2,r2,1
 8001894:	d8c12015 	stw	r3,1152(sp)
 8001898:	d8811f15 	stw	r2,1148(sp)
 800189c:	010001c4 	movi	r4,7
 80018a0:	20bda30e 	bge	r4,r2,8000f30 <__alt_data_end+0xfc000f30>
 80018a4:	b809883a 	mov	r4,r23
 80018a8:	b00b883a 	mov	r5,r22
 80018ac:	d9811e04 	addi	r6,sp,1144
 80018b0:	8007b280 	call	8007b28 <__sprint_r>
 80018b4:	103ca41e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 80018b8:	d8c12017 	ldw	r3,1152(sp)
 80018bc:	da000404 	addi	r8,sp,16
 80018c0:	003d9c06 	br	8000f34 <__alt_data_end+0xfc000f34>
 80018c4:	b809883a 	mov	r4,r23
 80018c8:	b00b883a 	mov	r5,r22
 80018cc:	d9811e04 	addi	r6,sp,1144
 80018d0:	8007b280 	call	8007b28 <__sprint_r>
 80018d4:	103dd226 	beq	r2,zero,8001020 <__alt_data_end+0xfc001020>
 80018d8:	003c9b06 	br	8000b48 <__alt_data_end+0xfc000b48>
 80018dc:	10803fcc 	andi	r2,r2,255
 80018e0:	1000311e 	bne	r2,zero,80019a8 <___vfprintf_internal_r+0x12c0>
 80018e4:	e080004c 	andi	r2,fp,1
 80018e8:	10002f26 	beq	r2,zero,80019a8 <___vfprintf_internal_r+0x12c0>
 80018ec:	00800c04 	movi	r2,48
 80018f0:	d8c10dc4 	addi	r3,sp,1079
 80018f4:	d8810dc5 	stb	r2,1079(sp)
 80018f8:	dc413c17 	ldw	r17,1264(sp)
 80018fc:	d8c13115 	stw	r3,1220(sp)
 8001900:	003cf406 	br	8000cd4 <__alt_data_end+0xfc000cd4>
 8001904:	b809883a 	mov	r4,r23
 8001908:	b00b883a 	mov	r5,r22
 800190c:	d9811e04 	addi	r6,sp,1144
 8001910:	8007b280 	call	8007b28 <__sprint_r>
 8001914:	103c8c1e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 8001918:	d8c12017 	ldw	r3,1152(sp)
 800191c:	da000404 	addi	r8,sp,16
 8001920:	003d7706 	br	8000f00 <__alt_data_end+0xfc000f00>
 8001924:	b809883a 	mov	r4,r23
 8001928:	b00b883a 	mov	r5,r22
 800192c:	d9811e04 	addi	r6,sp,1144
 8001930:	8007b280 	call	8007b28 <__sprint_r>
 8001934:	103c841e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 8001938:	d8c12017 	ldw	r3,1152(sp)
 800193c:	da000404 	addi	r8,sp,16
 8001940:	003d3506 	br	8000e18 <__alt_data_end+0xfc000e18>
 8001944:	b809883a 	mov	r4,r23
 8001948:	b00b883a 	mov	r5,r22
 800194c:	d9811e04 	addi	r6,sp,1144
 8001950:	8007b280 	call	8007b28 <__sprint_r>
 8001954:	103c7c1e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 8001958:	d8c12017 	ldw	r3,1152(sp)
 800195c:	da000404 	addi	r8,sp,16
 8001960:	003d3b06 	br	8000e50 <__alt_data_end+0xfc000e50>
 8001964:	d9413b17 	ldw	r5,1260(sp)
 8001968:	d8c10e04 	addi	r3,sp,1080
 800196c:	908003cc 	andi	r2,r18,15
 8001970:	a808973a 	slli	r4,r21,28
 8001974:	2885883a 	add	r2,r5,r2
 8001978:	9024d13a 	srli	r18,r18,4
 800197c:	10800003 	ldbu	r2,0(r2)
 8001980:	a82ad13a 	srli	r21,r21,4
 8001984:	18ffffc4 	addi	r3,r3,-1
 8001988:	24a4b03a 	or	r18,r4,r18
 800198c:	18800005 	stb	r2,0(r3)
 8001990:	9544b03a 	or	r2,r18,r21
 8001994:	103ff51e 	bne	r2,zero,800196c <__alt_data_end+0xfc00196c>
 8001998:	d9412817 	ldw	r5,1184(sp)
 800199c:	d8c13115 	stw	r3,1220(sp)
 80019a0:	28e3c83a 	sub	r17,r5,r3
 80019a4:	003ccb06 	br	8000cd4 <__alt_data_end+0xfc000cd4>
 80019a8:	d8c10e04 	addi	r3,sp,1080
 80019ac:	0023883a 	mov	r17,zero
 80019b0:	d8c13115 	stw	r3,1220(sp)
 80019b4:	003cc706 	br	8000cd4 <__alt_data_end+0xfc000cd4>
 80019b8:	dc012617 	ldw	r16,1176(sp)
 80019bc:	0401ab0e 	bge	zero,r16,800206c <___vfprintf_internal_r+0x1984>
 80019c0:	d8813317 	ldw	r2,1228(sp)
 80019c4:	d9413117 	ldw	r5,1220(sp)
 80019c8:	d9013417 	ldw	r4,1232(sp)
 80019cc:	1023883a 	mov	r17,r2
 80019d0:	28a1883a 	add	r16,r5,r2
 80019d4:	2080010e 	bge	r4,r2,80019dc <___vfprintf_internal_r+0x12f4>
 80019d8:	2023883a 	mov	r17,r4
 80019dc:	04400b0e 	bge	zero,r17,8001a0c <___vfprintf_internal_r+0x1324>
 80019e0:	d8811f17 	ldw	r2,1148(sp)
 80019e4:	d9413117 	ldw	r5,1220(sp)
 80019e8:	1c47883a 	add	r3,r3,r17
 80019ec:	10800044 	addi	r2,r2,1
 80019f0:	41400015 	stw	r5,0(r8)
 80019f4:	44400115 	stw	r17,4(r8)
 80019f8:	d8c12015 	stw	r3,1152(sp)
 80019fc:	d8811f15 	stw	r2,1148(sp)
 8001a00:	010001c4 	movi	r4,7
 8001a04:	20826716 	blt	r4,r2,80023a4 <___vfprintf_internal_r+0x1cbc>
 8001a08:	42000204 	addi	r8,r8,8
 8001a0c:	88026316 	blt	r17,zero,800239c <___vfprintf_internal_r+0x1cb4>
 8001a10:	d8813417 	ldw	r2,1232(sp)
 8001a14:	1463c83a 	sub	r17,r2,r17
 8001a18:	0440590e 	bge	zero,r17,8001b80 <___vfprintf_internal_r+0x1498>
 8001a1c:	04c00404 	movi	r19,16
 8001a20:	d8811f17 	ldw	r2,1148(sp)
 8001a24:	9c41770e 	bge	r19,r17,8002004 <___vfprintf_internal_r+0x191c>
 8001a28:	01420074 	movhi	r5,2049
 8001a2c:	297da584 	addi	r5,r5,-2410
 8001a30:	d9412c15 	stw	r5,1200(sp)
 8001a34:	054001c4 	movi	r21,7
 8001a38:	00000306 	br	8001a48 <___vfprintf_internal_r+0x1360>
 8001a3c:	42000204 	addi	r8,r8,8
 8001a40:	8c7ffc04 	addi	r17,r17,-16
 8001a44:	9c41720e 	bge	r19,r17,8002010 <___vfprintf_internal_r+0x1928>
 8001a48:	18c00404 	addi	r3,r3,16
 8001a4c:	10800044 	addi	r2,r2,1
 8001a50:	45000015 	stw	r20,0(r8)
 8001a54:	44c00115 	stw	r19,4(r8)
 8001a58:	d8c12015 	stw	r3,1152(sp)
 8001a5c:	d8811f15 	stw	r2,1148(sp)
 8001a60:	a8bff60e 	bge	r21,r2,8001a3c <__alt_data_end+0xfc001a3c>
 8001a64:	b809883a 	mov	r4,r23
 8001a68:	b00b883a 	mov	r5,r22
 8001a6c:	d9811e04 	addi	r6,sp,1144
 8001a70:	8007b280 	call	8007b28 <__sprint_r>
 8001a74:	103c341e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 8001a78:	d8c12017 	ldw	r3,1152(sp)
 8001a7c:	d8811f17 	ldw	r2,1148(sp)
 8001a80:	da000404 	addi	r8,sp,16
 8001a84:	003fee06 	br	8001a40 <__alt_data_end+0xfc001a40>
 8001a88:	b809883a 	mov	r4,r23
 8001a8c:	b00b883a 	mov	r5,r22
 8001a90:	d9811e04 	addi	r6,sp,1144
 8001a94:	8007b280 	call	8007b28 <__sprint_r>
 8001a98:	103c2b1e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 8001a9c:	d8c12017 	ldw	r3,1152(sp)
 8001aa0:	d8812787 	ldb	r2,1182(sp)
 8001aa4:	da000404 	addi	r8,sp,16
 8001aa8:	003cce06 	br	8000de4 <__alt_data_end+0xfc000de4>
 8001aac:	d8813317 	ldw	r2,1228(sp)
 8001ab0:	14ffffc4 	addi	r19,r2,-1
 8001ab4:	04ff630e 	bge	zero,r19,8001844 <__alt_data_end+0xfc001844>
 8001ab8:	05400404 	movi	r21,16
 8001abc:	acc0810e 	bge	r21,r19,8001cc4 <___vfprintf_internal_r+0x15dc>
 8001ac0:	01420074 	movhi	r5,2049
 8001ac4:	297da584 	addi	r5,r5,-2410
 8001ac8:	d9412c15 	stw	r5,1200(sp)
 8001acc:	01c001c4 	movi	r7,7
 8001ad0:	00000306 	br	8001ae0 <___vfprintf_internal_r+0x13f8>
 8001ad4:	8c400204 	addi	r17,r17,8
 8001ad8:	9cfffc04 	addi	r19,r19,-16
 8001adc:	acc07c0e 	bge	r21,r19,8001cd0 <___vfprintf_internal_r+0x15e8>
 8001ae0:	18c00404 	addi	r3,r3,16
 8001ae4:	84000044 	addi	r16,r16,1
 8001ae8:	8d000015 	stw	r20,0(r17)
 8001aec:	8d400115 	stw	r21,4(r17)
 8001af0:	d8c12015 	stw	r3,1152(sp)
 8001af4:	dc011f15 	stw	r16,1148(sp)
 8001af8:	3c3ff60e 	bge	r7,r16,8001ad4 <__alt_data_end+0xfc001ad4>
 8001afc:	b809883a 	mov	r4,r23
 8001b00:	b00b883a 	mov	r5,r22
 8001b04:	d9811e04 	addi	r6,sp,1144
 8001b08:	d9c13d15 	stw	r7,1268(sp)
 8001b0c:	8007b280 	call	8007b28 <__sprint_r>
 8001b10:	d9c13d17 	ldw	r7,1268(sp)
 8001b14:	103c0c1e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 8001b18:	d8c12017 	ldw	r3,1152(sp)
 8001b1c:	dc011f17 	ldw	r16,1148(sp)
 8001b20:	dc400404 	addi	r17,sp,16
 8001b24:	003fec06 	br	8001ad8 <__alt_data_end+0xfc001ad8>
 8001b28:	00800084 	movi	r2,2
 8001b2c:	9546b03a 	or	r3,r18,r21
 8001b30:	003d7d06 	br	8001128 <__alt_data_end+0xfc001128>
 8001b34:	10803fcc 	andi	r2,r2,255
 8001b38:	1080201c 	xori	r2,r2,128
 8001b3c:	10bfe004 	addi	r2,r2,-128
 8001b40:	01000c04 	movi	r4,48
 8001b44:	1101d726 	beq	r2,r4,80022a4 <___vfprintf_internal_r+0x1bbc>
 8001b48:	d9413117 	ldw	r5,1220(sp)
 8001b4c:	d8812817 	ldw	r2,1184(sp)
 8001b50:	193fffc5 	stb	r4,-1(r3)
 8001b54:	297fffc4 	addi	r5,r5,-1
 8001b58:	d9413115 	stw	r5,1220(sp)
 8001b5c:	1163c83a 	sub	r17,r2,r5
 8001b60:	003c5c06 	br	8000cd4 <__alt_data_end+0xfc000cd4>
 8001b64:	b809883a 	mov	r4,r23
 8001b68:	b00b883a 	mov	r5,r22
 8001b6c:	d9811e04 	addi	r6,sp,1144
 8001b70:	8007b280 	call	8007b28 <__sprint_r>
 8001b74:	103bf41e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 8001b78:	d8c12017 	ldw	r3,1152(sp)
 8001b7c:	da000404 	addi	r8,sp,16
 8001b80:	d9413117 	ldw	r5,1220(sp)
 8001b84:	d9013417 	ldw	r4,1232(sp)
 8001b88:	d8812617 	ldw	r2,1176(sp)
 8001b8c:	2923883a 	add	r17,r5,r4
 8001b90:	d9413317 	ldw	r5,1228(sp)
 8001b94:	11400216 	blt	r2,r5,8001ba0 <___vfprintf_internal_r+0x14b8>
 8001b98:	e100004c 	andi	r4,fp,1
 8001b9c:	20000d26 	beq	r4,zero,8001bd4 <___vfprintf_internal_r+0x14ec>
 8001ba0:	d9013817 	ldw	r4,1248(sp)
 8001ba4:	d9413517 	ldw	r5,1236(sp)
 8001ba8:	1907883a 	add	r3,r3,r4
 8001bac:	d9011f17 	ldw	r4,1148(sp)
 8001bb0:	41400015 	stw	r5,0(r8)
 8001bb4:	d9413817 	ldw	r5,1248(sp)
 8001bb8:	21000044 	addi	r4,r4,1
 8001bbc:	d8c12015 	stw	r3,1152(sp)
 8001bc0:	41400115 	stw	r5,4(r8)
 8001bc4:	d9011f15 	stw	r4,1148(sp)
 8001bc8:	014001c4 	movi	r5,7
 8001bcc:	2901fd16 	blt	r5,r4,80023c4 <___vfprintf_internal_r+0x1cdc>
 8001bd0:	42000204 	addi	r8,r8,8
 8001bd4:	d9013317 	ldw	r4,1228(sp)
 8001bd8:	2085c83a 	sub	r2,r4,r2
 8001bdc:	8449c83a 	sub	r4,r16,r17
 8001be0:	1021883a 	mov	r16,r2
 8001be4:	2080010e 	bge	r4,r2,8001bec <___vfprintf_internal_r+0x1504>
 8001be8:	2021883a 	mov	r16,r4
 8001bec:	04000a0e 	bge	zero,r16,8001c18 <___vfprintf_internal_r+0x1530>
 8001bf0:	d9011f17 	ldw	r4,1148(sp)
 8001bf4:	1c07883a 	add	r3,r3,r16
 8001bf8:	44400015 	stw	r17,0(r8)
 8001bfc:	21000044 	addi	r4,r4,1
 8001c00:	44000115 	stw	r16,4(r8)
 8001c04:	d8c12015 	stw	r3,1152(sp)
 8001c08:	d9011f15 	stw	r4,1148(sp)
 8001c0c:	014001c4 	movi	r5,7
 8001c10:	29020916 	blt	r5,r4,8002438 <___vfprintf_internal_r+0x1d50>
 8001c14:	42000204 	addi	r8,r8,8
 8001c18:	80020116 	blt	r16,zero,8002420 <___vfprintf_internal_r+0x1d38>
 8001c1c:	1421c83a 	sub	r16,r2,r16
 8001c20:	043cc40e 	bge	zero,r16,8000f34 <__alt_data_end+0xfc000f34>
 8001c24:	04400404 	movi	r17,16
 8001c28:	d8811f17 	ldw	r2,1148(sp)
 8001c2c:	8c3f110e 	bge	r17,r16,8001874 <__alt_data_end+0xfc001874>
 8001c30:	01420074 	movhi	r5,2049
 8001c34:	297da584 	addi	r5,r5,-2410
 8001c38:	d9412c15 	stw	r5,1200(sp)
 8001c3c:	04c001c4 	movi	r19,7
 8001c40:	00000306 	br	8001c50 <___vfprintf_internal_r+0x1568>
 8001c44:	42000204 	addi	r8,r8,8
 8001c48:	843ffc04 	addi	r16,r16,-16
 8001c4c:	8c3f0c0e 	bge	r17,r16,8001880 <__alt_data_end+0xfc001880>
 8001c50:	18c00404 	addi	r3,r3,16
 8001c54:	10800044 	addi	r2,r2,1
 8001c58:	45000015 	stw	r20,0(r8)
 8001c5c:	44400115 	stw	r17,4(r8)
 8001c60:	d8c12015 	stw	r3,1152(sp)
 8001c64:	d8811f15 	stw	r2,1148(sp)
 8001c68:	98bff60e 	bge	r19,r2,8001c44 <__alt_data_end+0xfc001c44>
 8001c6c:	b809883a 	mov	r4,r23
 8001c70:	b00b883a 	mov	r5,r22
 8001c74:	d9811e04 	addi	r6,sp,1144
 8001c78:	8007b280 	call	8007b28 <__sprint_r>
 8001c7c:	103bb21e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 8001c80:	d8c12017 	ldw	r3,1152(sp)
 8001c84:	d8811f17 	ldw	r2,1148(sp)
 8001c88:	da000404 	addi	r8,sp,16
 8001c8c:	003fee06 	br	8001c48 <__alt_data_end+0xfc001c48>
 8001c90:	e088703a 	and	r4,fp,r2
 8001c94:	203ec01e 	bne	r4,zero,8001798 <__alt_data_end+0xfc001798>
 8001c98:	dc011f17 	ldw	r16,1148(sp)
 8001c9c:	d9013117 	ldw	r4,1220(sp)
 8001ca0:	40800115 	stw	r2,4(r8)
 8001ca4:	84000044 	addi	r16,r16,1
 8001ca8:	41000015 	stw	r4,0(r8)
 8001cac:	d8c12015 	stw	r3,1152(sp)
 8001cb0:	dc011f15 	stw	r16,1148(sp)
 8001cb4:	008001c4 	movi	r2,7
 8001cb8:	14000e16 	blt	r2,r16,8001cf4 <___vfprintf_internal_r+0x160c>
 8001cbc:	44400204 	addi	r17,r8,8
 8001cc0:	003ee006 	br	8001844 <__alt_data_end+0xfc001844>
 8001cc4:	01020074 	movhi	r4,2049
 8001cc8:	213da584 	addi	r4,r4,-2410
 8001ccc:	d9012c15 	stw	r4,1200(sp)
 8001cd0:	d8812c17 	ldw	r2,1200(sp)
 8001cd4:	1cc7883a 	add	r3,r3,r19
 8001cd8:	84000044 	addi	r16,r16,1
 8001cdc:	88800015 	stw	r2,0(r17)
 8001ce0:	8cc00115 	stw	r19,4(r17)
 8001ce4:	d8c12015 	stw	r3,1152(sp)
 8001ce8:	dc011f15 	stw	r16,1148(sp)
 8001cec:	008001c4 	movi	r2,7
 8001cf0:	143ed30e 	bge	r2,r16,8001840 <__alt_data_end+0xfc001840>
 8001cf4:	b809883a 	mov	r4,r23
 8001cf8:	b00b883a 	mov	r5,r22
 8001cfc:	d9811e04 	addi	r6,sp,1144
 8001d00:	8007b280 	call	8007b28 <__sprint_r>
 8001d04:	103b901e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 8001d08:	d8c12017 	ldw	r3,1152(sp)
 8001d0c:	dc011f17 	ldw	r16,1148(sp)
 8001d10:	dc400404 	addi	r17,sp,16
 8001d14:	003ecb06 	br	8001844 <__alt_data_end+0xfc001844>
 8001d18:	b809883a 	mov	r4,r23
 8001d1c:	b00b883a 	mov	r5,r22
 8001d20:	d9811e04 	addi	r6,sp,1144
 8001d24:	8007b280 	call	8007b28 <__sprint_r>
 8001d28:	103b871e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 8001d2c:	d8c12017 	ldw	r3,1152(sp)
 8001d30:	dc011f17 	ldw	r16,1148(sp)
 8001d34:	da000404 	addi	r8,sp,16
 8001d38:	003ea206 	br	80017c4 <__alt_data_end+0xfc0017c4>
 8001d3c:	b809883a 	mov	r4,r23
 8001d40:	b00b883a 	mov	r5,r22
 8001d44:	d9811e04 	addi	r6,sp,1144
 8001d48:	8007b280 	call	8007b28 <__sprint_r>
 8001d4c:	103b7e1e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 8001d50:	d8c12017 	ldw	r3,1152(sp)
 8001d54:	dc011f17 	ldw	r16,1148(sp)
 8001d58:	dc400404 	addi	r17,sp,16
 8001d5c:	003ea406 	br	80017f0 <__alt_data_end+0xfc0017f0>
 8001d60:	b809883a 	mov	r4,r23
 8001d64:	b00b883a 	mov	r5,r22
 8001d68:	d9811e04 	addi	r6,sp,1144
 8001d6c:	8007b280 	call	8007b28 <__sprint_r>
 8001d70:	103b751e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 8001d74:	d8c12017 	ldw	r3,1152(sp)
 8001d78:	da000404 	addi	r8,sp,16
 8001d7c:	003c3706 	br	8000e5c <__alt_data_end+0xfc000e5c>
 8001d80:	04a5c83a 	sub	r18,zero,r18
 8001d84:	9004c03a 	cmpne	r2,r18,zero
 8001d88:	056bc83a 	sub	r21,zero,r21
 8001d8c:	a8abc83a 	sub	r21,r21,r2
 8001d90:	04c00b44 	movi	r19,45
 8001d94:	dcc12785 	stb	r19,1182(sp)
 8001d98:	da413215 	stw	r9,1224(sp)
 8001d9c:	00800044 	movi	r2,1
 8001da0:	9546b03a 	or	r3,r18,r21
 8001da4:	003bb106 	br	8000c6c <__alt_data_end+0xfc000c6c>
 8001da8:	da013f15 	stw	r8,1276(sp)
 8001dac:	da413e15 	stw	r9,1272(sp)
 8001db0:	80077840 	call	8007784 <__fpclassifyd>
 8001db4:	da013f17 	ldw	r8,1276(sp)
 8001db8:	da413e17 	ldw	r9,1272(sp)
 8001dbc:	1000e526 	beq	r2,zero,8002154 <___vfprintf_internal_r+0x1a6c>
 8001dc0:	04fff7c4 	movi	r19,-33
 8001dc4:	00bfffc4 	movi	r2,-1
 8001dc8:	84e6703a 	and	r19,r16,r19
 8001dcc:	48822926 	beq	r9,r2,8002674 <___vfprintf_internal_r+0x1f8c>
 8001dd0:	008011c4 	movi	r2,71
 8001dd4:	98821626 	beq	r19,r2,8002630 <___vfprintf_internal_r+0x1f48>
 8001dd8:	d9013917 	ldw	r4,1252(sp)
 8001ddc:	e0c04014 	ori	r3,fp,256
 8001de0:	d8c12d15 	stw	r3,1204(sp)
 8001de4:	20021f16 	blt	r4,zero,8002664 <___vfprintf_internal_r+0x1f7c>
 8001de8:	dc413917 	ldw	r17,1252(sp)
 8001dec:	d8012b05 	stb	zero,1196(sp)
 8001df0:	00801984 	movi	r2,102
 8001df4:	80814d26 	beq	r16,r2,800232c <___vfprintf_internal_r+0x1c44>
 8001df8:	00801184 	movi	r2,70
 8001dfc:	80814b26 	beq	r16,r2,800232c <___vfprintf_internal_r+0x1c44>
 8001e00:	00801144 	movi	r2,69
 8001e04:	98821d26 	beq	r19,r2,800267c <___vfprintf_internal_r+0x1f94>
 8001e08:	482b883a 	mov	r21,r9
 8001e0c:	d8812604 	addi	r2,sp,1176
 8001e10:	d8800115 	stw	r2,4(sp)
 8001e14:	d9413717 	ldw	r5,1244(sp)
 8001e18:	d8812504 	addi	r2,sp,1172
 8001e1c:	d8800215 	stw	r2,8(sp)
 8001e20:	d8812104 	addi	r2,sp,1156
 8001e24:	dd400015 	stw	r21,0(sp)
 8001e28:	d8800315 	stw	r2,12(sp)
 8001e2c:	b809883a 	mov	r4,r23
 8001e30:	880d883a 	mov	r6,r17
 8001e34:	01c00084 	movi	r7,2
 8001e38:	da013f15 	stw	r8,1276(sp)
 8001e3c:	da413e15 	stw	r9,1272(sp)
 8001e40:	8002b600 	call	8002b60 <_dtoa_r>
 8001e44:	d8813115 	stw	r2,1220(sp)
 8001e48:	008019c4 	movi	r2,103
 8001e4c:	da013f17 	ldw	r8,1276(sp)
 8001e50:	da413e17 	ldw	r9,1272(sp)
 8001e54:	80800226 	beq	r16,r2,8001e60 <___vfprintf_internal_r+0x1778>
 8001e58:	008011c4 	movi	r2,71
 8001e5c:	8081451e 	bne	r16,r2,8002374 <___vfprintf_internal_r+0x1c8c>
 8001e60:	e080004c 	andi	r2,fp,1
 8001e64:	10021e26 	beq	r2,zero,80026e0 <___vfprintf_internal_r+0x1ff8>
 8001e68:	d8c13117 	ldw	r3,1220(sp)
 8001e6c:	1d55883a 	add	r10,r3,r21
 8001e70:	d9013717 	ldw	r4,1244(sp)
 8001e74:	880b883a 	mov	r5,r17
 8001e78:	000d883a 	mov	r6,zero
 8001e7c:	000f883a 	mov	r7,zero
 8001e80:	da013f15 	stw	r8,1276(sp)
 8001e84:	da413e15 	stw	r9,1272(sp)
 8001e88:	da813d15 	stw	r10,1268(sp)
 8001e8c:	800b8a00 	call	800b8a0 <__eqdf2>
 8001e90:	da013f17 	ldw	r8,1276(sp)
 8001e94:	da413e17 	ldw	r9,1272(sp)
 8001e98:	da813d17 	ldw	r10,1268(sp)
 8001e9c:	1001a126 	beq	r2,zero,8002524 <___vfprintf_internal_r+0x1e3c>
 8001ea0:	d8812117 	ldw	r2,1156(sp)
 8001ea4:	1280062e 	bgeu	r2,r10,8001ec0 <___vfprintf_internal_r+0x17d8>
 8001ea8:	01000c04 	movi	r4,48
 8001eac:	10c00044 	addi	r3,r2,1
 8001eb0:	d8c12115 	stw	r3,1156(sp)
 8001eb4:	11000005 	stb	r4,0(r2)
 8001eb8:	d8812117 	ldw	r2,1156(sp)
 8001ebc:	12bffb36 	bltu	r2,r10,8001eac <__alt_data_end+0xfc001eac>
 8001ec0:	d8c13117 	ldw	r3,1220(sp)
 8001ec4:	10c5c83a 	sub	r2,r2,r3
 8001ec8:	d8813315 	stw	r2,1228(sp)
 8001ecc:	008011c4 	movi	r2,71
 8001ed0:	98818926 	beq	r19,r2,80024f8 <___vfprintf_internal_r+0x1e10>
 8001ed4:	00801944 	movi	r2,101
 8001ed8:	14023c0e 	bge	r2,r16,80027cc <___vfprintf_internal_r+0x20e4>
 8001edc:	d8c12617 	ldw	r3,1176(sp)
 8001ee0:	00801984 	movi	r2,102
 8001ee4:	d8c13415 	stw	r3,1232(sp)
 8001ee8:	8081ef26 	beq	r16,r2,80026a8 <___vfprintf_internal_r+0x1fc0>
 8001eec:	d8c13417 	ldw	r3,1232(sp)
 8001ef0:	d9013317 	ldw	r4,1228(sp)
 8001ef4:	1901e316 	blt	r3,r4,8002684 <___vfprintf_internal_r+0x1f9c>
 8001ef8:	e080004c 	andi	r2,fp,1
 8001efc:	1001f426 	beq	r2,zero,80026d0 <___vfprintf_internal_r+0x1fe8>
 8001f00:	d8c13417 	ldw	r3,1232(sp)
 8001f04:	1c400044 	addi	r17,r3,1
 8001f08:	8839883a 	mov	fp,r17
 8001f0c:	8801e416 	blt	r17,zero,80026a0 <___vfprintf_internal_r+0x1fb8>
 8001f10:	dd412b07 	ldb	r21,1196(sp)
 8001f14:	a801701e 	bne	r21,zero,80024d8 <___vfprintf_internal_r+0x1df0>
 8001f18:	df012b15 	stw	fp,1196(sp)
 8001f1c:	dcc12783 	ldbu	r19,1182(sp)
 8001f20:	df012d17 	ldw	fp,1204(sp)
 8001f24:	d8013215 	stw	zero,1224(sp)
 8001f28:	dc812d15 	stw	r18,1204(sp)
 8001f2c:	003b6e06 	br	8000ce8 <__alt_data_end+0xfc000ce8>
 8001f30:	e080040c 	andi	r2,fp,16
 8001f34:	1000b51e 	bne	r2,zero,800220c <___vfprintf_internal_r+0x1b24>
 8001f38:	e080100c 	andi	r2,fp,64
 8001f3c:	10015b26 	beq	r2,zero,80024ac <___vfprintf_internal_r+0x1dc4>
 8001f40:	d9012d17 	ldw	r4,1204(sp)
 8001f44:	d9412f17 	ldw	r5,1212(sp)
 8001f48:	20800017 	ldw	r2,0(r4)
 8001f4c:	21000104 	addi	r4,r4,4
 8001f50:	d9012d15 	stw	r4,1204(sp)
 8001f54:	1140000d 	sth	r5,0(r2)
 8001f58:	003a2006 	br	80007dc <__alt_data_end+0xfc0007dc>
 8001f5c:	e0c0100c 	andi	r3,fp,64
 8001f60:	1800a226 	beq	r3,zero,80021ec <___vfprintf_internal_r+0x1b04>
 8001f64:	d8c12d17 	ldw	r3,1204(sp)
 8001f68:	1480000b 	ldhu	r18,0(r2)
 8001f6c:	002b883a 	mov	r21,zero
 8001f70:	18c00104 	addi	r3,r3,4
 8001f74:	d8c12d15 	stw	r3,1204(sp)
 8001f78:	0005883a 	mov	r2,zero
 8001f7c:	9007883a 	mov	r3,r18
 8001f80:	003c6906 	br	8001128 <__alt_data_end+0xfc001128>
 8001f84:	e0c0100c 	andi	r3,fp,64
 8001f88:	18009026 	beq	r3,zero,80021cc <___vfprintf_internal_r+0x1ae4>
 8001f8c:	1480000b 	ldhu	r18,0(r2)
 8001f90:	d8812d17 	ldw	r2,1204(sp)
 8001f94:	002b883a 	mov	r21,zero
 8001f98:	9007883a 	mov	r3,r18
 8001f9c:	10800104 	addi	r2,r2,4
 8001fa0:	d8812d15 	stw	r2,1204(sp)
 8001fa4:	00800044 	movi	r2,1
 8001fa8:	003c5f06 	br	8001128 <__alt_data_end+0xfc001128>
 8001fac:	e0c0100c 	andi	r3,fp,64
 8001fb0:	18008026 	beq	r3,zero,80021b4 <___vfprintf_internal_r+0x1acc>
 8001fb4:	d9012d17 	ldw	r4,1204(sp)
 8001fb8:	1480000b 	ldhu	r18,0(r2)
 8001fbc:	002b883a 	mov	r21,zero
 8001fc0:	21000104 	addi	r4,r4,4
 8001fc4:	d9012d15 	stw	r4,1204(sp)
 8001fc8:	003c7906 	br	80011b0 <__alt_data_end+0xfc0011b0>
 8001fcc:	e080100c 	andi	r2,fp,64
 8001fd0:	10007126 	beq	r2,zero,8002198 <___vfprintf_internal_r+0x1ab0>
 8001fd4:	1c80000f 	ldh	r18,0(r3)
 8001fd8:	d8812d17 	ldw	r2,1204(sp)
 8001fdc:	902bd7fa 	srai	r21,r18,31
 8001fe0:	10800104 	addi	r2,r2,4
 8001fe4:	d8812d15 	stw	r2,1204(sp)
 8001fe8:	a805883a 	mov	r2,r21
 8001fec:	003b1a06 	br	8000c58 <__alt_data_end+0xfc000c58>
 8001ff0:	e4000007 	ldb	r16,0(fp)
 8001ff4:	e005883a 	mov	r2,fp
 8001ff8:	003a2306 	br	8000888 <__alt_data_end+0xfc000888>
 8001ffc:	00800084 	movi	r2,2
 8002000:	003c4906 	br	8001128 <__alt_data_end+0xfc001128>
 8002004:	01020074 	movhi	r4,2049
 8002008:	213da584 	addi	r4,r4,-2410
 800200c:	d9012c15 	stw	r4,1200(sp)
 8002010:	d9012c17 	ldw	r4,1200(sp)
 8002014:	1c47883a 	add	r3,r3,r17
 8002018:	10800044 	addi	r2,r2,1
 800201c:	41000015 	stw	r4,0(r8)
 8002020:	44400115 	stw	r17,4(r8)
 8002024:	d8c12015 	stw	r3,1152(sp)
 8002028:	d8811f15 	stw	r2,1148(sp)
 800202c:	010001c4 	movi	r4,7
 8002030:	20becc16 	blt	r4,r2,8001b64 <__alt_data_end+0xfc001b64>
 8002034:	42000204 	addi	r8,r8,8
 8002038:	003ed106 	br	8001b80 <__alt_data_end+0xfc001b80>
 800203c:	01020074 	movhi	r4,2049
 8002040:	213da584 	addi	r4,r4,-2410
 8002044:	d9012c15 	stw	r4,1200(sp)
 8002048:	003ba306 	br	8000ed8 <__alt_data_end+0xfc000ed8>
 800204c:	b809883a 	mov	r4,r23
 8002050:	b00b883a 	mov	r5,r22
 8002054:	d9811e04 	addi	r6,sp,1144
 8002058:	8007b280 	call	8007b28 <__sprint_r>
 800205c:	103aba1e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 8002060:	d8c12017 	ldw	r3,1152(sp)
 8002064:	da000404 	addi	r8,sp,16
 8002068:	003d6c06 	br	800161c <__alt_data_end+0xfc00161c>
 800206c:	d8811f17 	ldw	r2,1148(sp)
 8002070:	01420074 	movhi	r5,2049
 8002074:	01000044 	movi	r4,1
 8002078:	18c00044 	addi	r3,r3,1
 800207c:	10800044 	addi	r2,r2,1
 8002080:	297da504 	addi	r5,r5,-2412
 8002084:	41000115 	stw	r4,4(r8)
 8002088:	41400015 	stw	r5,0(r8)
 800208c:	d8c12015 	stw	r3,1152(sp)
 8002090:	d8811f15 	stw	r2,1148(sp)
 8002094:	010001c4 	movi	r4,7
 8002098:	20806716 	blt	r4,r2,8002238 <___vfprintf_internal_r+0x1b50>
 800209c:	42000204 	addi	r8,r8,8
 80020a0:	8000041e 	bne	r16,zero,80020b4 <___vfprintf_internal_r+0x19cc>
 80020a4:	d8813317 	ldw	r2,1228(sp)
 80020a8:	1000021e 	bne	r2,zero,80020b4 <___vfprintf_internal_r+0x19cc>
 80020ac:	e080004c 	andi	r2,fp,1
 80020b0:	103ba026 	beq	r2,zero,8000f34 <__alt_data_end+0xfc000f34>
 80020b4:	d9013817 	ldw	r4,1248(sp)
 80020b8:	d8811f17 	ldw	r2,1148(sp)
 80020bc:	d9413517 	ldw	r5,1236(sp)
 80020c0:	1907883a 	add	r3,r3,r4
 80020c4:	10800044 	addi	r2,r2,1
 80020c8:	41000115 	stw	r4,4(r8)
 80020cc:	41400015 	stw	r5,0(r8)
 80020d0:	d8c12015 	stw	r3,1152(sp)
 80020d4:	d8811f15 	stw	r2,1148(sp)
 80020d8:	010001c4 	movi	r4,7
 80020dc:	20815716 	blt	r4,r2,800263c <___vfprintf_internal_r+0x1f54>
 80020e0:	42000204 	addi	r8,r8,8
 80020e4:	0421c83a 	sub	r16,zero,r16
 80020e8:	0400810e 	bge	zero,r16,80022f0 <___vfprintf_internal_r+0x1c08>
 80020ec:	04400404 	movi	r17,16
 80020f0:	8c00bd0e 	bge	r17,r16,80023e8 <___vfprintf_internal_r+0x1d00>
 80020f4:	01420074 	movhi	r5,2049
 80020f8:	297da584 	addi	r5,r5,-2410
 80020fc:	d9412c15 	stw	r5,1200(sp)
 8002100:	04c001c4 	movi	r19,7
 8002104:	00000306 	br	8002114 <___vfprintf_internal_r+0x1a2c>
 8002108:	42000204 	addi	r8,r8,8
 800210c:	843ffc04 	addi	r16,r16,-16
 8002110:	8c00b80e 	bge	r17,r16,80023f4 <___vfprintf_internal_r+0x1d0c>
 8002114:	18c00404 	addi	r3,r3,16
 8002118:	10800044 	addi	r2,r2,1
 800211c:	45000015 	stw	r20,0(r8)
 8002120:	44400115 	stw	r17,4(r8)
 8002124:	d8c12015 	stw	r3,1152(sp)
 8002128:	d8811f15 	stw	r2,1148(sp)
 800212c:	98bff60e 	bge	r19,r2,8002108 <__alt_data_end+0xfc002108>
 8002130:	b809883a 	mov	r4,r23
 8002134:	b00b883a 	mov	r5,r22
 8002138:	d9811e04 	addi	r6,sp,1144
 800213c:	8007b280 	call	8007b28 <__sprint_r>
 8002140:	103a811e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 8002144:	d8c12017 	ldw	r3,1152(sp)
 8002148:	d8811f17 	ldw	r2,1148(sp)
 800214c:	da000404 	addi	r8,sp,16
 8002150:	003fee06 	br	800210c <__alt_data_end+0xfc00210c>
 8002154:	008011c4 	movi	r2,71
 8002158:	1400db16 	blt	r2,r16,80024c8 <___vfprintf_internal_r+0x1de0>
 800215c:	01020074 	movhi	r4,2049
 8002160:	213d9704 	addi	r4,r4,-2468
 8002164:	d9013115 	stw	r4,1220(sp)
 8002168:	00c000c4 	movi	r3,3
 800216c:	00bfdfc4 	movi	r2,-129
 8002170:	d8c12b15 	stw	r3,1196(sp)
 8002174:	e0b8703a 	and	fp,fp,r2
 8002178:	dcc12783 	ldbu	r19,1182(sp)
 800217c:	dc812d15 	stw	r18,1204(sp)
 8002180:	1823883a 	mov	r17,r3
 8002184:	d8013215 	stw	zero,1224(sp)
 8002188:	d8013415 	stw	zero,1232(sp)
 800218c:	003ad606 	br	8000ce8 <__alt_data_end+0xfc000ce8>
 8002190:	4823883a 	mov	r17,r9
 8002194:	003cc906 	br	80014bc <__alt_data_end+0xfc0014bc>
 8002198:	1c800017 	ldw	r18,0(r3)
 800219c:	d8c12d17 	ldw	r3,1204(sp)
 80021a0:	902bd7fa 	srai	r21,r18,31
 80021a4:	18c00104 	addi	r3,r3,4
 80021a8:	d8c12d15 	stw	r3,1204(sp)
 80021ac:	a805883a 	mov	r2,r21
 80021b0:	003aa906 	br	8000c58 <__alt_data_end+0xfc000c58>
 80021b4:	d9412d17 	ldw	r5,1204(sp)
 80021b8:	14800017 	ldw	r18,0(r2)
 80021bc:	002b883a 	mov	r21,zero
 80021c0:	29400104 	addi	r5,r5,4
 80021c4:	d9412d15 	stw	r5,1204(sp)
 80021c8:	003bf906 	br	80011b0 <__alt_data_end+0xfc0011b0>
 80021cc:	d8c12d17 	ldw	r3,1204(sp)
 80021d0:	14800017 	ldw	r18,0(r2)
 80021d4:	002b883a 	mov	r21,zero
 80021d8:	18c00104 	addi	r3,r3,4
 80021dc:	d8c12d15 	stw	r3,1204(sp)
 80021e0:	00800044 	movi	r2,1
 80021e4:	9007883a 	mov	r3,r18
 80021e8:	003bcf06 	br	8001128 <__alt_data_end+0xfc001128>
 80021ec:	d9012d17 	ldw	r4,1204(sp)
 80021f0:	14800017 	ldw	r18,0(r2)
 80021f4:	002b883a 	mov	r21,zero
 80021f8:	21000104 	addi	r4,r4,4
 80021fc:	d9012d15 	stw	r4,1204(sp)
 8002200:	0005883a 	mov	r2,zero
 8002204:	9007883a 	mov	r3,r18
 8002208:	003bc706 	br	8001128 <__alt_data_end+0xfc001128>
 800220c:	d9412d17 	ldw	r5,1204(sp)
 8002210:	d8c12f17 	ldw	r3,1212(sp)
 8002214:	28800017 	ldw	r2,0(r5)
 8002218:	29400104 	addi	r5,r5,4
 800221c:	d9412d15 	stw	r5,1204(sp)
 8002220:	10c00015 	stw	r3,0(r2)
 8002224:	00396d06 	br	80007dc <__alt_data_end+0xfc0007dc>
 8002228:	01020074 	movhi	r4,2049
 800222c:	213d9504 	addi	r4,r4,-2476
 8002230:	d9013115 	stw	r4,1220(sp)
 8002234:	003ba206 	br	80010c0 <__alt_data_end+0xfc0010c0>
 8002238:	b809883a 	mov	r4,r23
 800223c:	b00b883a 	mov	r5,r22
 8002240:	d9811e04 	addi	r6,sp,1144
 8002244:	8007b280 	call	8007b28 <__sprint_r>
 8002248:	103a3f1e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 800224c:	dc012617 	ldw	r16,1176(sp)
 8002250:	d8c12017 	ldw	r3,1152(sp)
 8002254:	da000404 	addi	r8,sp,16
 8002258:	003f9106 	br	80020a0 <__alt_data_end+0xfc0020a0>
 800225c:	e0800044 	addi	r2,fp,1
 8002260:	9cc00814 	ori	r19,r19,32
 8002264:	e4000047 	ldb	r16,1(fp)
 8002268:	00398706 	br	8000888 <__alt_data_end+0xfc000888>
 800226c:	d8812e17 	ldw	r2,1208(sp)
 8002270:	d8c12d15 	stw	r3,1204(sp)
 8002274:	0085c83a 	sub	r2,zero,r2
 8002278:	d8812e15 	stw	r2,1208(sp)
 800227c:	e005883a 	mov	r2,fp
 8002280:	003a3a06 	br	8000b6c <__alt_data_end+0xfc000b6c>
 8002284:	b809883a 	mov	r4,r23
 8002288:	b00b883a 	mov	r5,r22
 800228c:	d9811e04 	addi	r6,sp,1144
 8002290:	8007b280 	call	8007b28 <__sprint_r>
 8002294:	103a2c1e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 8002298:	d8c12017 	ldw	r3,1152(sp)
 800229c:	da000404 	addi	r8,sp,16
 80022a0:	003cf006 	br	8001664 <__alt_data_end+0xfc001664>
 80022a4:	d8c12817 	ldw	r3,1184(sp)
 80022a8:	d9013117 	ldw	r4,1220(sp)
 80022ac:	1923c83a 	sub	r17,r3,r4
 80022b0:	003a8806 	br	8000cd4 <__alt_data_end+0xfc000cd4>
 80022b4:	da013f15 	stw	r8,1276(sp)
 80022b8:	80006500 	call	8000650 <strlen>
 80022bc:	1023883a 	mov	r17,r2
 80022c0:	da013f17 	ldw	r8,1276(sp)
 80022c4:	883c7f0e 	bge	r17,zero,80014c4 <__alt_data_end+0xfc0014c4>
 80022c8:	0005883a 	mov	r2,zero
 80022cc:	003c7d06 	br	80014c4 <__alt_data_end+0xfc0014c4>
 80022d0:	b809883a 	mov	r4,r23
 80022d4:	b00b883a 	mov	r5,r22
 80022d8:	d9811e04 	addi	r6,sp,1144
 80022dc:	8007b280 	call	8007b28 <__sprint_r>
 80022e0:	103a191e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 80022e4:	d8c12017 	ldw	r3,1152(sp)
 80022e8:	d8811f17 	ldw	r2,1148(sp)
 80022ec:	da000404 	addi	r8,sp,16
 80022f0:	d9413317 	ldw	r5,1228(sp)
 80022f4:	d9013117 	ldw	r4,1220(sp)
 80022f8:	10800044 	addi	r2,r2,1
 80022fc:	28c7883a 	add	r3,r5,r3
 8002300:	41000015 	stw	r4,0(r8)
 8002304:	41400115 	stw	r5,4(r8)
 8002308:	d8c12015 	stw	r3,1152(sp)
 800230c:	d8811f15 	stw	r2,1148(sp)
 8002310:	010001c4 	movi	r4,7
 8002314:	20bb060e 	bge	r4,r2,8000f30 <__alt_data_end+0xfc000f30>
 8002318:	003d6206 	br	80018a4 <__alt_data_end+0xfc0018a4>
 800231c:	01020074 	movhi	r4,2049
 8002320:	213da984 	addi	r4,r4,-2394
 8002324:	d9013615 	stw	r4,1240(sp)
 8002328:	003aa306 	br	8000db8 <__alt_data_end+0xfc000db8>
 800232c:	d8812604 	addi	r2,sp,1176
 8002330:	d8800115 	stw	r2,4(sp)
 8002334:	d9413717 	ldw	r5,1244(sp)
 8002338:	d8812504 	addi	r2,sp,1172
 800233c:	d8800215 	stw	r2,8(sp)
 8002340:	d8812104 	addi	r2,sp,1156
 8002344:	da400015 	stw	r9,0(sp)
 8002348:	d8800315 	stw	r2,12(sp)
 800234c:	b809883a 	mov	r4,r23
 8002350:	880d883a 	mov	r6,r17
 8002354:	01c000c4 	movi	r7,3
 8002358:	da013f15 	stw	r8,1276(sp)
 800235c:	da413e15 	stw	r9,1272(sp)
 8002360:	8002b600 	call	8002b60 <_dtoa_r>
 8002364:	da413e17 	ldw	r9,1272(sp)
 8002368:	da013f17 	ldw	r8,1276(sp)
 800236c:	d8813115 	stw	r2,1220(sp)
 8002370:	482b883a 	mov	r21,r9
 8002374:	d8c13117 	ldw	r3,1220(sp)
 8002378:	00801184 	movi	r2,70
 800237c:	1d55883a 	add	r10,r3,r21
 8002380:	98bebb1e 	bne	r19,r2,8001e70 <__alt_data_end+0xfc001e70>
 8002384:	19000007 	ldb	r4,0(r3)
 8002388:	00800c04 	movi	r2,48
 800238c:	2080dd26 	beq	r4,r2,8002704 <___vfprintf_internal_r+0x201c>
 8002390:	d8c12617 	ldw	r3,1176(sp)
 8002394:	50d5883a 	add	r10,r10,r3
 8002398:	003eb506 	br	8001e70 <__alt_data_end+0xfc001e70>
 800239c:	0023883a 	mov	r17,zero
 80023a0:	003d9b06 	br	8001a10 <__alt_data_end+0xfc001a10>
 80023a4:	b809883a 	mov	r4,r23
 80023a8:	b00b883a 	mov	r5,r22
 80023ac:	d9811e04 	addi	r6,sp,1144
 80023b0:	8007b280 	call	8007b28 <__sprint_r>
 80023b4:	1039e41e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 80023b8:	d8c12017 	ldw	r3,1152(sp)
 80023bc:	da000404 	addi	r8,sp,16
 80023c0:	003d9206 	br	8001a0c <__alt_data_end+0xfc001a0c>
 80023c4:	b809883a 	mov	r4,r23
 80023c8:	b00b883a 	mov	r5,r22
 80023cc:	d9811e04 	addi	r6,sp,1144
 80023d0:	8007b280 	call	8007b28 <__sprint_r>
 80023d4:	1039dc1e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 80023d8:	d8812617 	ldw	r2,1176(sp)
 80023dc:	d8c12017 	ldw	r3,1152(sp)
 80023e0:	da000404 	addi	r8,sp,16
 80023e4:	003dfb06 	br	8001bd4 <__alt_data_end+0xfc001bd4>
 80023e8:	01020074 	movhi	r4,2049
 80023ec:	213da584 	addi	r4,r4,-2410
 80023f0:	d9012c15 	stw	r4,1200(sp)
 80023f4:	d9012c17 	ldw	r4,1200(sp)
 80023f8:	1c07883a 	add	r3,r3,r16
 80023fc:	10800044 	addi	r2,r2,1
 8002400:	41000015 	stw	r4,0(r8)
 8002404:	44000115 	stw	r16,4(r8)
 8002408:	d8c12015 	stw	r3,1152(sp)
 800240c:	d8811f15 	stw	r2,1148(sp)
 8002410:	010001c4 	movi	r4,7
 8002414:	20bfae16 	blt	r4,r2,80022d0 <__alt_data_end+0xfc0022d0>
 8002418:	42000204 	addi	r8,r8,8
 800241c:	003fb406 	br	80022f0 <__alt_data_end+0xfc0022f0>
 8002420:	0021883a 	mov	r16,zero
 8002424:	003dfd06 	br	8001c1c <__alt_data_end+0xfc001c1c>
 8002428:	01420074 	movhi	r5,2049
 800242c:	297da984 	addi	r5,r5,-2394
 8002430:	d9413615 	stw	r5,1240(sp)
 8002434:	003ae306 	br	8000fc4 <__alt_data_end+0xfc000fc4>
 8002438:	b809883a 	mov	r4,r23
 800243c:	b00b883a 	mov	r5,r22
 8002440:	d9811e04 	addi	r6,sp,1144
 8002444:	8007b280 	call	8007b28 <__sprint_r>
 8002448:	1039bf1e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 800244c:	d8812617 	ldw	r2,1176(sp)
 8002450:	d9413317 	ldw	r5,1228(sp)
 8002454:	d8c12017 	ldw	r3,1152(sp)
 8002458:	da000404 	addi	r8,sp,16
 800245c:	2885c83a 	sub	r2,r5,r2
 8002460:	003ded06 	br	8001c18 <__alt_data_end+0xfc001c18>
 8002464:	00800184 	movi	r2,6
 8002468:	1240012e 	bgeu	r2,r9,8002470 <___vfprintf_internal_r+0x1d88>
 800246c:	1013883a 	mov	r9,r2
 8002470:	4823883a 	mov	r17,r9
 8002474:	4805883a 	mov	r2,r9
 8002478:	4800b216 	blt	r9,zero,8002744 <___vfprintf_internal_r+0x205c>
 800247c:	01420074 	movhi	r5,2049
 8002480:	297da304 	addi	r5,r5,-2420
 8002484:	d8812b15 	stw	r2,1196(sp)
 8002488:	dc812d15 	stw	r18,1204(sp)
 800248c:	d8013215 	stw	zero,1224(sp)
 8002490:	d8013415 	stw	zero,1232(sp)
 8002494:	d9413115 	stw	r5,1220(sp)
 8002498:	0005883a 	mov	r2,zero
 800249c:	003a1906 	br	8000d04 <__alt_data_end+0xfc000d04>
 80024a0:	04c00b44 	movi	r19,45
 80024a4:	dcc12785 	stb	r19,1182(sp)
 80024a8:	003b0006 	br	80010ac <__alt_data_end+0xfc0010ac>
 80024ac:	d8c12d17 	ldw	r3,1204(sp)
 80024b0:	d9012f17 	ldw	r4,1212(sp)
 80024b4:	18800017 	ldw	r2,0(r3)
 80024b8:	18c00104 	addi	r3,r3,4
 80024bc:	d8c12d15 	stw	r3,1204(sp)
 80024c0:	11000015 	stw	r4,0(r2)
 80024c4:	0038c506 	br	80007dc <__alt_data_end+0xfc0007dc>
 80024c8:	01420074 	movhi	r5,2049
 80024cc:	297d9804 	addi	r5,r5,-2464
 80024d0:	d9413115 	stw	r5,1220(sp)
 80024d4:	003f2406 	br	8002168 <__alt_data_end+0xfc002168>
 80024d8:	00800b44 	movi	r2,45
 80024dc:	d8812785 	stb	r2,1182(sp)
 80024e0:	df012b15 	stw	fp,1196(sp)
 80024e4:	d8013215 	stw	zero,1224(sp)
 80024e8:	df012d17 	ldw	fp,1204(sp)
 80024ec:	00800b44 	movi	r2,45
 80024f0:	dc812d15 	stw	r18,1204(sp)
 80024f4:	003a0006 	br	8000cf8 <__alt_data_end+0xfc000cf8>
 80024f8:	d8c12617 	ldw	r3,1176(sp)
 80024fc:	00bfff44 	movi	r2,-3
 8002500:	18800a16 	blt	r3,r2,800252c <___vfprintf_internal_r+0x1e44>
 8002504:	48c00916 	blt	r9,r3,800252c <___vfprintf_internal_r+0x1e44>
 8002508:	d8c13415 	stw	r3,1232(sp)
 800250c:	040019c4 	movi	r16,103
 8002510:	003e7606 	br	8001eec <__alt_data_end+0xfc001eec>
 8002514:	01020074 	movhi	r4,2049
 8002518:	213da584 	addi	r4,r4,-2410
 800251c:	d9012c15 	stw	r4,1200(sp)
 8002520:	003c8e06 	br	800175c <__alt_data_end+0xfc00175c>
 8002524:	5005883a 	mov	r2,r10
 8002528:	003e6506 	br	8001ec0 <__alt_data_end+0xfc001ec0>
 800252c:	843fff84 	addi	r16,r16,-2
 8002530:	1d7fffc4 	addi	r21,r3,-1
 8002534:	dd412615 	stw	r21,1176(sp)
 8002538:	dc0122c5 	stb	r16,1163(sp)
 800253c:	a8009216 	blt	r21,zero,8002788 <___vfprintf_internal_r+0x20a0>
 8002540:	00800ac4 	movi	r2,43
 8002544:	d8812305 	stb	r2,1164(sp)
 8002548:	00800244 	movi	r2,9
 800254c:	1540660e 	bge	r2,r21,80026e8 <___vfprintf_internal_r+0x2000>
 8002550:	dcc122c4 	addi	r19,sp,1163
 8002554:	dc012c15 	stw	r16,1200(sp)
 8002558:	4023883a 	mov	r17,r8
 800255c:	9821883a 	mov	r16,r19
 8002560:	a809883a 	mov	r4,r21
 8002564:	01400284 	movi	r5,10
 8002568:	800a5f00 	call	800a5f0 <__modsi3>
 800256c:	10800c04 	addi	r2,r2,48
 8002570:	843fffc4 	addi	r16,r16,-1
 8002574:	a809883a 	mov	r4,r21
 8002578:	01400284 	movi	r5,10
 800257c:	80800005 	stb	r2,0(r16)
 8002580:	800a59c0 	call	800a59c <__divsi3>
 8002584:	01000244 	movi	r4,9
 8002588:	102b883a 	mov	r21,r2
 800258c:	20bff416 	blt	r4,r2,8002560 <__alt_data_end+0xfc002560>
 8002590:	8811883a 	mov	r8,r17
 8002594:	10800c04 	addi	r2,r2,48
 8002598:	8023883a 	mov	r17,r16
 800259c:	897fffc4 	addi	r5,r17,-1
 80025a0:	88bfffc5 	stb	r2,-1(r17)
 80025a4:	dc012c17 	ldw	r16,1200(sp)
 80025a8:	2cc08a2e 	bgeu	r5,r19,80027d4 <___vfprintf_internal_r+0x20ec>
 80025ac:	d9812384 	addi	r6,sp,1166
 80025b0:	344dc83a 	sub	r6,r6,r17
 80025b4:	d9012344 	addi	r4,sp,1165
 80025b8:	998d883a 	add	r6,r19,r6
 80025bc:	00000106 	br	80025c4 <___vfprintf_internal_r+0x1edc>
 80025c0:	28800003 	ldbu	r2,0(r5)
 80025c4:	20800005 	stb	r2,0(r4)
 80025c8:	21000044 	addi	r4,r4,1
 80025cc:	29400044 	addi	r5,r5,1
 80025d0:	21bffb1e 	bne	r4,r6,80025c0 <__alt_data_end+0xfc0025c0>
 80025d4:	d8812304 	addi	r2,sp,1164
 80025d8:	1445c83a 	sub	r2,r2,r17
 80025dc:	d9412344 	addi	r5,sp,1165
 80025e0:	2885883a 	add	r2,r5,r2
 80025e4:	14e7c83a 	sub	r19,r2,r19
 80025e8:	d8813317 	ldw	r2,1228(sp)
 80025ec:	d8c13317 	ldw	r3,1228(sp)
 80025f0:	dcc13a15 	stw	r19,1256(sp)
 80025f4:	14e3883a 	add	r17,r2,r19
 80025f8:	00800044 	movi	r2,1
 80025fc:	10c0550e 	bge	r2,r3,8002754 <___vfprintf_internal_r+0x206c>
 8002600:	8c400044 	addi	r17,r17,1
 8002604:	8839883a 	mov	fp,r17
 8002608:	88005016 	blt	r17,zero,800274c <___vfprintf_internal_r+0x2064>
 800260c:	d8013415 	stw	zero,1232(sp)
 8002610:	003e3f06 	br	8001f10 <__alt_data_end+0xfc001f10>
 8002614:	da412b15 	stw	r9,1196(sp)
 8002618:	dcc12783 	ldbu	r19,1182(sp)
 800261c:	4823883a 	mov	r17,r9
 8002620:	dc812d15 	stw	r18,1204(sp)
 8002624:	d8013215 	stw	zero,1224(sp)
 8002628:	d8013415 	stw	zero,1232(sp)
 800262c:	0039ae06 	br	8000ce8 <__alt_data_end+0xfc000ce8>
 8002630:	483de91e 	bne	r9,zero,8001dd8 <__alt_data_end+0xfc001dd8>
 8002634:	8813883a 	mov	r9,r17
 8002638:	003de706 	br	8001dd8 <__alt_data_end+0xfc001dd8>
 800263c:	b809883a 	mov	r4,r23
 8002640:	b00b883a 	mov	r5,r22
 8002644:	d9811e04 	addi	r6,sp,1144
 8002648:	8007b280 	call	8007b28 <__sprint_r>
 800264c:	10393e1e 	bne	r2,zero,8000b48 <__alt_data_end+0xfc000b48>
 8002650:	dc012617 	ldw	r16,1176(sp)
 8002654:	d8c12017 	ldw	r3,1152(sp)
 8002658:	d8811f17 	ldw	r2,1148(sp)
 800265c:	da000404 	addi	r8,sp,16
 8002660:	003ea006 	br	80020e4 <__alt_data_end+0xfc0020e4>
 8002664:	00c00b44 	movi	r3,45
 8002668:	2460003c 	xorhi	r17,r4,32768
 800266c:	d8c12b05 	stb	r3,1196(sp)
 8002670:	003ddf06 	br	8001df0 <__alt_data_end+0xfc001df0>
 8002674:	02400184 	movi	r9,6
 8002678:	003dd706 	br	8001dd8 <__alt_data_end+0xfc001dd8>
 800267c:	4d400044 	addi	r21,r9,1
 8002680:	003de206 	br	8001e0c <__alt_data_end+0xfc001e0c>
 8002684:	d8c13417 	ldw	r3,1232(sp)
 8002688:	00c0490e 	bge	zero,r3,80027b0 <___vfprintf_internal_r+0x20c8>
 800268c:	04400044 	movi	r17,1
 8002690:	d9013317 	ldw	r4,1228(sp)
 8002694:	8923883a 	add	r17,r17,r4
 8002698:	8839883a 	mov	fp,r17
 800269c:	883e1c0e 	bge	r17,zero,8001f10 <__alt_data_end+0xfc001f10>
 80026a0:	0039883a 	mov	fp,zero
 80026a4:	003e1a06 	br	8001f10 <__alt_data_end+0xfc001f10>
 80026a8:	00c03b0e 	bge	zero,r3,8002798 <___vfprintf_internal_r+0x20b0>
 80026ac:	4800021e 	bne	r9,zero,80026b8 <___vfprintf_internal_r+0x1fd0>
 80026b0:	e080004c 	andi	r2,fp,1
 80026b4:	10000626 	beq	r2,zero,80026d0 <___vfprintf_internal_r+0x1fe8>
 80026b8:	d8c13417 	ldw	r3,1232(sp)
 80026bc:	4a400044 	addi	r9,r9,1
 80026c0:	1a63883a 	add	r17,r3,r9
 80026c4:	8839883a 	mov	fp,r17
 80026c8:	883e110e 	bge	r17,zero,8001f10 <__alt_data_end+0xfc001f10>
 80026cc:	003ff406 	br	80026a0 <__alt_data_end+0xfc0026a0>
 80026d0:	1839883a 	mov	fp,r3
 80026d4:	18004116 	blt	r3,zero,80027dc <___vfprintf_internal_r+0x20f4>
 80026d8:	dc413417 	ldw	r17,1232(sp)
 80026dc:	003e0c06 	br	8001f10 <__alt_data_end+0xfc001f10>
 80026e0:	d8812117 	ldw	r2,1156(sp)
 80026e4:	003df606 	br	8001ec0 <__alt_data_end+0xfc001ec0>
 80026e8:	00800c04 	movi	r2,48
 80026ec:	a8c00c04 	addi	r3,r21,48
 80026f0:	d8812345 	stb	r2,1165(sp)
 80026f4:	d8c12385 	stb	r3,1166(sp)
 80026f8:	d88123c4 	addi	r2,sp,1167
 80026fc:	dcc122c4 	addi	r19,sp,1163
 8002700:	003fb806 	br	80025e4 <__alt_data_end+0xfc0025e4>
 8002704:	d9013717 	ldw	r4,1244(sp)
 8002708:	880b883a 	mov	r5,r17
 800270c:	000d883a 	mov	r6,zero
 8002710:	000f883a 	mov	r7,zero
 8002714:	da013f15 	stw	r8,1276(sp)
 8002718:	da413e15 	stw	r9,1272(sp)
 800271c:	da813d15 	stw	r10,1268(sp)
 8002720:	800b8a00 	call	800b8a0 <__eqdf2>
 8002724:	da013f17 	ldw	r8,1276(sp)
 8002728:	da413e17 	ldw	r9,1272(sp)
 800272c:	da813d17 	ldw	r10,1268(sp)
 8002730:	103f1726 	beq	r2,zero,8002390 <__alt_data_end+0xfc002390>
 8002734:	00800044 	movi	r2,1
 8002738:	1547c83a 	sub	r3,r2,r21
 800273c:	d8c12615 	stw	r3,1176(sp)
 8002740:	003f1406 	br	8002394 <__alt_data_end+0xfc002394>
 8002744:	0005883a 	mov	r2,zero
 8002748:	003f4c06 	br	800247c <__alt_data_end+0xfc00247c>
 800274c:	0039883a 	mov	fp,zero
 8002750:	003fae06 	br	800260c <__alt_data_end+0xfc00260c>
 8002754:	e084703a 	and	r2,fp,r2
 8002758:	103faa26 	beq	r2,zero,8002604 <__alt_data_end+0xfc002604>
 800275c:	003fa806 	br	8002600 <__alt_data_end+0xfc002600>
 8002760:	d9412d17 	ldw	r5,1204(sp)
 8002764:	2a400017 	ldw	r9,0(r5)
 8002768:	28c00104 	addi	r3,r5,4
 800276c:	d8c12d15 	stw	r3,1204(sp)
 8002770:	483ebc0e 	bge	r9,zero,8002264 <__alt_data_end+0xfc002264>
 8002774:	027fffc4 	movi	r9,-1
 8002778:	e4000047 	ldb	r16,1(fp)
 800277c:	00384206 	br	8000888 <__alt_data_end+0xfc000888>
 8002780:	043fffc4 	movi	r16,-1
 8002784:	0038ce06 	br	8000ac0 <__alt_data_end+0xfc000ac0>
 8002788:	00800b44 	movi	r2,45
 800278c:	056bc83a 	sub	r21,zero,r21
 8002790:	d8812305 	stb	r2,1164(sp)
 8002794:	003f6c06 	br	8002548 <__alt_data_end+0xfc002548>
 8002798:	4800081e 	bne	r9,zero,80027bc <___vfprintf_internal_r+0x20d4>
 800279c:	e080004c 	andi	r2,fp,1
 80027a0:	1000061e 	bne	r2,zero,80027bc <___vfprintf_internal_r+0x20d4>
 80027a4:	07000044 	movi	fp,1
 80027a8:	e023883a 	mov	r17,fp
 80027ac:	003dd806 	br	8001f10 <__alt_data_end+0xfc001f10>
 80027b0:	04400084 	movi	r17,2
 80027b4:	88e3c83a 	sub	r17,r17,r3
 80027b8:	003fb506 	br	8002690 <__alt_data_end+0xfc002690>
 80027bc:	4c400084 	addi	r17,r9,2
 80027c0:	8839883a 	mov	fp,r17
 80027c4:	883dd20e 	bge	r17,zero,8001f10 <__alt_data_end+0xfc001f10>
 80027c8:	003fb506 	br	80026a0 <__alt_data_end+0xfc0026a0>
 80027cc:	d8c12617 	ldw	r3,1176(sp)
 80027d0:	003f5706 	br	8002530 <__alt_data_end+0xfc002530>
 80027d4:	d8812344 	addi	r2,sp,1165
 80027d8:	003f8206 	br	80025e4 <__alt_data_end+0xfc0025e4>
 80027dc:	0039883a 	mov	fp,zero
 80027e0:	003fbd06 	br	80026d8 <__alt_data_end+0xfc0026d8>

080027e4 <__vfprintf_internal>:
 80027e4:	2007883a 	mov	r3,r4
 80027e8:	01020074 	movhi	r4,2049
 80027ec:	21050004 	addi	r4,r4,5120
 80027f0:	21000017 	ldw	r4,0(r4)
 80027f4:	2805883a 	mov	r2,r5
 80027f8:	300f883a 	mov	r7,r6
 80027fc:	180b883a 	mov	r5,r3
 8002800:	100d883a 	mov	r6,r2
 8002804:	80006e81 	jmpi	80006e8 <___vfprintf_internal_r>

08002808 <__swsetup_r>:
 8002808:	00820074 	movhi	r2,2049
 800280c:	defffd04 	addi	sp,sp,-12
 8002810:	10850004 	addi	r2,r2,5120
 8002814:	dc400115 	stw	r17,4(sp)
 8002818:	2023883a 	mov	r17,r4
 800281c:	11000017 	ldw	r4,0(r2)
 8002820:	dc000015 	stw	r16,0(sp)
 8002824:	dfc00215 	stw	ra,8(sp)
 8002828:	2821883a 	mov	r16,r5
 800282c:	20000226 	beq	r4,zero,8002838 <__swsetup_r+0x30>
 8002830:	20c00e17 	ldw	r3,56(r4)
 8002834:	18002e26 	beq	r3,zero,80028f0 <__swsetup_r+0xe8>
 8002838:	8080030b 	ldhu	r2,12(r16)
 800283c:	10c0020c 	andi	r3,r2,8
 8002840:	100d883a 	mov	r6,r2
 8002844:	18000f26 	beq	r3,zero,8002884 <__swsetup_r+0x7c>
 8002848:	80c00417 	ldw	r3,16(r16)
 800284c:	18001526 	beq	r3,zero,80028a4 <__swsetup_r+0x9c>
 8002850:	1100004c 	andi	r4,r2,1
 8002854:	20001c1e 	bne	r4,zero,80028c8 <__swsetup_r+0xc0>
 8002858:	1080008c 	andi	r2,r2,2
 800285c:	1000261e 	bne	r2,zero,80028f8 <__swsetup_r+0xf0>
 8002860:	80800517 	ldw	r2,20(r16)
 8002864:	80800215 	stw	r2,8(r16)
 8002868:	18001c26 	beq	r3,zero,80028dc <__swsetup_r+0xd4>
 800286c:	0005883a 	mov	r2,zero
 8002870:	dfc00217 	ldw	ra,8(sp)
 8002874:	dc400117 	ldw	r17,4(sp)
 8002878:	dc000017 	ldw	r16,0(sp)
 800287c:	dec00304 	addi	sp,sp,12
 8002880:	f800283a 	ret
 8002884:	3080040c 	andi	r2,r6,16
 8002888:	10001726 	beq	r2,zero,80028e8 <__swsetup_r+0xe0>
 800288c:	3080010c 	andi	r2,r6,4
 8002890:	10001b1e 	bne	r2,zero,8002900 <__swsetup_r+0xf8>
 8002894:	80c00417 	ldw	r3,16(r16)
 8002898:	30800214 	ori	r2,r6,8
 800289c:	8080030d 	sth	r2,12(r16)
 80028a0:	183feb1e 	bne	r3,zero,8002850 <__alt_data_end+0xfc002850>
 80028a4:	1140a00c 	andi	r5,r2,640
 80028a8:	01008004 	movi	r4,512
 80028ac:	293fe826 	beq	r5,r4,8002850 <__alt_data_end+0xfc002850>
 80028b0:	8809883a 	mov	r4,r17
 80028b4:	800b883a 	mov	r5,r16
 80028b8:	800539c0 	call	800539c <__smakebuf_r>
 80028bc:	8080030b 	ldhu	r2,12(r16)
 80028c0:	80c00417 	ldw	r3,16(r16)
 80028c4:	003fe206 	br	8002850 <__alt_data_end+0xfc002850>
 80028c8:	80800517 	ldw	r2,20(r16)
 80028cc:	80000215 	stw	zero,8(r16)
 80028d0:	0085c83a 	sub	r2,zero,r2
 80028d4:	80800615 	stw	r2,24(r16)
 80028d8:	183fe41e 	bne	r3,zero,800286c <__alt_data_end+0xfc00286c>
 80028dc:	8080030b 	ldhu	r2,12(r16)
 80028e0:	1080200c 	andi	r2,r2,128
 80028e4:	103fe226 	beq	r2,zero,8002870 <__alt_data_end+0xfc002870>
 80028e8:	00bfffc4 	movi	r2,-1
 80028ec:	003fe006 	br	8002870 <__alt_data_end+0xfc002870>
 80028f0:	80048440 	call	8004844 <__sinit>
 80028f4:	003fd006 	br	8002838 <__alt_data_end+0xfc002838>
 80028f8:	0005883a 	mov	r2,zero
 80028fc:	003fd906 	br	8002864 <__alt_data_end+0xfc002864>
 8002900:	81400c17 	ldw	r5,48(r16)
 8002904:	28000626 	beq	r5,zero,8002920 <__swsetup_r+0x118>
 8002908:	80801004 	addi	r2,r16,64
 800290c:	28800326 	beq	r5,r2,800291c <__swsetup_r+0x114>
 8002910:	8809883a 	mov	r4,r17
 8002914:	80049b80 	call	80049b8 <_free_r>
 8002918:	8180030b 	ldhu	r6,12(r16)
 800291c:	80000c15 	stw	zero,48(r16)
 8002920:	80c00417 	ldw	r3,16(r16)
 8002924:	00bff6c4 	movi	r2,-37
 8002928:	118c703a 	and	r6,r2,r6
 800292c:	80000115 	stw	zero,4(r16)
 8002930:	80c00015 	stw	r3,0(r16)
 8002934:	003fd806 	br	8002898 <__alt_data_end+0xfc002898>

08002938 <quorem>:
 8002938:	defff204 	addi	sp,sp,-56
 800293c:	ddc00b15 	stw	r23,44(sp)
 8002940:	20800417 	ldw	r2,16(r4)
 8002944:	2dc00417 	ldw	r23,16(r5)
 8002948:	dfc00d15 	stw	ra,52(sp)
 800294c:	df000c15 	stw	fp,48(sp)
 8002950:	dd800a15 	stw	r22,40(sp)
 8002954:	dd400915 	stw	r21,36(sp)
 8002958:	dd000815 	stw	r20,32(sp)
 800295c:	dcc00715 	stw	r19,28(sp)
 8002960:	dc800615 	stw	r18,24(sp)
 8002964:	dc400515 	stw	r17,20(sp)
 8002968:	dc000415 	stw	r16,16(sp)
 800296c:	15c07a16 	blt	r2,r23,8002b58 <quorem+0x220>
 8002970:	bdffffc4 	addi	r23,r23,-1
 8002974:	bde9883a 	add	r20,r23,r23
 8002978:	28c00504 	addi	r3,r5,20
 800297c:	a529883a 	add	r20,r20,r20
 8002980:	1d39883a 	add	fp,r3,r20
 8002984:	24c00504 	addi	r19,r4,20
 8002988:	d9400215 	stw	r5,8(sp)
 800298c:	9d29883a 	add	r20,r19,r20
 8002990:	e1400017 	ldw	r5,0(fp)
 8002994:	d9000015 	stw	r4,0(sp)
 8002998:	a1000017 	ldw	r4,0(r20)
 800299c:	29400044 	addi	r5,r5,1
 80029a0:	d8c00115 	stw	r3,4(sp)
 80029a4:	dd000315 	stw	r20,12(sp)
 80029a8:	800a64c0 	call	800a64c <__udivsi3>
 80029ac:	1025883a 	mov	r18,r2
 80029b0:	10003026 	beq	r2,zero,8002a74 <quorem+0x13c>
 80029b4:	dc400117 	ldw	r17,4(sp)
 80029b8:	9829883a 	mov	r20,r19
 80029bc:	002d883a 	mov	r22,zero
 80029c0:	0021883a 	mov	r16,zero
 80029c4:	8d400017 	ldw	r21,0(r17)
 80029c8:	900b883a 	mov	r5,r18
 80029cc:	8c400104 	addi	r17,r17,4
 80029d0:	a93fffcc 	andi	r4,r21,65535
 80029d4:	800a65c0 	call	800a65c <__mulsi3>
 80029d8:	a808d43a 	srli	r4,r21,16
 80029dc:	900b883a 	mov	r5,r18
 80029e0:	b0ad883a 	add	r22,r22,r2
 80029e4:	800a65c0 	call	800a65c <__mulsi3>
 80029e8:	a1000017 	ldw	r4,0(r20)
 80029ec:	b00cd43a 	srli	r6,r22,16
 80029f0:	b0ffffcc 	andi	r3,r22,65535
 80029f4:	217fffcc 	andi	r5,r4,65535
 80029f8:	2c21883a 	add	r16,r5,r16
 80029fc:	80c7c83a 	sub	r3,r16,r3
 8002a00:	2008d43a 	srli	r4,r4,16
 8002a04:	3085883a 	add	r2,r6,r2
 8002a08:	1821d43a 	srai	r16,r3,16
 8002a0c:	117fffcc 	andi	r5,r2,65535
 8002a10:	2149c83a 	sub	r4,r4,r5
 8002a14:	2421883a 	add	r16,r4,r16
 8002a18:	8008943a 	slli	r4,r16,16
 8002a1c:	18ffffcc 	andi	r3,r3,65535
 8002a20:	102cd43a 	srli	r22,r2,16
 8002a24:	20c8b03a 	or	r4,r4,r3
 8002a28:	a1000015 	stw	r4,0(r20)
 8002a2c:	8021d43a 	srai	r16,r16,16
 8002a30:	a5000104 	addi	r20,r20,4
 8002a34:	e47fe32e 	bgeu	fp,r17,80029c4 <__alt_data_end+0xfc0029c4>
 8002a38:	d8c00317 	ldw	r3,12(sp)
 8002a3c:	18800017 	ldw	r2,0(r3)
 8002a40:	10000c1e 	bne	r2,zero,8002a74 <quorem+0x13c>
 8002a44:	18bfff04 	addi	r2,r3,-4
 8002a48:	9880082e 	bgeu	r19,r2,8002a6c <quorem+0x134>
 8002a4c:	18ffff17 	ldw	r3,-4(r3)
 8002a50:	18000326 	beq	r3,zero,8002a60 <quorem+0x128>
 8002a54:	00000506 	br	8002a6c <quorem+0x134>
 8002a58:	10c00017 	ldw	r3,0(r2)
 8002a5c:	1800031e 	bne	r3,zero,8002a6c <quorem+0x134>
 8002a60:	10bfff04 	addi	r2,r2,-4
 8002a64:	bdffffc4 	addi	r23,r23,-1
 8002a68:	98bffb36 	bltu	r19,r2,8002a58 <__alt_data_end+0xfc002a58>
 8002a6c:	d8c00017 	ldw	r3,0(sp)
 8002a70:	1dc00415 	stw	r23,16(r3)
 8002a74:	d9000017 	ldw	r4,0(sp)
 8002a78:	d9400217 	ldw	r5,8(sp)
 8002a7c:	8006b180 	call	8006b18 <__mcmp>
 8002a80:	10002816 	blt	r2,zero,8002b24 <quorem+0x1ec>
 8002a84:	dc400117 	ldw	r17,4(sp)
 8002a88:	94800044 	addi	r18,r18,1
 8002a8c:	980d883a 	mov	r6,r19
 8002a90:	0007883a 	mov	r3,zero
 8002a94:	31000017 	ldw	r4,0(r6)
 8002a98:	89400017 	ldw	r5,0(r17)
 8002a9c:	31800104 	addi	r6,r6,4
 8002aa0:	20bfffcc 	andi	r2,r4,65535
 8002aa4:	10c7883a 	add	r3,r2,r3
 8002aa8:	28bfffcc 	andi	r2,r5,65535
 8002aac:	1885c83a 	sub	r2,r3,r2
 8002ab0:	280ad43a 	srli	r5,r5,16
 8002ab4:	2008d43a 	srli	r4,r4,16
 8002ab8:	1007d43a 	srai	r3,r2,16
 8002abc:	10bfffcc 	andi	r2,r2,65535
 8002ac0:	2149c83a 	sub	r4,r4,r5
 8002ac4:	20c9883a 	add	r4,r4,r3
 8002ac8:	200a943a 	slli	r5,r4,16
 8002acc:	8c400104 	addi	r17,r17,4
 8002ad0:	2007d43a 	srai	r3,r4,16
 8002ad4:	2884b03a 	or	r2,r5,r2
 8002ad8:	30bfff15 	stw	r2,-4(r6)
 8002adc:	e47fed2e 	bgeu	fp,r17,8002a94 <__alt_data_end+0xfc002a94>
 8002ae0:	bdc5883a 	add	r2,r23,r23
 8002ae4:	1085883a 	add	r2,r2,r2
 8002ae8:	9887883a 	add	r3,r19,r2
 8002aec:	18800017 	ldw	r2,0(r3)
 8002af0:	10000c1e 	bne	r2,zero,8002b24 <quorem+0x1ec>
 8002af4:	18bfff04 	addi	r2,r3,-4
 8002af8:	9880082e 	bgeu	r19,r2,8002b1c <quorem+0x1e4>
 8002afc:	18ffff17 	ldw	r3,-4(r3)
 8002b00:	18000326 	beq	r3,zero,8002b10 <quorem+0x1d8>
 8002b04:	00000506 	br	8002b1c <quorem+0x1e4>
 8002b08:	10c00017 	ldw	r3,0(r2)
 8002b0c:	1800031e 	bne	r3,zero,8002b1c <quorem+0x1e4>
 8002b10:	10bfff04 	addi	r2,r2,-4
 8002b14:	bdffffc4 	addi	r23,r23,-1
 8002b18:	98bffb36 	bltu	r19,r2,8002b08 <__alt_data_end+0xfc002b08>
 8002b1c:	d8c00017 	ldw	r3,0(sp)
 8002b20:	1dc00415 	stw	r23,16(r3)
 8002b24:	9005883a 	mov	r2,r18
 8002b28:	dfc00d17 	ldw	ra,52(sp)
 8002b2c:	df000c17 	ldw	fp,48(sp)
 8002b30:	ddc00b17 	ldw	r23,44(sp)
 8002b34:	dd800a17 	ldw	r22,40(sp)
 8002b38:	dd400917 	ldw	r21,36(sp)
 8002b3c:	dd000817 	ldw	r20,32(sp)
 8002b40:	dcc00717 	ldw	r19,28(sp)
 8002b44:	dc800617 	ldw	r18,24(sp)
 8002b48:	dc400517 	ldw	r17,20(sp)
 8002b4c:	dc000417 	ldw	r16,16(sp)
 8002b50:	dec00e04 	addi	sp,sp,56
 8002b54:	f800283a 	ret
 8002b58:	0005883a 	mov	r2,zero
 8002b5c:	003ff206 	br	8002b28 <__alt_data_end+0xfc002b28>

08002b60 <_dtoa_r>:
 8002b60:	20801017 	ldw	r2,64(r4)
 8002b64:	deffde04 	addi	sp,sp,-136
 8002b68:	dd401d15 	stw	r21,116(sp)
 8002b6c:	dcc01b15 	stw	r19,108(sp)
 8002b70:	dc801a15 	stw	r18,104(sp)
 8002b74:	dc401915 	stw	r17,100(sp)
 8002b78:	dc001815 	stw	r16,96(sp)
 8002b7c:	dfc02115 	stw	ra,132(sp)
 8002b80:	df002015 	stw	fp,128(sp)
 8002b84:	ddc01f15 	stw	r23,124(sp)
 8002b88:	dd801e15 	stw	r22,120(sp)
 8002b8c:	dd001c15 	stw	r20,112(sp)
 8002b90:	d9c00315 	stw	r7,12(sp)
 8002b94:	2021883a 	mov	r16,r4
 8002b98:	302b883a 	mov	r21,r6
 8002b9c:	2825883a 	mov	r18,r5
 8002ba0:	dc402417 	ldw	r17,144(sp)
 8002ba4:	3027883a 	mov	r19,r6
 8002ba8:	10000826 	beq	r2,zero,8002bcc <_dtoa_r+0x6c>
 8002bac:	21801117 	ldw	r6,68(r4)
 8002bb0:	00c00044 	movi	r3,1
 8002bb4:	100b883a 	mov	r5,r2
 8002bb8:	1986983a 	sll	r3,r3,r6
 8002bbc:	11800115 	stw	r6,4(r2)
 8002bc0:	10c00215 	stw	r3,8(r2)
 8002bc4:	80062440 	call	8006244 <_Bfree>
 8002bc8:	80001015 	stw	zero,64(r16)
 8002bcc:	a8002d16 	blt	r21,zero,8002c84 <_dtoa_r+0x124>
 8002bd0:	88000015 	stw	zero,0(r17)
 8002bd4:	a8dffc2c 	andhi	r3,r21,32752
 8002bd8:	009ffc34 	movhi	r2,32752
 8002bdc:	18801b26 	beq	r3,r2,8002c4c <_dtoa_r+0xec>
 8002be0:	9009883a 	mov	r4,r18
 8002be4:	980b883a 	mov	r5,r19
 8002be8:	000d883a 	mov	r6,zero
 8002bec:	000f883a 	mov	r7,zero
 8002bf0:	800b8a00 	call	800b8a0 <__eqdf2>
 8002bf4:	10002a1e 	bne	r2,zero,8002ca0 <_dtoa_r+0x140>
 8002bf8:	d8c02317 	ldw	r3,140(sp)
 8002bfc:	d9002517 	ldw	r4,148(sp)
 8002c00:	00800044 	movi	r2,1
 8002c04:	18800015 	stw	r2,0(r3)
 8002c08:	2001a226 	beq	r4,zero,8003294 <_dtoa_r+0x734>
 8002c0c:	00820074 	movhi	r2,2049
 8002c10:	10bda544 	addi	r2,r2,-2411
 8002c14:	20800015 	stw	r2,0(r4)
 8002c18:	10bfffc4 	addi	r2,r2,-1
 8002c1c:	dfc02117 	ldw	ra,132(sp)
 8002c20:	df002017 	ldw	fp,128(sp)
 8002c24:	ddc01f17 	ldw	r23,124(sp)
 8002c28:	dd801e17 	ldw	r22,120(sp)
 8002c2c:	dd401d17 	ldw	r21,116(sp)
 8002c30:	dd001c17 	ldw	r20,112(sp)
 8002c34:	dcc01b17 	ldw	r19,108(sp)
 8002c38:	dc801a17 	ldw	r18,104(sp)
 8002c3c:	dc401917 	ldw	r17,100(sp)
 8002c40:	dc001817 	ldw	r16,96(sp)
 8002c44:	dec02204 	addi	sp,sp,136
 8002c48:	f800283a 	ret
 8002c4c:	d8c02317 	ldw	r3,140(sp)
 8002c50:	0089c3c4 	movi	r2,9999
 8002c54:	18800015 	stw	r2,0(r3)
 8002c58:	90017c26 	beq	r18,zero,800324c <_dtoa_r+0x6ec>
 8002c5c:	00820074 	movhi	r2,2049
 8002c60:	10bdb104 	addi	r2,r2,-2364
 8002c64:	d9002517 	ldw	r4,148(sp)
 8002c68:	203fec26 	beq	r4,zero,8002c1c <__alt_data_end+0xfc002c1c>
 8002c6c:	10c000c7 	ldb	r3,3(r2)
 8002c70:	18017d1e 	bne	r3,zero,8003268 <_dtoa_r+0x708>
 8002c74:	10c000c4 	addi	r3,r2,3
 8002c78:	d9802517 	ldw	r6,148(sp)
 8002c7c:	30c00015 	stw	r3,0(r6)
 8002c80:	003fe606 	br	8002c1c <__alt_data_end+0xfc002c1c>
 8002c84:	04e00034 	movhi	r19,32768
 8002c88:	9cffffc4 	addi	r19,r19,-1
 8002c8c:	00800044 	movi	r2,1
 8002c90:	ace6703a 	and	r19,r21,r19
 8002c94:	88800015 	stw	r2,0(r17)
 8002c98:	982b883a 	mov	r21,r19
 8002c9c:	003fcd06 	br	8002bd4 <__alt_data_end+0xfc002bd4>
 8002ca0:	d8800204 	addi	r2,sp,8
 8002ca4:	a822d53a 	srli	r17,r21,20
 8002ca8:	d8800015 	stw	r2,0(sp)
 8002cac:	8009883a 	mov	r4,r16
 8002cb0:	900b883a 	mov	r5,r18
 8002cb4:	980d883a 	mov	r6,r19
 8002cb8:	d9c00104 	addi	r7,sp,4
 8002cbc:	8006e8c0 	call	8006e8c <__d2b>
 8002cc0:	1039883a 	mov	fp,r2
 8002cc4:	88016a1e 	bne	r17,zero,8003270 <_dtoa_r+0x710>
 8002cc8:	dd000217 	ldw	r20,8(sp)
 8002ccc:	dc400117 	ldw	r17,4(sp)
 8002cd0:	00befbc4 	movi	r2,-1041
 8002cd4:	a463883a 	add	r17,r20,r17
 8002cd8:	8882ea16 	blt	r17,r2,8003884 <_dtoa_r+0xd24>
 8002cdc:	00bf0384 	movi	r2,-1010
 8002ce0:	1445c83a 	sub	r2,r2,r17
 8002ce4:	89010484 	addi	r4,r17,1042
 8002ce8:	a8aa983a 	sll	r21,r21,r2
 8002cec:	9108d83a 	srl	r4,r18,r4
 8002cf0:	a908b03a 	or	r4,r21,r4
 8002cf4:	800cd780 	call	800cd78 <__floatunsidf>
 8002cf8:	017f8434 	movhi	r5,65040
 8002cfc:	01800044 	movi	r6,1
 8002d00:	1009883a 	mov	r4,r2
 8002d04:	194b883a 	add	r5,r3,r5
 8002d08:	8c7fffc4 	addi	r17,r17,-1
 8002d0c:	d9800f15 	stw	r6,60(sp)
 8002d10:	000d883a 	mov	r6,zero
 8002d14:	01cffe34 	movhi	r7,16376
 8002d18:	800c3500 	call	800c350 <__subdf3>
 8002d1c:	0198dbf4 	movhi	r6,25455
 8002d20:	01cff4f4 	movhi	r7,16339
 8002d24:	1009883a 	mov	r4,r2
 8002d28:	180b883a 	mov	r5,r3
 8002d2c:	3190d844 	addi	r6,r6,17249
 8002d30:	39e1e9c4 	addi	r7,r7,-30809
 8002d34:	800bae40 	call	800bae4 <__muldf3>
 8002d38:	01a2d874 	movhi	r6,35681
 8002d3c:	01cff1f4 	movhi	r7,16327
 8002d40:	180b883a 	mov	r5,r3
 8002d44:	31b22cc4 	addi	r6,r6,-14157
 8002d48:	39e28a04 	addi	r7,r7,-30168
 8002d4c:	1009883a 	mov	r4,r2
 8002d50:	800a6840 	call	800a684 <__adddf3>
 8002d54:	8809883a 	mov	r4,r17
 8002d58:	102d883a 	mov	r22,r2
 8002d5c:	182b883a 	mov	r21,r3
 8002d60:	800cca80 	call	800cca8 <__floatsidf>
 8002d64:	019427f4 	movhi	r6,20639
 8002d68:	01cff4f4 	movhi	r7,16339
 8002d6c:	1009883a 	mov	r4,r2
 8002d70:	180b883a 	mov	r5,r3
 8002d74:	319e7ec4 	addi	r6,r6,31227
 8002d78:	39d104c4 	addi	r7,r7,17427
 8002d7c:	800bae40 	call	800bae4 <__muldf3>
 8002d80:	b009883a 	mov	r4,r22
 8002d84:	a80b883a 	mov	r5,r21
 8002d88:	100d883a 	mov	r6,r2
 8002d8c:	180f883a 	mov	r7,r3
 8002d90:	800a6840 	call	800a684 <__adddf3>
 8002d94:	1009883a 	mov	r4,r2
 8002d98:	180b883a 	mov	r5,r3
 8002d9c:	102d883a 	mov	r22,r2
 8002da0:	182b883a 	mov	r21,r3
 8002da4:	800cc200 	call	800cc20 <__fixdfsi>
 8002da8:	b009883a 	mov	r4,r22
 8002dac:	a80b883a 	mov	r5,r21
 8002db0:	000d883a 	mov	r6,zero
 8002db4:	000f883a 	mov	r7,zero
 8002db8:	d8800515 	stw	r2,20(sp)
 8002dbc:	800ba040 	call	800ba04 <__ledf2>
 8002dc0:	10023116 	blt	r2,zero,8003688 <_dtoa_r+0xb28>
 8002dc4:	d8c00517 	ldw	r3,20(sp)
 8002dc8:	00800584 	movi	r2,22
 8002dcc:	10c21f36 	bltu	r2,r3,800364c <_dtoa_r+0xaec>
 8002dd0:	180490fa 	slli	r2,r3,3
 8002dd4:	00c20074 	movhi	r3,2049
 8002dd8:	18fdcd04 	addi	r3,r3,-2252
 8002ddc:	1885883a 	add	r2,r3,r2
 8002de0:	11000017 	ldw	r4,0(r2)
 8002de4:	11400117 	ldw	r5,4(r2)
 8002de8:	900d883a 	mov	r6,r18
 8002dec:	980f883a 	mov	r7,r19
 8002df0:	800b9240 	call	800b924 <__gedf2>
 8002df4:	0082a70e 	bge	zero,r2,8003894 <_dtoa_r+0xd34>
 8002df8:	d9000517 	ldw	r4,20(sp)
 8002dfc:	d8000c15 	stw	zero,48(sp)
 8002e00:	213fffc4 	addi	r4,r4,-1
 8002e04:	d9000515 	stw	r4,20(sp)
 8002e08:	a463c83a 	sub	r17,r20,r17
 8002e0c:	8dbfffc4 	addi	r22,r17,-1
 8002e10:	b0021916 	blt	r22,zero,8003678 <_dtoa_r+0xb18>
 8002e14:	d8000815 	stw	zero,32(sp)
 8002e18:	d8800517 	ldw	r2,20(sp)
 8002e1c:	10020e16 	blt	r2,zero,8003658 <_dtoa_r+0xaf8>
 8002e20:	b0ad883a 	add	r22,r22,r2
 8002e24:	d8800a15 	stw	r2,40(sp)
 8002e28:	d8000915 	stw	zero,36(sp)
 8002e2c:	d8c00317 	ldw	r3,12(sp)
 8002e30:	00800244 	movi	r2,9
 8002e34:	10c11a36 	bltu	r2,r3,80032a0 <_dtoa_r+0x740>
 8002e38:	00800144 	movi	r2,5
 8002e3c:	10c4fc0e 	bge	r2,r3,8004230 <_dtoa_r+0x16d0>
 8002e40:	18ffff04 	addi	r3,r3,-4
 8002e44:	d8c00315 	stw	r3,12(sp)
 8002e48:	0029883a 	mov	r20,zero
 8002e4c:	d9800317 	ldw	r6,12(sp)
 8002e50:	008000c4 	movi	r2,3
 8002e54:	3083bd26 	beq	r6,r2,8003d4c <_dtoa_r+0x11ec>
 8002e58:	1183670e 	bge	r2,r6,8003bf8 <_dtoa_r+0x1098>
 8002e5c:	d8c00317 	ldw	r3,12(sp)
 8002e60:	00800104 	movi	r2,4
 8002e64:	1882e726 	beq	r3,r2,8003a04 <_dtoa_r+0xea4>
 8002e68:	00800144 	movi	r2,5
 8002e6c:	1884f21e 	bne	r3,r2,8004238 <_dtoa_r+0x16d8>
 8002e70:	00800044 	movi	r2,1
 8002e74:	d8800b15 	stw	r2,44(sp)
 8002e78:	d8c02217 	ldw	r3,136(sp)
 8002e7c:	d9000517 	ldw	r4,20(sp)
 8002e80:	1907883a 	add	r3,r3,r4
 8002e84:	19800044 	addi	r6,r3,1
 8002e88:	d8c00d15 	stw	r3,52(sp)
 8002e8c:	d9800615 	stw	r6,24(sp)
 8002e90:	0183c30e 	bge	zero,r6,8003da0 <_dtoa_r+0x1240>
 8002e94:	d9800617 	ldw	r6,24(sp)
 8002e98:	3023883a 	mov	r17,r6
 8002e9c:	80001115 	stw	zero,68(r16)
 8002ea0:	008005c4 	movi	r2,23
 8002ea4:	1184f62e 	bgeu	r2,r6,8004280 <_dtoa_r+0x1720>
 8002ea8:	00c00044 	movi	r3,1
 8002eac:	00800104 	movi	r2,4
 8002eb0:	1085883a 	add	r2,r2,r2
 8002eb4:	11000504 	addi	r4,r2,20
 8002eb8:	180b883a 	mov	r5,r3
 8002ebc:	18c00044 	addi	r3,r3,1
 8002ec0:	313ffb2e 	bgeu	r6,r4,8002eb0 <__alt_data_end+0xfc002eb0>
 8002ec4:	81401115 	stw	r5,68(r16)
 8002ec8:	8009883a 	mov	r4,r16
 8002ecc:	800619c0 	call	800619c <_Balloc>
 8002ed0:	d8800715 	stw	r2,28(sp)
 8002ed4:	80801015 	stw	r2,64(r16)
 8002ed8:	00800384 	movi	r2,14
 8002edc:	1440fd36 	bltu	r2,r17,80032d4 <_dtoa_r+0x774>
 8002ee0:	a000fc26 	beq	r20,zero,80032d4 <_dtoa_r+0x774>
 8002ee4:	d8800517 	ldw	r2,20(sp)
 8002ee8:	0083b90e 	bge	zero,r2,8003dd0 <_dtoa_r+0x1270>
 8002eec:	d8c00517 	ldw	r3,20(sp)
 8002ef0:	108003cc 	andi	r2,r2,15
 8002ef4:	100490fa 	slli	r2,r2,3
 8002ef8:	182fd13a 	srai	r23,r3,4
 8002efc:	00c20074 	movhi	r3,2049
 8002f00:	18fdcd04 	addi	r3,r3,-2252
 8002f04:	1885883a 	add	r2,r3,r2
 8002f08:	b8c0040c 	andi	r3,r23,16
 8002f0c:	12c00017 	ldw	r11,0(r2)
 8002f10:	12800117 	ldw	r10,4(r2)
 8002f14:	18039726 	beq	r3,zero,8003d74 <_dtoa_r+0x1214>
 8002f18:	00820074 	movhi	r2,2049
 8002f1c:	10bdc304 	addi	r2,r2,-2292
 8002f20:	11800817 	ldw	r6,32(r2)
 8002f24:	11c00917 	ldw	r7,36(r2)
 8002f28:	9009883a 	mov	r4,r18
 8002f2c:	980b883a 	mov	r5,r19
 8002f30:	da801615 	stw	r10,88(sp)
 8002f34:	dac01515 	stw	r11,84(sp)
 8002f38:	800af200 	call	800af20 <__divdf3>
 8002f3c:	da801617 	ldw	r10,88(sp)
 8002f40:	dac01517 	ldw	r11,84(sp)
 8002f44:	bdc003cc 	andi	r23,r23,15
 8002f48:	044000c4 	movi	r17,3
 8002f4c:	d8800e15 	stw	r2,56(sp)
 8002f50:	182b883a 	mov	r21,r3
 8002f54:	b8001126 	beq	r23,zero,8002f9c <_dtoa_r+0x43c>
 8002f58:	05020074 	movhi	r20,2049
 8002f5c:	a53dc304 	addi	r20,r20,-2292
 8002f60:	5805883a 	mov	r2,r11
 8002f64:	5007883a 	mov	r3,r10
 8002f68:	b980004c 	andi	r6,r23,1
 8002f6c:	1009883a 	mov	r4,r2
 8002f70:	b82fd07a 	srai	r23,r23,1
 8002f74:	180b883a 	mov	r5,r3
 8002f78:	30000426 	beq	r6,zero,8002f8c <_dtoa_r+0x42c>
 8002f7c:	a1800017 	ldw	r6,0(r20)
 8002f80:	a1c00117 	ldw	r7,4(r20)
 8002f84:	8c400044 	addi	r17,r17,1
 8002f88:	800bae40 	call	800bae4 <__muldf3>
 8002f8c:	a5000204 	addi	r20,r20,8
 8002f90:	b83ff51e 	bne	r23,zero,8002f68 <__alt_data_end+0xfc002f68>
 8002f94:	1017883a 	mov	r11,r2
 8002f98:	1815883a 	mov	r10,r3
 8002f9c:	d9000e17 	ldw	r4,56(sp)
 8002fa0:	a80b883a 	mov	r5,r21
 8002fa4:	580d883a 	mov	r6,r11
 8002fa8:	500f883a 	mov	r7,r10
 8002fac:	800af200 	call	800af20 <__divdf3>
 8002fb0:	1029883a 	mov	r20,r2
 8002fb4:	182b883a 	mov	r21,r3
 8002fb8:	d9800c17 	ldw	r6,48(sp)
 8002fbc:	30000626 	beq	r6,zero,8002fd8 <_dtoa_r+0x478>
 8002fc0:	a009883a 	mov	r4,r20
 8002fc4:	a80b883a 	mov	r5,r21
 8002fc8:	000d883a 	mov	r6,zero
 8002fcc:	01cffc34 	movhi	r7,16368
 8002fd0:	800ba040 	call	800ba04 <__ledf2>
 8002fd4:	10043216 	blt	r2,zero,80040a0 <_dtoa_r+0x1540>
 8002fd8:	8809883a 	mov	r4,r17
 8002fdc:	800cca80 	call	800cca8 <__floatsidf>
 8002fe0:	1009883a 	mov	r4,r2
 8002fe4:	180b883a 	mov	r5,r3
 8002fe8:	a00d883a 	mov	r6,r20
 8002fec:	a80f883a 	mov	r7,r21
 8002ff0:	800bae40 	call	800bae4 <__muldf3>
 8002ff4:	000d883a 	mov	r6,zero
 8002ff8:	1009883a 	mov	r4,r2
 8002ffc:	180b883a 	mov	r5,r3
 8003000:	01d00734 	movhi	r7,16412
 8003004:	800a6840 	call	800a684 <__adddf3>
 8003008:	1023883a 	mov	r17,r2
 800300c:	d9800617 	ldw	r6,24(sp)
 8003010:	00bf3034 	movhi	r2,64704
 8003014:	1885883a 	add	r2,r3,r2
 8003018:	d8800e15 	stw	r2,56(sp)
 800301c:	30032e26 	beq	r6,zero,8003cd8 <_dtoa_r+0x1178>
 8003020:	d8c00517 	ldw	r3,20(sp)
 8003024:	da800617 	ldw	r10,24(sp)
 8003028:	d8c01215 	stw	r3,72(sp)
 800302c:	d9000b17 	ldw	r4,44(sp)
 8003030:	2003b026 	beq	r4,zero,8003ef4 <_dtoa_r+0x1394>
 8003034:	50bfffc4 	addi	r2,r10,-1
 8003038:	100490fa 	slli	r2,r2,3
 800303c:	00c20074 	movhi	r3,2049
 8003040:	18fdcd04 	addi	r3,r3,-2252
 8003044:	1885883a 	add	r2,r3,r2
 8003048:	11800017 	ldw	r6,0(r2)
 800304c:	11c00117 	ldw	r7,4(r2)
 8003050:	d8800717 	ldw	r2,28(sp)
 8003054:	0009883a 	mov	r4,zero
 8003058:	014ff834 	movhi	r5,16352
 800305c:	da801615 	stw	r10,88(sp)
 8003060:	15c00044 	addi	r23,r2,1
 8003064:	800af200 	call	800af20 <__divdf3>
 8003068:	d9c00e17 	ldw	r7,56(sp)
 800306c:	880d883a 	mov	r6,r17
 8003070:	1009883a 	mov	r4,r2
 8003074:	180b883a 	mov	r5,r3
 8003078:	800c3500 	call	800c350 <__subdf3>
 800307c:	a80b883a 	mov	r5,r21
 8003080:	a009883a 	mov	r4,r20
 8003084:	d8c01015 	stw	r3,64(sp)
 8003088:	d8800e15 	stw	r2,56(sp)
 800308c:	800cc200 	call	800cc20 <__fixdfsi>
 8003090:	1009883a 	mov	r4,r2
 8003094:	d8801715 	stw	r2,92(sp)
 8003098:	800cca80 	call	800cca8 <__floatsidf>
 800309c:	a009883a 	mov	r4,r20
 80030a0:	a80b883a 	mov	r5,r21
 80030a4:	100d883a 	mov	r6,r2
 80030a8:	180f883a 	mov	r7,r3
 80030ac:	800c3500 	call	800c350 <__subdf3>
 80030b0:	da001717 	ldw	r8,92(sp)
 80030b4:	1829883a 	mov	r20,r3
 80030b8:	d8c00717 	ldw	r3,28(sp)
 80030bc:	d9000e17 	ldw	r4,56(sp)
 80030c0:	d9401017 	ldw	r5,64(sp)
 80030c4:	42000c04 	addi	r8,r8,48
 80030c8:	1023883a 	mov	r17,r2
 80030cc:	1a000005 	stb	r8,0(r3)
 80030d0:	880d883a 	mov	r6,r17
 80030d4:	a00f883a 	mov	r7,r20
 80030d8:	402b883a 	mov	r21,r8
 80030dc:	800b9240 	call	800b924 <__gedf2>
 80030e0:	00844516 	blt	zero,r2,80041f8 <_dtoa_r+0x1698>
 80030e4:	0009883a 	mov	r4,zero
 80030e8:	014ffc34 	movhi	r5,16368
 80030ec:	880d883a 	mov	r6,r17
 80030f0:	a00f883a 	mov	r7,r20
 80030f4:	800c3500 	call	800c350 <__subdf3>
 80030f8:	d9000e17 	ldw	r4,56(sp)
 80030fc:	d9401017 	ldw	r5,64(sp)
 8003100:	100d883a 	mov	r6,r2
 8003104:	180f883a 	mov	r7,r3
 8003108:	800b9240 	call	800b924 <__gedf2>
 800310c:	da801617 	ldw	r10,88(sp)
 8003110:	00843616 	blt	zero,r2,80041ec <_dtoa_r+0x168c>
 8003114:	00800044 	movi	r2,1
 8003118:	12806e0e 	bge	r2,r10,80032d4 <_dtoa_r+0x774>
 800311c:	d9000717 	ldw	r4,28(sp)
 8003120:	dd801315 	stw	r22,76(sp)
 8003124:	dc001115 	stw	r16,68(sp)
 8003128:	2295883a 	add	r10,r4,r10
 800312c:	dcc01415 	stw	r19,80(sp)
 8003130:	502d883a 	mov	r22,r10
 8003134:	dcc01017 	ldw	r19,64(sp)
 8003138:	b821883a 	mov	r16,r23
 800313c:	dc801015 	stw	r18,64(sp)
 8003140:	dc800e17 	ldw	r18,56(sp)
 8003144:	00000906 	br	800316c <_dtoa_r+0x60c>
 8003148:	800c3500 	call	800c350 <__subdf3>
 800314c:	1009883a 	mov	r4,r2
 8003150:	180b883a 	mov	r5,r3
 8003154:	900d883a 	mov	r6,r18
 8003158:	980f883a 	mov	r7,r19
 800315c:	800ba040 	call	800ba04 <__ledf2>
 8003160:	10040e16 	blt	r2,zero,800419c <_dtoa_r+0x163c>
 8003164:	b821883a 	mov	r16,r23
 8003168:	bd841026 	beq	r23,r22,80041ac <_dtoa_r+0x164c>
 800316c:	9009883a 	mov	r4,r18
 8003170:	980b883a 	mov	r5,r19
 8003174:	000d883a 	mov	r6,zero
 8003178:	01d00934 	movhi	r7,16420
 800317c:	800bae40 	call	800bae4 <__muldf3>
 8003180:	000d883a 	mov	r6,zero
 8003184:	01d00934 	movhi	r7,16420
 8003188:	8809883a 	mov	r4,r17
 800318c:	a00b883a 	mov	r5,r20
 8003190:	1025883a 	mov	r18,r2
 8003194:	1827883a 	mov	r19,r3
 8003198:	800bae40 	call	800bae4 <__muldf3>
 800319c:	180b883a 	mov	r5,r3
 80031a0:	1009883a 	mov	r4,r2
 80031a4:	1823883a 	mov	r17,r3
 80031a8:	1029883a 	mov	r20,r2
 80031ac:	800cc200 	call	800cc20 <__fixdfsi>
 80031b0:	1009883a 	mov	r4,r2
 80031b4:	102b883a 	mov	r21,r2
 80031b8:	800cca80 	call	800cca8 <__floatsidf>
 80031bc:	a009883a 	mov	r4,r20
 80031c0:	880b883a 	mov	r5,r17
 80031c4:	100d883a 	mov	r6,r2
 80031c8:	180f883a 	mov	r7,r3
 80031cc:	800c3500 	call	800c350 <__subdf3>
 80031d0:	ad400c04 	addi	r21,r21,48
 80031d4:	1009883a 	mov	r4,r2
 80031d8:	180b883a 	mov	r5,r3
 80031dc:	900d883a 	mov	r6,r18
 80031e0:	980f883a 	mov	r7,r19
 80031e4:	85400005 	stb	r21,0(r16)
 80031e8:	1023883a 	mov	r17,r2
 80031ec:	1829883a 	mov	r20,r3
 80031f0:	800ba040 	call	800ba04 <__ledf2>
 80031f4:	bdc00044 	addi	r23,r23,1
 80031f8:	0009883a 	mov	r4,zero
 80031fc:	014ffc34 	movhi	r5,16368
 8003200:	880d883a 	mov	r6,r17
 8003204:	a00f883a 	mov	r7,r20
 8003208:	103fcf0e 	bge	r2,zero,8003148 <__alt_data_end+0xfc003148>
 800320c:	d9801217 	ldw	r6,72(sp)
 8003210:	dc001117 	ldw	r16,68(sp)
 8003214:	d9800515 	stw	r6,20(sp)
 8003218:	8009883a 	mov	r4,r16
 800321c:	e00b883a 	mov	r5,fp
 8003220:	80062440 	call	8006244 <_Bfree>
 8003224:	d8c00517 	ldw	r3,20(sp)
 8003228:	d9002317 	ldw	r4,140(sp)
 800322c:	d9802517 	ldw	r6,148(sp)
 8003230:	b8000005 	stb	zero,0(r23)
 8003234:	18800044 	addi	r2,r3,1
 8003238:	20800015 	stw	r2,0(r4)
 800323c:	30027226 	beq	r6,zero,8003c08 <_dtoa_r+0x10a8>
 8003240:	35c00015 	stw	r23,0(r6)
 8003244:	d8800717 	ldw	r2,28(sp)
 8003248:	003e7406 	br	8002c1c <__alt_data_end+0xfc002c1c>
 800324c:	00800434 	movhi	r2,16
 8003250:	10bfffc4 	addi	r2,r2,-1
 8003254:	a8aa703a 	and	r21,r21,r2
 8003258:	a83e801e 	bne	r21,zero,8002c5c <__alt_data_end+0xfc002c5c>
 800325c:	00820074 	movhi	r2,2049
 8003260:	10bdae04 	addi	r2,r2,-2376
 8003264:	003e7f06 	br	8002c64 <__alt_data_end+0xfc002c64>
 8003268:	10c00204 	addi	r3,r2,8
 800326c:	003e8206 	br	8002c78 <__alt_data_end+0xfc002c78>
 8003270:	01400434 	movhi	r5,16
 8003274:	297fffc4 	addi	r5,r5,-1
 8003278:	994a703a 	and	r5,r19,r5
 800327c:	9009883a 	mov	r4,r18
 8003280:	8c7f0044 	addi	r17,r17,-1023
 8003284:	294ffc34 	orhi	r5,r5,16368
 8003288:	dd000217 	ldw	r20,8(sp)
 800328c:	d8000f15 	stw	zero,60(sp)
 8003290:	003e9f06 	br	8002d10 <__alt_data_end+0xfc002d10>
 8003294:	00820074 	movhi	r2,2049
 8003298:	10bda504 	addi	r2,r2,-2412
 800329c:	003e5f06 	br	8002c1c <__alt_data_end+0xfc002c1c>
 80032a0:	80001115 	stw	zero,68(r16)
 80032a4:	8009883a 	mov	r4,r16
 80032a8:	000b883a 	mov	r5,zero
 80032ac:	800619c0 	call	800619c <_Balloc>
 80032b0:	01bfffc4 	movi	r6,-1
 80032b4:	d8800715 	stw	r2,28(sp)
 80032b8:	80801015 	stw	r2,64(r16)
 80032bc:	00800044 	movi	r2,1
 80032c0:	d9800615 	stw	r6,24(sp)
 80032c4:	d8800b15 	stw	r2,44(sp)
 80032c8:	d8002215 	stw	zero,136(sp)
 80032cc:	d9800d15 	stw	r6,52(sp)
 80032d0:	d8000315 	stw	zero,12(sp)
 80032d4:	d8800117 	ldw	r2,4(sp)
 80032d8:	10008e16 	blt	r2,zero,8003514 <_dtoa_r+0x9b4>
 80032dc:	d9000517 	ldw	r4,20(sp)
 80032e0:	00c00384 	movi	r3,14
 80032e4:	19008b16 	blt	r3,r4,8003514 <_dtoa_r+0x9b4>
 80032e8:	200490fa 	slli	r2,r4,3
 80032ec:	00c20074 	movhi	r3,2049
 80032f0:	d9802217 	ldw	r6,136(sp)
 80032f4:	18fdcd04 	addi	r3,r3,-2252
 80032f8:	1885883a 	add	r2,r3,r2
 80032fc:	14400017 	ldw	r17,0(r2)
 8003300:	15000117 	ldw	r20,4(r2)
 8003304:	3001c716 	blt	r6,zero,8003a24 <_dtoa_r+0xec4>
 8003308:	880d883a 	mov	r6,r17
 800330c:	a00f883a 	mov	r7,r20
 8003310:	9009883a 	mov	r4,r18
 8003314:	980b883a 	mov	r5,r19
 8003318:	800af200 	call	800af20 <__divdf3>
 800331c:	180b883a 	mov	r5,r3
 8003320:	1009883a 	mov	r4,r2
 8003324:	800cc200 	call	800cc20 <__fixdfsi>
 8003328:	1009883a 	mov	r4,r2
 800332c:	102d883a 	mov	r22,r2
 8003330:	800cca80 	call	800cca8 <__floatsidf>
 8003334:	1009883a 	mov	r4,r2
 8003338:	180b883a 	mov	r5,r3
 800333c:	880d883a 	mov	r6,r17
 8003340:	a00f883a 	mov	r7,r20
 8003344:	800bae40 	call	800bae4 <__muldf3>
 8003348:	9009883a 	mov	r4,r18
 800334c:	980b883a 	mov	r5,r19
 8003350:	100d883a 	mov	r6,r2
 8003354:	180f883a 	mov	r7,r3
 8003358:	800c3500 	call	800c350 <__subdf3>
 800335c:	d9000717 	ldw	r4,28(sp)
 8003360:	d9800617 	ldw	r6,24(sp)
 8003364:	180b883a 	mov	r5,r3
 8003368:	b0c00c04 	addi	r3,r22,48
 800336c:	20c00005 	stb	r3,0(r4)
 8003370:	25c00044 	addi	r23,r4,1
 8003374:	01000044 	movi	r4,1
 8003378:	1011883a 	mov	r8,r2
 800337c:	2807883a 	mov	r3,r5
 8003380:	31003d26 	beq	r6,r4,8003478 <_dtoa_r+0x918>
 8003384:	000d883a 	mov	r6,zero
 8003388:	01d00934 	movhi	r7,16420
 800338c:	1009883a 	mov	r4,r2
 8003390:	800bae40 	call	800bae4 <__muldf3>
 8003394:	1009883a 	mov	r4,r2
 8003398:	180b883a 	mov	r5,r3
 800339c:	000d883a 	mov	r6,zero
 80033a0:	000f883a 	mov	r7,zero
 80033a4:	1027883a 	mov	r19,r2
 80033a8:	182b883a 	mov	r21,r3
 80033ac:	800b8a00 	call	800b8a0 <__eqdf2>
 80033b0:	103f9926 	beq	r2,zero,8003218 <__alt_data_end+0xfc003218>
 80033b4:	d8c00617 	ldw	r3,24(sp)
 80033b8:	d9000717 	ldw	r4,28(sp)
 80033bc:	b825883a 	mov	r18,r23
 80033c0:	18bfffc4 	addi	r2,r3,-1
 80033c4:	20ad883a 	add	r22,r4,r2
 80033c8:	dc000315 	stw	r16,12(sp)
 80033cc:	00000a06 	br	80033f8 <_dtoa_r+0x898>
 80033d0:	800bae40 	call	800bae4 <__muldf3>
 80033d4:	1009883a 	mov	r4,r2
 80033d8:	180b883a 	mov	r5,r3
 80033dc:	000d883a 	mov	r6,zero
 80033e0:	000f883a 	mov	r7,zero
 80033e4:	1027883a 	mov	r19,r2
 80033e8:	182b883a 	mov	r21,r3
 80033ec:	b825883a 	mov	r18,r23
 80033f0:	800b8a00 	call	800b8a0 <__eqdf2>
 80033f4:	10022626 	beq	r2,zero,8003c90 <_dtoa_r+0x1130>
 80033f8:	880d883a 	mov	r6,r17
 80033fc:	a00f883a 	mov	r7,r20
 8003400:	9809883a 	mov	r4,r19
 8003404:	a80b883a 	mov	r5,r21
 8003408:	800af200 	call	800af20 <__divdf3>
 800340c:	180b883a 	mov	r5,r3
 8003410:	1009883a 	mov	r4,r2
 8003414:	800cc200 	call	800cc20 <__fixdfsi>
 8003418:	1009883a 	mov	r4,r2
 800341c:	1021883a 	mov	r16,r2
 8003420:	800cca80 	call	800cca8 <__floatsidf>
 8003424:	1009883a 	mov	r4,r2
 8003428:	180b883a 	mov	r5,r3
 800342c:	880d883a 	mov	r6,r17
 8003430:	a00f883a 	mov	r7,r20
 8003434:	800bae40 	call	800bae4 <__muldf3>
 8003438:	9809883a 	mov	r4,r19
 800343c:	a80b883a 	mov	r5,r21
 8003440:	100d883a 	mov	r6,r2
 8003444:	180f883a 	mov	r7,r3
 8003448:	800c3500 	call	800c350 <__subdf3>
 800344c:	82000c04 	addi	r8,r16,48
 8003450:	92000005 	stb	r8,0(r18)
 8003454:	1009883a 	mov	r4,r2
 8003458:	180b883a 	mov	r5,r3
 800345c:	000d883a 	mov	r6,zero
 8003460:	01d00934 	movhi	r7,16420
 8003464:	1011883a 	mov	r8,r2
 8003468:	bdc00044 	addi	r23,r23,1
 800346c:	95bfd81e 	bne	r18,r22,80033d0 <__alt_data_end+0xfc0033d0>
 8003470:	802d883a 	mov	r22,r16
 8003474:	dc000317 	ldw	r16,12(sp)
 8003478:	4009883a 	mov	r4,r8
 800347c:	180b883a 	mov	r5,r3
 8003480:	400d883a 	mov	r6,r8
 8003484:	180f883a 	mov	r7,r3
 8003488:	800a6840 	call	800a684 <__adddf3>
 800348c:	8809883a 	mov	r4,r17
 8003490:	a00b883a 	mov	r5,r20
 8003494:	100d883a 	mov	r6,r2
 8003498:	180f883a 	mov	r7,r3
 800349c:	1027883a 	mov	r19,r2
 80034a0:	1825883a 	mov	r18,r3
 80034a4:	800ba040 	call	800ba04 <__ledf2>
 80034a8:	10000816 	blt	r2,zero,80034cc <_dtoa_r+0x96c>
 80034ac:	8809883a 	mov	r4,r17
 80034b0:	a00b883a 	mov	r5,r20
 80034b4:	980d883a 	mov	r6,r19
 80034b8:	900f883a 	mov	r7,r18
 80034bc:	800b8a00 	call	800b8a0 <__eqdf2>
 80034c0:	103f551e 	bne	r2,zero,8003218 <__alt_data_end+0xfc003218>
 80034c4:	b580004c 	andi	r22,r22,1
 80034c8:	b03f5326 	beq	r22,zero,8003218 <__alt_data_end+0xfc003218>
 80034cc:	bd7fffc3 	ldbu	r21,-1(r23)
 80034d0:	b8bfffc4 	addi	r2,r23,-1
 80034d4:	1007883a 	mov	r3,r2
 80034d8:	01400e44 	movi	r5,57
 80034dc:	d9800717 	ldw	r6,28(sp)
 80034e0:	00000506 	br	80034f8 <_dtoa_r+0x998>
 80034e4:	18ffffc4 	addi	r3,r3,-1
 80034e8:	30825e26 	beq	r6,r2,8003e64 <_dtoa_r+0x1304>
 80034ec:	1d400003 	ldbu	r21,0(r3)
 80034f0:	102f883a 	mov	r23,r2
 80034f4:	10bfffc4 	addi	r2,r2,-1
 80034f8:	a9003fcc 	andi	r4,r21,255
 80034fc:	2100201c 	xori	r4,r4,128
 8003500:	213fe004 	addi	r4,r4,-128
 8003504:	217ff726 	beq	r4,r5,80034e4 <__alt_data_end+0xfc0034e4>
 8003508:	aa000044 	addi	r8,r21,1
 800350c:	12000005 	stb	r8,0(r2)
 8003510:	003f4106 	br	8003218 <__alt_data_end+0xfc003218>
 8003514:	d8c00b17 	ldw	r3,44(sp)
 8003518:	18006726 	beq	r3,zero,80036b8 <_dtoa_r+0xb58>
 800351c:	d9000317 	ldw	r4,12(sp)
 8003520:	00c00044 	movi	r3,1
 8003524:	19016a0e 	bge	r3,r4,8003ad0 <_dtoa_r+0xf70>
 8003528:	d8800617 	ldw	r2,24(sp)
 800352c:	d8c00917 	ldw	r3,36(sp)
 8003530:	157fffc4 	addi	r21,r2,-1
 8003534:	1d420716 	blt	r3,r21,8003d54 <_dtoa_r+0x11f4>
 8003538:	1d6bc83a 	sub	r21,r3,r21
 800353c:	d8800617 	ldw	r2,24(sp)
 8003540:	1002c716 	blt	r2,zero,8004060 <_dtoa_r+0x1500>
 8003544:	dd000817 	ldw	r20,32(sp)
 8003548:	d8800617 	ldw	r2,24(sp)
 800354c:	d9800817 	ldw	r6,32(sp)
 8003550:	8009883a 	mov	r4,r16
 8003554:	01400044 	movi	r5,1
 8003558:	308d883a 	add	r6,r6,r2
 800355c:	d9800815 	stw	r6,32(sp)
 8003560:	b0ad883a 	add	r22,r22,r2
 8003564:	80065c40 	call	80065c4 <__i2b>
 8003568:	1023883a 	mov	r17,r2
 800356c:	a0000826 	beq	r20,zero,8003590 <_dtoa_r+0xa30>
 8003570:	0580070e 	bge	zero,r22,8003590 <_dtoa_r+0xa30>
 8003574:	b005883a 	mov	r2,r22
 8003578:	a5812016 	blt	r20,r22,80039fc <_dtoa_r+0xe9c>
 800357c:	d8c00817 	ldw	r3,32(sp)
 8003580:	a0a9c83a 	sub	r20,r20,r2
 8003584:	b0adc83a 	sub	r22,r22,r2
 8003588:	1887c83a 	sub	r3,r3,r2
 800358c:	d8c00815 	stw	r3,32(sp)
 8003590:	d9000917 	ldw	r4,36(sp)
 8003594:	0100140e 	bge	zero,r4,80035e8 <_dtoa_r+0xa88>
 8003598:	d9800b17 	ldw	r6,44(sp)
 800359c:	3001e526 	beq	r6,zero,8003d34 <_dtoa_r+0x11d4>
 80035a0:	05400e0e 	bge	zero,r21,80035dc <_dtoa_r+0xa7c>
 80035a4:	880b883a 	mov	r5,r17
 80035a8:	8009883a 	mov	r4,r16
 80035ac:	a80d883a 	mov	r6,r21
 80035b0:	80068900 	call	8006890 <__pow5mult>
 80035b4:	e00d883a 	mov	r6,fp
 80035b8:	8009883a 	mov	r4,r16
 80035bc:	100b883a 	mov	r5,r2
 80035c0:	1023883a 	mov	r17,r2
 80035c4:	80066000 	call	8006600 <__multiply>
 80035c8:	102f883a 	mov	r23,r2
 80035cc:	e00b883a 	mov	r5,fp
 80035d0:	8009883a 	mov	r4,r16
 80035d4:	80062440 	call	8006244 <_Bfree>
 80035d8:	b839883a 	mov	fp,r23
 80035dc:	d8800917 	ldw	r2,36(sp)
 80035e0:	154dc83a 	sub	r6,r2,r21
 80035e4:	3001281e 	bne	r6,zero,8003a88 <_dtoa_r+0xf28>
 80035e8:	05c00044 	movi	r23,1
 80035ec:	8009883a 	mov	r4,r16
 80035f0:	b80b883a 	mov	r5,r23
 80035f4:	80065c40 	call	80065c4 <__i2b>
 80035f8:	d8c00a17 	ldw	r3,40(sp)
 80035fc:	102b883a 	mov	r21,r2
 8003600:	00c0310e 	bge	zero,r3,80036c8 <_dtoa_r+0xb68>
 8003604:	8009883a 	mov	r4,r16
 8003608:	100b883a 	mov	r5,r2
 800360c:	180d883a 	mov	r6,r3
 8003610:	80068900 	call	8006890 <__pow5mult>
 8003614:	d9000317 	ldw	r4,12(sp)
 8003618:	102b883a 	mov	r21,r2
 800361c:	b9011f0e 	bge	r23,r4,8003a9c <_dtoa_r+0xf3c>
 8003620:	0027883a 	mov	r19,zero
 8003624:	a8800417 	ldw	r2,16(r21)
 8003628:	10800104 	addi	r2,r2,4
 800362c:	1085883a 	add	r2,r2,r2
 8003630:	1085883a 	add	r2,r2,r2
 8003634:	a885883a 	add	r2,r21,r2
 8003638:	11000017 	ldw	r4,0(r2)
 800363c:	80064ac0 	call	80064ac <__hi0bits>
 8003640:	00c00804 	movi	r3,32
 8003644:	1885c83a 	sub	r2,r3,r2
 8003648:	00002506 	br	80036e0 <_dtoa_r+0xb80>
 800364c:	01800044 	movi	r6,1
 8003650:	d9800c15 	stw	r6,48(sp)
 8003654:	003dec06 	br	8002e08 <__alt_data_end+0xfc002e08>
 8003658:	d8c00817 	ldw	r3,32(sp)
 800365c:	d9000517 	ldw	r4,20(sp)
 8003660:	d8000a15 	stw	zero,40(sp)
 8003664:	1907c83a 	sub	r3,r3,r4
 8003668:	010dc83a 	sub	r6,zero,r4
 800366c:	d8c00815 	stw	r3,32(sp)
 8003670:	d9800915 	stw	r6,36(sp)
 8003674:	003ded06 	br	8002e2c <__alt_data_end+0xfc002e2c>
 8003678:	05adc83a 	sub	r22,zero,r22
 800367c:	dd800815 	stw	r22,32(sp)
 8003680:	002d883a 	mov	r22,zero
 8003684:	003de406 	br	8002e18 <__alt_data_end+0xfc002e18>
 8003688:	d9000517 	ldw	r4,20(sp)
 800368c:	800cca80 	call	800cca8 <__floatsidf>
 8003690:	1009883a 	mov	r4,r2
 8003694:	180b883a 	mov	r5,r3
 8003698:	b00d883a 	mov	r6,r22
 800369c:	a80f883a 	mov	r7,r21
 80036a0:	800b8a00 	call	800b8a0 <__eqdf2>
 80036a4:	103dc726 	beq	r2,zero,8002dc4 <__alt_data_end+0xfc002dc4>
 80036a8:	d8800517 	ldw	r2,20(sp)
 80036ac:	10bfffc4 	addi	r2,r2,-1
 80036b0:	d8800515 	stw	r2,20(sp)
 80036b4:	003dc306 	br	8002dc4 <__alt_data_end+0xfc002dc4>
 80036b8:	dd400917 	ldw	r21,36(sp)
 80036bc:	dd000817 	ldw	r20,32(sp)
 80036c0:	0023883a 	mov	r17,zero
 80036c4:	003fa906 	br	800356c <__alt_data_end+0xfc00356c>
 80036c8:	d9800317 	ldw	r6,12(sp)
 80036cc:	b981670e 	bge	r23,r6,8003c6c <_dtoa_r+0x110c>
 80036d0:	0027883a 	mov	r19,zero
 80036d4:	d8c00a17 	ldw	r3,40(sp)
 80036d8:	183fd21e 	bne	r3,zero,8003624 <__alt_data_end+0xfc003624>
 80036dc:	00800044 	movi	r2,1
 80036e0:	1585883a 	add	r2,r2,r22
 80036e4:	108007cc 	andi	r2,r2,31
 80036e8:	10005f26 	beq	r2,zero,8003868 <_dtoa_r+0xd08>
 80036ec:	00c00804 	movi	r3,32
 80036f0:	1887c83a 	sub	r3,r3,r2
 80036f4:	01000104 	movi	r4,4
 80036f8:	20c2dd0e 	bge	r4,r3,8004270 <_dtoa_r+0x1710>
 80036fc:	d9000817 	ldw	r4,32(sp)
 8003700:	00c00704 	movi	r3,28
 8003704:	1885c83a 	sub	r2,r3,r2
 8003708:	2089883a 	add	r4,r4,r2
 800370c:	d9000815 	stw	r4,32(sp)
 8003710:	a0a9883a 	add	r20,r20,r2
 8003714:	b0ad883a 	add	r22,r22,r2
 8003718:	d8800817 	ldw	r2,32(sp)
 800371c:	0080050e 	bge	zero,r2,8003734 <_dtoa_r+0xbd4>
 8003720:	e00b883a 	mov	r5,fp
 8003724:	8009883a 	mov	r4,r16
 8003728:	100d883a 	mov	r6,r2
 800372c:	80069d00 	call	80069d0 <__lshift>
 8003730:	1039883a 	mov	fp,r2
 8003734:	0580050e 	bge	zero,r22,800374c <_dtoa_r+0xbec>
 8003738:	a80b883a 	mov	r5,r21
 800373c:	8009883a 	mov	r4,r16
 8003740:	b00d883a 	mov	r6,r22
 8003744:	80069d00 	call	80069d0 <__lshift>
 8003748:	102b883a 	mov	r21,r2
 800374c:	d8c00c17 	ldw	r3,48(sp)
 8003750:	1801161e 	bne	r3,zero,8003bac <_dtoa_r+0x104c>
 8003754:	d8c00617 	ldw	r3,24(sp)
 8003758:	00c12d0e 	bge	zero,r3,8003c10 <_dtoa_r+0x10b0>
 800375c:	d8c00b17 	ldw	r3,44(sp)
 8003760:	1800571e 	bne	r3,zero,80038c0 <_dtoa_r+0xd60>
 8003764:	dc800717 	ldw	r18,28(sp)
 8003768:	dcc00617 	ldw	r19,24(sp)
 800376c:	9029883a 	mov	r20,r18
 8003770:	00000206 	br	800377c <_dtoa_r+0xc1c>
 8003774:	800626c0 	call	800626c <__multadd>
 8003778:	1039883a 	mov	fp,r2
 800377c:	e009883a 	mov	r4,fp
 8003780:	a80b883a 	mov	r5,r21
 8003784:	80029380 	call	8002938 <quorem>
 8003788:	10800c04 	addi	r2,r2,48
 800378c:	90800005 	stb	r2,0(r18)
 8003790:	94800044 	addi	r18,r18,1
 8003794:	9507c83a 	sub	r3,r18,r20
 8003798:	8009883a 	mov	r4,r16
 800379c:	e00b883a 	mov	r5,fp
 80037a0:	01800284 	movi	r6,10
 80037a4:	000f883a 	mov	r7,zero
 80037a8:	1cfff216 	blt	r3,r19,8003774 <__alt_data_end+0xfc003774>
 80037ac:	1011883a 	mov	r8,r2
 80037b0:	d8800617 	ldw	r2,24(sp)
 80037b4:	00822e0e 	bge	zero,r2,8004070 <_dtoa_r+0x1510>
 80037b8:	d9000717 	ldw	r4,28(sp)
 80037bc:	0025883a 	mov	r18,zero
 80037c0:	20af883a 	add	r23,r4,r2
 80037c4:	e00b883a 	mov	r5,fp
 80037c8:	01800044 	movi	r6,1
 80037cc:	8009883a 	mov	r4,r16
 80037d0:	da001715 	stw	r8,92(sp)
 80037d4:	80069d00 	call	80069d0 <__lshift>
 80037d8:	1009883a 	mov	r4,r2
 80037dc:	a80b883a 	mov	r5,r21
 80037e0:	1039883a 	mov	fp,r2
 80037e4:	8006b180 	call	8006b18 <__mcmp>
 80037e8:	da001717 	ldw	r8,92(sp)
 80037ec:	00816e0e 	bge	zero,r2,8003da8 <_dtoa_r+0x1248>
 80037f0:	b93fffc3 	ldbu	r4,-1(r23)
 80037f4:	b8bfffc4 	addi	r2,r23,-1
 80037f8:	1007883a 	mov	r3,r2
 80037fc:	01800e44 	movi	r6,57
 8003800:	d9c00717 	ldw	r7,28(sp)
 8003804:	00000506 	br	800381c <_dtoa_r+0xcbc>
 8003808:	18ffffc4 	addi	r3,r3,-1
 800380c:	38811926 	beq	r7,r2,8003c74 <_dtoa_r+0x1114>
 8003810:	19000003 	ldbu	r4,0(r3)
 8003814:	102f883a 	mov	r23,r2
 8003818:	10bfffc4 	addi	r2,r2,-1
 800381c:	21403fcc 	andi	r5,r4,255
 8003820:	2940201c 	xori	r5,r5,128
 8003824:	297fe004 	addi	r5,r5,-128
 8003828:	29bff726 	beq	r5,r6,8003808 <__alt_data_end+0xfc003808>
 800382c:	21000044 	addi	r4,r4,1
 8003830:	11000005 	stb	r4,0(r2)
 8003834:	8009883a 	mov	r4,r16
 8003838:	a80b883a 	mov	r5,r21
 800383c:	80062440 	call	8006244 <_Bfree>
 8003840:	883e7526 	beq	r17,zero,8003218 <__alt_data_end+0xfc003218>
 8003844:	90000426 	beq	r18,zero,8003858 <_dtoa_r+0xcf8>
 8003848:	94400326 	beq	r18,r17,8003858 <_dtoa_r+0xcf8>
 800384c:	8009883a 	mov	r4,r16
 8003850:	900b883a 	mov	r5,r18
 8003854:	80062440 	call	8006244 <_Bfree>
 8003858:	8009883a 	mov	r4,r16
 800385c:	880b883a 	mov	r5,r17
 8003860:	80062440 	call	8006244 <_Bfree>
 8003864:	003e6c06 	br	8003218 <__alt_data_end+0xfc003218>
 8003868:	00800704 	movi	r2,28
 800386c:	d9800817 	ldw	r6,32(sp)
 8003870:	a0a9883a 	add	r20,r20,r2
 8003874:	b0ad883a 	add	r22,r22,r2
 8003878:	308d883a 	add	r6,r6,r2
 800387c:	d9800815 	stw	r6,32(sp)
 8003880:	003fa506 	br	8003718 <__alt_data_end+0xfc003718>
 8003884:	013efb84 	movi	r4,-1042
 8003888:	246bc83a 	sub	r21,r4,r17
 800388c:	9548983a 	sll	r4,r18,r21
 8003890:	003d1806 	br	8002cf4 <__alt_data_end+0xfc002cf4>
 8003894:	d8000c15 	stw	zero,48(sp)
 8003898:	003d5b06 	br	8002e08 <__alt_data_end+0xfc002e08>
 800389c:	880b883a 	mov	r5,r17
 80038a0:	8009883a 	mov	r4,r16
 80038a4:	01800284 	movi	r6,10
 80038a8:	000f883a 	mov	r7,zero
 80038ac:	800626c0 	call	800626c <__multadd>
 80038b0:	1023883a 	mov	r17,r2
 80038b4:	d8800d17 	ldw	r2,52(sp)
 80038b8:	0082550e 	bge	zero,r2,8004210 <_dtoa_r+0x16b0>
 80038bc:	d8800615 	stw	r2,24(sp)
 80038c0:	0500050e 	bge	zero,r20,80038d8 <_dtoa_r+0xd78>
 80038c4:	880b883a 	mov	r5,r17
 80038c8:	8009883a 	mov	r4,r16
 80038cc:	a00d883a 	mov	r6,r20
 80038d0:	80069d00 	call	80069d0 <__lshift>
 80038d4:	1023883a 	mov	r17,r2
 80038d8:	98016a1e 	bne	r19,zero,8003e84 <_dtoa_r+0x1324>
 80038dc:	8829883a 	mov	r20,r17
 80038e0:	d9000617 	ldw	r4,24(sp)
 80038e4:	dcc00717 	ldw	r19,28(sp)
 80038e8:	9480004c 	andi	r18,r18,1
 80038ec:	20bfffc4 	addi	r2,r4,-1
 80038f0:	9885883a 	add	r2,r19,r2
 80038f4:	d8800415 	stw	r2,16(sp)
 80038f8:	dc800615 	stw	r18,24(sp)
 80038fc:	e009883a 	mov	r4,fp
 8003900:	a80b883a 	mov	r5,r21
 8003904:	80029380 	call	8002938 <quorem>
 8003908:	e009883a 	mov	r4,fp
 800390c:	880b883a 	mov	r5,r17
 8003910:	102f883a 	mov	r23,r2
 8003914:	8006b180 	call	8006b18 <__mcmp>
 8003918:	8009883a 	mov	r4,r16
 800391c:	a80b883a 	mov	r5,r21
 8003920:	a00d883a 	mov	r6,r20
 8003924:	102d883a 	mov	r22,r2
 8003928:	8006b780 	call	8006b78 <__mdiff>
 800392c:	1007883a 	mov	r3,r2
 8003930:	10800317 	ldw	r2,12(r2)
 8003934:	bc800c04 	addi	r18,r23,48
 8003938:	1000971e 	bne	r2,zero,8003b98 <_dtoa_r+0x1038>
 800393c:	180b883a 	mov	r5,r3
 8003940:	e009883a 	mov	r4,fp
 8003944:	d8c01515 	stw	r3,84(sp)
 8003948:	8006b180 	call	8006b18 <__mcmp>
 800394c:	d8c01517 	ldw	r3,84(sp)
 8003950:	8009883a 	mov	r4,r16
 8003954:	d8801515 	stw	r2,84(sp)
 8003958:	180b883a 	mov	r5,r3
 800395c:	80062440 	call	8006244 <_Bfree>
 8003960:	d8801517 	ldw	r2,84(sp)
 8003964:	1000041e 	bne	r2,zero,8003978 <_dtoa_r+0xe18>
 8003968:	d9800317 	ldw	r6,12(sp)
 800396c:	3000021e 	bne	r6,zero,8003978 <_dtoa_r+0xe18>
 8003970:	d8c00617 	ldw	r3,24(sp)
 8003974:	18007626 	beq	r3,zero,8003b50 <_dtoa_r+0xff0>
 8003978:	b0005b16 	blt	r22,zero,8003ae8 <_dtoa_r+0xf88>
 800397c:	b000041e 	bne	r22,zero,8003990 <_dtoa_r+0xe30>
 8003980:	d9000317 	ldw	r4,12(sp)
 8003984:	2000021e 	bne	r4,zero,8003990 <_dtoa_r+0xe30>
 8003988:	d8c00617 	ldw	r3,24(sp)
 800398c:	18005626 	beq	r3,zero,8003ae8 <_dtoa_r+0xf88>
 8003990:	00814d16 	blt	zero,r2,8003ec8 <_dtoa_r+0x1368>
 8003994:	d8c00417 	ldw	r3,16(sp)
 8003998:	9d800044 	addi	r22,r19,1
 800399c:	9c800005 	stb	r18,0(r19)
 80039a0:	b02f883a 	mov	r23,r22
 80039a4:	98c14c26 	beq	r19,r3,8003ed8 <_dtoa_r+0x1378>
 80039a8:	e00b883a 	mov	r5,fp
 80039ac:	8009883a 	mov	r4,r16
 80039b0:	01800284 	movi	r6,10
 80039b4:	000f883a 	mov	r7,zero
 80039b8:	800626c0 	call	800626c <__multadd>
 80039bc:	1039883a 	mov	fp,r2
 80039c0:	8d006d26 	beq	r17,r20,8003b78 <_dtoa_r+0x1018>
 80039c4:	880b883a 	mov	r5,r17
 80039c8:	01800284 	movi	r6,10
 80039cc:	000f883a 	mov	r7,zero
 80039d0:	8009883a 	mov	r4,r16
 80039d4:	800626c0 	call	800626c <__multadd>
 80039d8:	a00b883a 	mov	r5,r20
 80039dc:	8009883a 	mov	r4,r16
 80039e0:	01800284 	movi	r6,10
 80039e4:	000f883a 	mov	r7,zero
 80039e8:	1023883a 	mov	r17,r2
 80039ec:	800626c0 	call	800626c <__multadd>
 80039f0:	1029883a 	mov	r20,r2
 80039f4:	b027883a 	mov	r19,r22
 80039f8:	003fc006 	br	80038fc <__alt_data_end+0xfc0038fc>
 80039fc:	a005883a 	mov	r2,r20
 8003a00:	003ede06 	br	800357c <__alt_data_end+0xfc00357c>
 8003a04:	01000044 	movi	r4,1
 8003a08:	d9000b15 	stw	r4,44(sp)
 8003a0c:	d9802217 	ldw	r6,136(sp)
 8003a10:	0180dc0e 	bge	zero,r6,8003d84 <_dtoa_r+0x1224>
 8003a14:	3023883a 	mov	r17,r6
 8003a18:	d9800d15 	stw	r6,52(sp)
 8003a1c:	d9800615 	stw	r6,24(sp)
 8003a20:	003d1e06 	br	8002e9c <__alt_data_end+0xfc002e9c>
 8003a24:	d8800617 	ldw	r2,24(sp)
 8003a28:	00be3716 	blt	zero,r2,8003308 <__alt_data_end+0xfc003308>
 8003a2c:	1000be1e 	bne	r2,zero,8003d28 <_dtoa_r+0x11c8>
 8003a30:	8809883a 	mov	r4,r17
 8003a34:	a00b883a 	mov	r5,r20
 8003a38:	000d883a 	mov	r6,zero
 8003a3c:	01d00534 	movhi	r7,16404
 8003a40:	800bae40 	call	800bae4 <__muldf3>
 8003a44:	1009883a 	mov	r4,r2
 8003a48:	180b883a 	mov	r5,r3
 8003a4c:	900d883a 	mov	r6,r18
 8003a50:	980f883a 	mov	r7,r19
 8003a54:	800b9240 	call	800b924 <__gedf2>
 8003a58:	002b883a 	mov	r21,zero
 8003a5c:	0023883a 	mov	r17,zero
 8003a60:	10007a16 	blt	r2,zero,8003c4c <_dtoa_r+0x10ec>
 8003a64:	d9002217 	ldw	r4,136(sp)
 8003a68:	ddc00717 	ldw	r23,28(sp)
 8003a6c:	0108303a 	nor	r4,zero,r4
 8003a70:	d9000515 	stw	r4,20(sp)
 8003a74:	8009883a 	mov	r4,r16
 8003a78:	a80b883a 	mov	r5,r21
 8003a7c:	80062440 	call	8006244 <_Bfree>
 8003a80:	883f751e 	bne	r17,zero,8003858 <__alt_data_end+0xfc003858>
 8003a84:	003de406 	br	8003218 <__alt_data_end+0xfc003218>
 8003a88:	e00b883a 	mov	r5,fp
 8003a8c:	8009883a 	mov	r4,r16
 8003a90:	80068900 	call	8006890 <__pow5mult>
 8003a94:	1039883a 	mov	fp,r2
 8003a98:	003ed306 	br	80035e8 <__alt_data_end+0xfc0035e8>
 8003a9c:	903ee01e 	bne	r18,zero,8003620 <__alt_data_end+0xfc003620>
 8003aa0:	00800434 	movhi	r2,16
 8003aa4:	10bfffc4 	addi	r2,r2,-1
 8003aa8:	9884703a 	and	r2,r19,r2
 8003aac:	103f081e 	bne	r2,zero,80036d0 <__alt_data_end+0xfc0036d0>
 8003ab0:	9cdffc2c 	andhi	r19,r19,32752
 8003ab4:	983f0626 	beq	r19,zero,80036d0 <__alt_data_end+0xfc0036d0>
 8003ab8:	d8800817 	ldw	r2,32(sp)
 8003abc:	b5800044 	addi	r22,r22,1
 8003ac0:	04c00044 	movi	r19,1
 8003ac4:	10800044 	addi	r2,r2,1
 8003ac8:	d8800815 	stw	r2,32(sp)
 8003acc:	003f0106 	br	80036d4 <__alt_data_end+0xfc0036d4>
 8003ad0:	d9800f17 	ldw	r6,60(sp)
 8003ad4:	30016826 	beq	r6,zero,8004078 <_dtoa_r+0x1518>
 8003ad8:	10810cc4 	addi	r2,r2,1075
 8003adc:	dd400917 	ldw	r21,36(sp)
 8003ae0:	dd000817 	ldw	r20,32(sp)
 8003ae4:	003e9906 	br	800354c <__alt_data_end+0xfc00354c>
 8003ae8:	9011883a 	mov	r8,r18
 8003aec:	4007883a 	mov	r3,r8
 8003af0:	e02d883a 	mov	r22,fp
 8003af4:	0080100e 	bge	zero,r2,8003b38 <_dtoa_r+0xfd8>
 8003af8:	01800044 	movi	r6,1
 8003afc:	8009883a 	mov	r4,r16
 8003b00:	e00b883a 	mov	r5,fp
 8003b04:	da001515 	stw	r8,84(sp)
 8003b08:	da001715 	stw	r8,92(sp)
 8003b0c:	80069d00 	call	80069d0 <__lshift>
 8003b10:	1009883a 	mov	r4,r2
 8003b14:	a80b883a 	mov	r5,r21
 8003b18:	102d883a 	mov	r22,r2
 8003b1c:	8006b180 	call	8006b18 <__mcmp>
 8003b20:	d8c01517 	ldw	r3,84(sp)
 8003b24:	da001717 	ldw	r8,92(sp)
 8003b28:	0081a50e 	bge	zero,r2,80041c0 <_dtoa_r+0x1660>
 8003b2c:	00800e44 	movi	r2,57
 8003b30:	40817b26 	beq	r8,r2,8004120 <_dtoa_r+0x15c0>
 8003b34:	40c00044 	addi	r3,r8,1
 8003b38:	8825883a 	mov	r18,r17
 8003b3c:	9dc00044 	addi	r23,r19,1
 8003b40:	98c00005 	stb	r3,0(r19)
 8003b44:	a023883a 	mov	r17,r20
 8003b48:	b039883a 	mov	fp,r22
 8003b4c:	003f3906 	br	8003834 <__alt_data_end+0xfc003834>
 8003b50:	00800e44 	movi	r2,57
 8003b54:	9011883a 	mov	r8,r18
 8003b58:	90817226 	beq	r18,r2,8004124 <_dtoa_r+0x15c4>
 8003b5c:	0580010e 	bge	zero,r22,8003b64 <_dtoa_r+0x1004>
 8003b60:	ba000c44 	addi	r8,r23,49
 8003b64:	8825883a 	mov	r18,r17
 8003b68:	9dc00044 	addi	r23,r19,1
 8003b6c:	9a000005 	stb	r8,0(r19)
 8003b70:	a023883a 	mov	r17,r20
 8003b74:	003f2f06 	br	8003834 <__alt_data_end+0xfc003834>
 8003b78:	880b883a 	mov	r5,r17
 8003b7c:	8009883a 	mov	r4,r16
 8003b80:	01800284 	movi	r6,10
 8003b84:	000f883a 	mov	r7,zero
 8003b88:	800626c0 	call	800626c <__multadd>
 8003b8c:	1023883a 	mov	r17,r2
 8003b90:	1029883a 	mov	r20,r2
 8003b94:	003f9706 	br	80039f4 <__alt_data_end+0xfc0039f4>
 8003b98:	8009883a 	mov	r4,r16
 8003b9c:	180b883a 	mov	r5,r3
 8003ba0:	80062440 	call	8006244 <_Bfree>
 8003ba4:	00800044 	movi	r2,1
 8003ba8:	003f7306 	br	8003978 <__alt_data_end+0xfc003978>
 8003bac:	e009883a 	mov	r4,fp
 8003bb0:	a80b883a 	mov	r5,r21
 8003bb4:	8006b180 	call	8006b18 <__mcmp>
 8003bb8:	103ee60e 	bge	r2,zero,8003754 <__alt_data_end+0xfc003754>
 8003bbc:	8009883a 	mov	r4,r16
 8003bc0:	e00b883a 	mov	r5,fp
 8003bc4:	01800284 	movi	r6,10
 8003bc8:	000f883a 	mov	r7,zero
 8003bcc:	800626c0 	call	800626c <__multadd>
 8003bd0:	d9000517 	ldw	r4,20(sp)
 8003bd4:	d9800b17 	ldw	r6,44(sp)
 8003bd8:	1039883a 	mov	fp,r2
 8003bdc:	213fffc4 	addi	r4,r4,-1
 8003be0:	d9000515 	stw	r4,20(sp)
 8003be4:	303f2d1e 	bne	r6,zero,800389c <__alt_data_end+0xfc00389c>
 8003be8:	d9000d17 	ldw	r4,52(sp)
 8003bec:	0101780e 	bge	zero,r4,80041d0 <_dtoa_r+0x1670>
 8003bf0:	d9000615 	stw	r4,24(sp)
 8003bf4:	003edb06 	br	8003764 <__alt_data_end+0xfc003764>
 8003bf8:	00800084 	movi	r2,2
 8003bfc:	30818e1e 	bne	r6,r2,8004238 <_dtoa_r+0x16d8>
 8003c00:	d8000b15 	stw	zero,44(sp)
 8003c04:	003f8106 	br	8003a0c <__alt_data_end+0xfc003a0c>
 8003c08:	d8800717 	ldw	r2,28(sp)
 8003c0c:	003c0306 	br	8002c1c <__alt_data_end+0xfc002c1c>
 8003c10:	d9000317 	ldw	r4,12(sp)
 8003c14:	00800084 	movi	r2,2
 8003c18:	113ed00e 	bge	r2,r4,800375c <__alt_data_end+0xfc00375c>
 8003c1c:	d8c00617 	ldw	r3,24(sp)
 8003c20:	183f901e 	bne	r3,zero,8003a64 <__alt_data_end+0xfc003a64>
 8003c24:	a80b883a 	mov	r5,r21
 8003c28:	8009883a 	mov	r4,r16
 8003c2c:	01800144 	movi	r6,5
 8003c30:	000f883a 	mov	r7,zero
 8003c34:	800626c0 	call	800626c <__multadd>
 8003c38:	e009883a 	mov	r4,fp
 8003c3c:	100b883a 	mov	r5,r2
 8003c40:	102b883a 	mov	r21,r2
 8003c44:	8006b180 	call	8006b18 <__mcmp>
 8003c48:	00bf860e 	bge	zero,r2,8003a64 <__alt_data_end+0xfc003a64>
 8003c4c:	d9800717 	ldw	r6,28(sp)
 8003c50:	00800c44 	movi	r2,49
 8003c54:	30800005 	stb	r2,0(r6)
 8003c58:	d8800517 	ldw	r2,20(sp)
 8003c5c:	35c00044 	addi	r23,r6,1
 8003c60:	10800044 	addi	r2,r2,1
 8003c64:	d8800515 	stw	r2,20(sp)
 8003c68:	003f8206 	br	8003a74 <__alt_data_end+0xfc003a74>
 8003c6c:	903e981e 	bne	r18,zero,80036d0 <__alt_data_end+0xfc0036d0>
 8003c70:	003f8b06 	br	8003aa0 <__alt_data_end+0xfc003aa0>
 8003c74:	d9800517 	ldw	r6,20(sp)
 8003c78:	d8c00717 	ldw	r3,28(sp)
 8003c7c:	00800c44 	movi	r2,49
 8003c80:	31800044 	addi	r6,r6,1
 8003c84:	d9800515 	stw	r6,20(sp)
 8003c88:	18800005 	stb	r2,0(r3)
 8003c8c:	003ee906 	br	8003834 <__alt_data_end+0xfc003834>
 8003c90:	dc000317 	ldw	r16,12(sp)
 8003c94:	003d6006 	br	8003218 <__alt_data_end+0xfc003218>
 8003c98:	8809883a 	mov	r4,r17
 8003c9c:	800cca80 	call	800cca8 <__floatsidf>
 8003ca0:	a009883a 	mov	r4,r20
 8003ca4:	a80b883a 	mov	r5,r21
 8003ca8:	100d883a 	mov	r6,r2
 8003cac:	180f883a 	mov	r7,r3
 8003cb0:	800bae40 	call	800bae4 <__muldf3>
 8003cb4:	1009883a 	mov	r4,r2
 8003cb8:	180b883a 	mov	r5,r3
 8003cbc:	000d883a 	mov	r6,zero
 8003cc0:	01d00734 	movhi	r7,16412
 8003cc4:	800a6840 	call	800a684 <__adddf3>
 8003cc8:	1023883a 	mov	r17,r2
 8003ccc:	00bf3034 	movhi	r2,64704
 8003cd0:	1885883a 	add	r2,r3,r2
 8003cd4:	d8800e15 	stw	r2,56(sp)
 8003cd8:	a009883a 	mov	r4,r20
 8003cdc:	a80b883a 	mov	r5,r21
 8003ce0:	000d883a 	mov	r6,zero
 8003ce4:	01d00534 	movhi	r7,16404
 8003ce8:	800c3500 	call	800c350 <__subdf3>
 8003cec:	d9c00e17 	ldw	r7,56(sp)
 8003cf0:	1009883a 	mov	r4,r2
 8003cf4:	180b883a 	mov	r5,r3
 8003cf8:	880d883a 	mov	r6,r17
 8003cfc:	102b883a 	mov	r21,r2
 8003d00:	1829883a 	mov	r20,r3
 8003d04:	800b9240 	call	800b924 <__gedf2>
 8003d08:	00807716 	blt	zero,r2,8003ee8 <_dtoa_r+0x1388>
 8003d0c:	d8800e17 	ldw	r2,56(sp)
 8003d10:	a809883a 	mov	r4,r21
 8003d14:	a00b883a 	mov	r5,r20
 8003d18:	11e0003c 	xorhi	r7,r2,32768
 8003d1c:	880d883a 	mov	r6,r17
 8003d20:	800ba040 	call	800ba04 <__ledf2>
 8003d24:	103d6b0e 	bge	r2,zero,80032d4 <__alt_data_end+0xfc0032d4>
 8003d28:	002b883a 	mov	r21,zero
 8003d2c:	0023883a 	mov	r17,zero
 8003d30:	003f4c06 	br	8003a64 <__alt_data_end+0xfc003a64>
 8003d34:	d9800917 	ldw	r6,36(sp)
 8003d38:	e00b883a 	mov	r5,fp
 8003d3c:	8009883a 	mov	r4,r16
 8003d40:	80068900 	call	8006890 <__pow5mult>
 8003d44:	1039883a 	mov	fp,r2
 8003d48:	003e2706 	br	80035e8 <__alt_data_end+0xfc0035e8>
 8003d4c:	d8000b15 	stw	zero,44(sp)
 8003d50:	003c4906 	br	8002e78 <__alt_data_end+0xfc002e78>
 8003d54:	d9000917 	ldw	r4,36(sp)
 8003d58:	d9800a17 	ldw	r6,40(sp)
 8003d5c:	dd400915 	stw	r21,36(sp)
 8003d60:	a905c83a 	sub	r2,r21,r4
 8003d64:	308d883a 	add	r6,r6,r2
 8003d68:	d9800a15 	stw	r6,40(sp)
 8003d6c:	002b883a 	mov	r21,zero
 8003d70:	003df206 	br	800353c <__alt_data_end+0xfc00353c>
 8003d74:	dc800e15 	stw	r18,56(sp)
 8003d78:	982b883a 	mov	r21,r19
 8003d7c:	04400084 	movi	r17,2
 8003d80:	003c7406 	br	8002f54 <__alt_data_end+0xfc002f54>
 8003d84:	04400044 	movi	r17,1
 8003d88:	dc400d15 	stw	r17,52(sp)
 8003d8c:	dc400615 	stw	r17,24(sp)
 8003d90:	dc402215 	stw	r17,136(sp)
 8003d94:	80001115 	stw	zero,68(r16)
 8003d98:	000b883a 	mov	r5,zero
 8003d9c:	003c4a06 	br	8002ec8 <__alt_data_end+0xfc002ec8>
 8003da0:	3023883a 	mov	r17,r6
 8003da4:	003ffb06 	br	8003d94 <__alt_data_end+0xfc003d94>
 8003da8:	1000021e 	bne	r2,zero,8003db4 <_dtoa_r+0x1254>
 8003dac:	4200004c 	andi	r8,r8,1
 8003db0:	403e8f1e 	bne	r8,zero,80037f0 <__alt_data_end+0xfc0037f0>
 8003db4:	01000c04 	movi	r4,48
 8003db8:	00000106 	br	8003dc0 <_dtoa_r+0x1260>
 8003dbc:	102f883a 	mov	r23,r2
 8003dc0:	b8bfffc4 	addi	r2,r23,-1
 8003dc4:	10c00007 	ldb	r3,0(r2)
 8003dc8:	193ffc26 	beq	r3,r4,8003dbc <__alt_data_end+0xfc003dbc>
 8003dcc:	003e9906 	br	8003834 <__alt_data_end+0xfc003834>
 8003dd0:	d9000517 	ldw	r4,20(sp)
 8003dd4:	012fc83a 	sub	r23,zero,r4
 8003dd8:	b800ad26 	beq	r23,zero,8004090 <_dtoa_r+0x1530>
 8003ddc:	b88003cc 	andi	r2,r23,15
 8003de0:	100490fa 	slli	r2,r2,3
 8003de4:	00c20074 	movhi	r3,2049
 8003de8:	18fdcd04 	addi	r3,r3,-2252
 8003dec:	1885883a 	add	r2,r3,r2
 8003df0:	11800017 	ldw	r6,0(r2)
 8003df4:	11c00117 	ldw	r7,4(r2)
 8003df8:	b82fd13a 	srai	r23,r23,4
 8003dfc:	9009883a 	mov	r4,r18
 8003e00:	980b883a 	mov	r5,r19
 8003e04:	800bae40 	call	800bae4 <__muldf3>
 8003e08:	1029883a 	mov	r20,r2
 8003e0c:	182b883a 	mov	r21,r3
 8003e10:	b800f426 	beq	r23,zero,80041e4 <_dtoa_r+0x1684>
 8003e14:	02020074 	movhi	r8,2049
 8003e18:	423dc304 	addi	r8,r8,-2292
 8003e1c:	8029883a 	mov	r20,r16
 8003e20:	04400084 	movi	r17,2
 8003e24:	4021883a 	mov	r16,r8
 8003e28:	b980004c 	andi	r6,r23,1
 8003e2c:	1009883a 	mov	r4,r2
 8003e30:	b82fd07a 	srai	r23,r23,1
 8003e34:	180b883a 	mov	r5,r3
 8003e38:	30000426 	beq	r6,zero,8003e4c <_dtoa_r+0x12ec>
 8003e3c:	81800017 	ldw	r6,0(r16)
 8003e40:	81c00117 	ldw	r7,4(r16)
 8003e44:	8c400044 	addi	r17,r17,1
 8003e48:	800bae40 	call	800bae4 <__muldf3>
 8003e4c:	84000204 	addi	r16,r16,8
 8003e50:	b83ff51e 	bne	r23,zero,8003e28 <__alt_data_end+0xfc003e28>
 8003e54:	a021883a 	mov	r16,r20
 8003e58:	182b883a 	mov	r21,r3
 8003e5c:	1029883a 	mov	r20,r2
 8003e60:	003c5506 	br	8002fb8 <__alt_data_end+0xfc002fb8>
 8003e64:	d9800517 	ldw	r6,20(sp)
 8003e68:	d9000717 	ldw	r4,28(sp)
 8003e6c:	00c00c04 	movi	r3,48
 8003e70:	31800044 	addi	r6,r6,1
 8003e74:	d9800515 	stw	r6,20(sp)
 8003e78:	20c00005 	stb	r3,0(r4)
 8003e7c:	02000c44 	movi	r8,49
 8003e80:	003da206 	br	800350c <__alt_data_end+0xfc00350c>
 8003e84:	89400117 	ldw	r5,4(r17)
 8003e88:	8009883a 	mov	r4,r16
 8003e8c:	800619c0 	call	800619c <_Balloc>
 8003e90:	89800417 	ldw	r6,16(r17)
 8003e94:	11000304 	addi	r4,r2,12
 8003e98:	89400304 	addi	r5,r17,12
 8003e9c:	31800084 	addi	r6,r6,2
 8003ea0:	318d883a 	add	r6,r6,r6
 8003ea4:	318d883a 	add	r6,r6,r6
 8003ea8:	1027883a 	mov	r19,r2
 8003eac:	8005de40 	call	8005de4 <memcpy>
 8003eb0:	8009883a 	mov	r4,r16
 8003eb4:	980b883a 	mov	r5,r19
 8003eb8:	01800044 	movi	r6,1
 8003ebc:	80069d00 	call	80069d0 <__lshift>
 8003ec0:	1029883a 	mov	r20,r2
 8003ec4:	003e8606 	br	80038e0 <__alt_data_end+0xfc0038e0>
 8003ec8:	00800e44 	movi	r2,57
 8003ecc:	90809526 	beq	r18,r2,8004124 <_dtoa_r+0x15c4>
 8003ed0:	92000044 	addi	r8,r18,1
 8003ed4:	003f2306 	br	8003b64 <__alt_data_end+0xfc003b64>
 8003ed8:	9011883a 	mov	r8,r18
 8003edc:	8825883a 	mov	r18,r17
 8003ee0:	a023883a 	mov	r17,r20
 8003ee4:	003e3706 	br	80037c4 <__alt_data_end+0xfc0037c4>
 8003ee8:	002b883a 	mov	r21,zero
 8003eec:	0023883a 	mov	r17,zero
 8003ef0:	003f5606 	br	8003c4c <__alt_data_end+0xfc003c4c>
 8003ef4:	51bfffc4 	addi	r6,r10,-1
 8003ef8:	300490fa 	slli	r2,r6,3
 8003efc:	00c20074 	movhi	r3,2049
 8003f00:	18fdcd04 	addi	r3,r3,-2252
 8003f04:	1885883a 	add	r2,r3,r2
 8003f08:	d9c00e17 	ldw	r7,56(sp)
 8003f0c:	11000017 	ldw	r4,0(r2)
 8003f10:	11400117 	ldw	r5,4(r2)
 8003f14:	d8800717 	ldw	r2,28(sp)
 8003f18:	d9801015 	stw	r6,64(sp)
 8003f1c:	880d883a 	mov	r6,r17
 8003f20:	da801615 	stw	r10,88(sp)
 8003f24:	15c00044 	addi	r23,r2,1
 8003f28:	800bae40 	call	800bae4 <__muldf3>
 8003f2c:	a80b883a 	mov	r5,r21
 8003f30:	a009883a 	mov	r4,r20
 8003f34:	d8c01115 	stw	r3,68(sp)
 8003f38:	d8800e15 	stw	r2,56(sp)
 8003f3c:	800cc200 	call	800cc20 <__fixdfsi>
 8003f40:	1009883a 	mov	r4,r2
 8003f44:	1023883a 	mov	r17,r2
 8003f48:	800cca80 	call	800cca8 <__floatsidf>
 8003f4c:	a009883a 	mov	r4,r20
 8003f50:	a80b883a 	mov	r5,r21
 8003f54:	100d883a 	mov	r6,r2
 8003f58:	180f883a 	mov	r7,r3
 8003f5c:	800c3500 	call	800c350 <__subdf3>
 8003f60:	1813883a 	mov	r9,r3
 8003f64:	d8c00717 	ldw	r3,28(sp)
 8003f68:	8c400c04 	addi	r17,r17,48
 8003f6c:	1011883a 	mov	r8,r2
 8003f70:	1c400005 	stb	r17,0(r3)
 8003f74:	da801617 	ldw	r10,88(sp)
 8003f78:	00800044 	movi	r2,1
 8003f7c:	50802326 	beq	r10,r2,800400c <_dtoa_r+0x14ac>
 8003f80:	d8800717 	ldw	r2,28(sp)
 8003f84:	b82b883a 	mov	r21,r23
 8003f88:	dc001315 	stw	r16,76(sp)
 8003f8c:	12a9883a 	add	r20,r2,r10
 8003f90:	4807883a 	mov	r3,r9
 8003f94:	4005883a 	mov	r2,r8
 8003f98:	dc801415 	stw	r18,80(sp)
 8003f9c:	000d883a 	mov	r6,zero
 8003fa0:	01d00934 	movhi	r7,16420
 8003fa4:	1009883a 	mov	r4,r2
 8003fa8:	180b883a 	mov	r5,r3
 8003fac:	800bae40 	call	800bae4 <__muldf3>
 8003fb0:	180b883a 	mov	r5,r3
 8003fb4:	1009883a 	mov	r4,r2
 8003fb8:	1821883a 	mov	r16,r3
 8003fbc:	1025883a 	mov	r18,r2
 8003fc0:	800cc200 	call	800cc20 <__fixdfsi>
 8003fc4:	1009883a 	mov	r4,r2
 8003fc8:	1023883a 	mov	r17,r2
 8003fcc:	800cca80 	call	800cca8 <__floatsidf>
 8003fd0:	9009883a 	mov	r4,r18
 8003fd4:	800b883a 	mov	r5,r16
 8003fd8:	100d883a 	mov	r6,r2
 8003fdc:	180f883a 	mov	r7,r3
 8003fe0:	8c400c04 	addi	r17,r17,48
 8003fe4:	800c3500 	call	800c350 <__subdf3>
 8003fe8:	ad400044 	addi	r21,r21,1
 8003fec:	ac7fffc5 	stb	r17,-1(r21)
 8003ff0:	ad3fea1e 	bne	r21,r20,8003f9c <__alt_data_end+0xfc003f9c>
 8003ff4:	1813883a 	mov	r9,r3
 8003ff8:	d8c01017 	ldw	r3,64(sp)
 8003ffc:	dc001317 	ldw	r16,76(sp)
 8004000:	dc801417 	ldw	r18,80(sp)
 8004004:	1011883a 	mov	r8,r2
 8004008:	b8ef883a 	add	r23,r23,r3
 800400c:	d9000e17 	ldw	r4,56(sp)
 8004010:	d9401117 	ldw	r5,68(sp)
 8004014:	000d883a 	mov	r6,zero
 8004018:	01cff834 	movhi	r7,16352
 800401c:	da001715 	stw	r8,92(sp)
 8004020:	da401515 	stw	r9,84(sp)
 8004024:	800a6840 	call	800a684 <__adddf3>
 8004028:	da001717 	ldw	r8,92(sp)
 800402c:	da401517 	ldw	r9,84(sp)
 8004030:	1009883a 	mov	r4,r2
 8004034:	400d883a 	mov	r6,r8
 8004038:	480f883a 	mov	r7,r9
 800403c:	180b883a 	mov	r5,r3
 8004040:	800ba040 	call	800ba04 <__ledf2>
 8004044:	da001717 	ldw	r8,92(sp)
 8004048:	da401517 	ldw	r9,84(sp)
 800404c:	10003b0e 	bge	r2,zero,800413c <_dtoa_r+0x15dc>
 8004050:	d9001217 	ldw	r4,72(sp)
 8004054:	bd7fffc3 	ldbu	r21,-1(r23)
 8004058:	d9000515 	stw	r4,20(sp)
 800405c:	003d1c06 	br	80034d0 <__alt_data_end+0xfc0034d0>
 8004060:	d8c00817 	ldw	r3,32(sp)
 8004064:	18a9c83a 	sub	r20,r3,r2
 8004068:	0005883a 	mov	r2,zero
 800406c:	003d3706 	br	800354c <__alt_data_end+0xfc00354c>
 8004070:	00800044 	movi	r2,1
 8004074:	003dd006 	br	80037b8 <__alt_data_end+0xfc0037b8>
 8004078:	d8c00217 	ldw	r3,8(sp)
 800407c:	00800d84 	movi	r2,54
 8004080:	dd400917 	ldw	r21,36(sp)
 8004084:	10c5c83a 	sub	r2,r2,r3
 8004088:	dd000817 	ldw	r20,32(sp)
 800408c:	003d2f06 	br	800354c <__alt_data_end+0xfc00354c>
 8004090:	9029883a 	mov	r20,r18
 8004094:	982b883a 	mov	r21,r19
 8004098:	04400084 	movi	r17,2
 800409c:	003bc606 	br	8002fb8 <__alt_data_end+0xfc002fb8>
 80040a0:	d8800617 	ldw	r2,24(sp)
 80040a4:	103efc26 	beq	r2,zero,8003c98 <__alt_data_end+0xfc003c98>
 80040a8:	d8c00d17 	ldw	r3,52(sp)
 80040ac:	00fc890e 	bge	zero,r3,80032d4 <__alt_data_end+0xfc0032d4>
 80040b0:	a80b883a 	mov	r5,r21
 80040b4:	a009883a 	mov	r4,r20
 80040b8:	000d883a 	mov	r6,zero
 80040bc:	01d00934 	movhi	r7,16420
 80040c0:	800bae40 	call	800bae4 <__muldf3>
 80040c4:	89000044 	addi	r4,r17,1
 80040c8:	1029883a 	mov	r20,r2
 80040cc:	182b883a 	mov	r21,r3
 80040d0:	800cca80 	call	800cca8 <__floatsidf>
 80040d4:	a009883a 	mov	r4,r20
 80040d8:	a80b883a 	mov	r5,r21
 80040dc:	100d883a 	mov	r6,r2
 80040e0:	180f883a 	mov	r7,r3
 80040e4:	800bae40 	call	800bae4 <__muldf3>
 80040e8:	1009883a 	mov	r4,r2
 80040ec:	180b883a 	mov	r5,r3
 80040f0:	000d883a 	mov	r6,zero
 80040f4:	01d00734 	movhi	r7,16412
 80040f8:	800a6840 	call	800a684 <__adddf3>
 80040fc:	d9000517 	ldw	r4,20(sp)
 8004100:	1023883a 	mov	r17,r2
 8004104:	00bf3034 	movhi	r2,64704
 8004108:	213fffc4 	addi	r4,r4,-1
 800410c:	1885883a 	add	r2,r3,r2
 8004110:	d9001215 	stw	r4,72(sp)
 8004114:	d8800e15 	stw	r2,56(sp)
 8004118:	da800d17 	ldw	r10,52(sp)
 800411c:	003bc306 	br	800302c <__alt_data_end+0xfc00302c>
 8004120:	b039883a 	mov	fp,r22
 8004124:	01000e44 	movi	r4,57
 8004128:	8825883a 	mov	r18,r17
 800412c:	9dc00044 	addi	r23,r19,1
 8004130:	99000005 	stb	r4,0(r19)
 8004134:	a023883a 	mov	r17,r20
 8004138:	003dae06 	br	80037f4 <__alt_data_end+0xfc0037f4>
 800413c:	d9800e17 	ldw	r6,56(sp)
 8004140:	d9c01117 	ldw	r7,68(sp)
 8004144:	0009883a 	mov	r4,zero
 8004148:	014ff834 	movhi	r5,16352
 800414c:	da001715 	stw	r8,92(sp)
 8004150:	da401515 	stw	r9,84(sp)
 8004154:	800c3500 	call	800c350 <__subdf3>
 8004158:	da001717 	ldw	r8,92(sp)
 800415c:	da401517 	ldw	r9,84(sp)
 8004160:	1009883a 	mov	r4,r2
 8004164:	180b883a 	mov	r5,r3
 8004168:	400d883a 	mov	r6,r8
 800416c:	480f883a 	mov	r7,r9
 8004170:	800b9240 	call	800b924 <__gedf2>
 8004174:	00bc570e 	bge	zero,r2,80032d4 <__alt_data_end+0xfc0032d4>
 8004178:	01000c04 	movi	r4,48
 800417c:	00000106 	br	8004184 <_dtoa_r+0x1624>
 8004180:	102f883a 	mov	r23,r2
 8004184:	b8bfffc4 	addi	r2,r23,-1
 8004188:	10c00007 	ldb	r3,0(r2)
 800418c:	193ffc26 	beq	r3,r4,8004180 <__alt_data_end+0xfc004180>
 8004190:	d9801217 	ldw	r6,72(sp)
 8004194:	d9800515 	stw	r6,20(sp)
 8004198:	003c1f06 	br	8003218 <__alt_data_end+0xfc003218>
 800419c:	d8801217 	ldw	r2,72(sp)
 80041a0:	dc001117 	ldw	r16,68(sp)
 80041a4:	d8800515 	stw	r2,20(sp)
 80041a8:	003cc906 	br	80034d0 <__alt_data_end+0xfc0034d0>
 80041ac:	dd801317 	ldw	r22,76(sp)
 80041b0:	dc001117 	ldw	r16,68(sp)
 80041b4:	dcc01417 	ldw	r19,80(sp)
 80041b8:	dc801017 	ldw	r18,64(sp)
 80041bc:	003c4506 	br	80032d4 <__alt_data_end+0xfc0032d4>
 80041c0:	103e5d1e 	bne	r2,zero,8003b38 <__alt_data_end+0xfc003b38>
 80041c4:	4080004c 	andi	r2,r8,1
 80041c8:	103e5b26 	beq	r2,zero,8003b38 <__alt_data_end+0xfc003b38>
 80041cc:	003e5706 	br	8003b2c <__alt_data_end+0xfc003b2c>
 80041d0:	d8c00317 	ldw	r3,12(sp)
 80041d4:	00800084 	movi	r2,2
 80041d8:	10c00a16 	blt	r2,r3,8004204 <_dtoa_r+0x16a4>
 80041dc:	d9000d17 	ldw	r4,52(sp)
 80041e0:	003e8306 	br	8003bf0 <__alt_data_end+0xfc003bf0>
 80041e4:	04400084 	movi	r17,2
 80041e8:	003b7306 	br	8002fb8 <__alt_data_end+0xfc002fb8>
 80041ec:	d9801217 	ldw	r6,72(sp)
 80041f0:	d9800515 	stw	r6,20(sp)
 80041f4:	003cb606 	br	80034d0 <__alt_data_end+0xfc0034d0>
 80041f8:	d9001217 	ldw	r4,72(sp)
 80041fc:	d9000515 	stw	r4,20(sp)
 8004200:	003c0506 	br	8003218 <__alt_data_end+0xfc003218>
 8004204:	d9800d17 	ldw	r6,52(sp)
 8004208:	d9800615 	stw	r6,24(sp)
 800420c:	003e8306 	br	8003c1c <__alt_data_end+0xfc003c1c>
 8004210:	d9800317 	ldw	r6,12(sp)
 8004214:	00800084 	movi	r2,2
 8004218:	11800216 	blt	r2,r6,8004224 <_dtoa_r+0x16c4>
 800421c:	d8800d17 	ldw	r2,52(sp)
 8004220:	003da606 	br	80038bc <__alt_data_end+0xfc0038bc>
 8004224:	d8800d17 	ldw	r2,52(sp)
 8004228:	d8800615 	stw	r2,24(sp)
 800422c:	003e7b06 	br	8003c1c <__alt_data_end+0xfc003c1c>
 8004230:	05000044 	movi	r20,1
 8004234:	003b0506 	br	8002e4c <__alt_data_end+0xfc002e4c>
 8004238:	8009883a 	mov	r4,r16
 800423c:	80001115 	stw	zero,68(r16)
 8004240:	000b883a 	mov	r5,zero
 8004244:	800619c0 	call	800619c <_Balloc>
 8004248:	d8800715 	stw	r2,28(sp)
 800424c:	d8c00717 	ldw	r3,28(sp)
 8004250:	00bfffc4 	movi	r2,-1
 8004254:	01000044 	movi	r4,1
 8004258:	d8800615 	stw	r2,24(sp)
 800425c:	80c01015 	stw	r3,64(r16)
 8004260:	d9000b15 	stw	r4,44(sp)
 8004264:	d8002215 	stw	zero,136(sp)
 8004268:	d8800d15 	stw	r2,52(sp)
 800426c:	003c1906 	br	80032d4 <__alt_data_end+0xfc0032d4>
 8004270:	193d2926 	beq	r3,r4,8003718 <__alt_data_end+0xfc003718>
 8004274:	00c00f04 	movi	r3,60
 8004278:	1885c83a 	sub	r2,r3,r2
 800427c:	003d7b06 	br	800386c <__alt_data_end+0xfc00386c>
 8004280:	000b883a 	mov	r5,zero
 8004284:	003b1006 	br	8002ec8 <__alt_data_end+0xfc002ec8>

08004288 <_fflush_r>:
 8004288:	defffb04 	addi	sp,sp,-20
 800428c:	dcc00315 	stw	r19,12(sp)
 8004290:	dc000015 	stw	r16,0(sp)
 8004294:	dfc00415 	stw	ra,16(sp)
 8004298:	dc800215 	stw	r18,8(sp)
 800429c:	dc400115 	stw	r17,4(sp)
 80042a0:	2027883a 	mov	r19,r4
 80042a4:	2821883a 	mov	r16,r5
 80042a8:	20000226 	beq	r4,zero,80042b4 <_fflush_r+0x2c>
 80042ac:	20800e17 	ldw	r2,56(r4)
 80042b0:	10005326 	beq	r2,zero,8004400 <_fflush_r+0x178>
 80042b4:	8080030b 	ldhu	r2,12(r16)
 80042b8:	10ffffcc 	andi	r3,r2,65535
 80042bc:	18e0001c 	xori	r3,r3,32768
 80042c0:	18e00004 	addi	r3,r3,-32768
 80042c4:	18002c26 	beq	r3,zero,8004378 <_fflush_r+0xf0>
 80042c8:	10c0020c 	andi	r3,r2,8
 80042cc:	1800321e 	bne	r3,zero,8004398 <_fflush_r+0x110>
 80042d0:	80c00117 	ldw	r3,4(r16)
 80042d4:	10820014 	ori	r2,r2,2048
 80042d8:	8080030d 	sth	r2,12(r16)
 80042dc:	00c0570e 	bge	zero,r3,800443c <_fflush_r+0x1b4>
 80042e0:	82000a17 	ldw	r8,40(r16)
 80042e4:	40002426 	beq	r8,zero,8004378 <_fflush_r+0xf0>
 80042e8:	9c400017 	ldw	r17,0(r19)
 80042ec:	10c4000c 	andi	r3,r2,4096
 80042f0:	98000015 	stw	zero,0(r19)
 80042f4:	18004626 	beq	r3,zero,8004410 <_fflush_r+0x188>
 80042f8:	81801417 	ldw	r6,80(r16)
 80042fc:	10c0010c 	andi	r3,r2,4
 8004300:	18000626 	beq	r3,zero,800431c <_fflush_r+0x94>
 8004304:	80c00117 	ldw	r3,4(r16)
 8004308:	80800c17 	ldw	r2,48(r16)
 800430c:	30cdc83a 	sub	r6,r6,r3
 8004310:	10000226 	beq	r2,zero,800431c <_fflush_r+0x94>
 8004314:	80800f17 	ldw	r2,60(r16)
 8004318:	308dc83a 	sub	r6,r6,r2
 800431c:	81400717 	ldw	r5,28(r16)
 8004320:	9809883a 	mov	r4,r19
 8004324:	000f883a 	mov	r7,zero
 8004328:	403ee83a 	callr	r8
 800432c:	00ffffc4 	movi	r3,-1
 8004330:	10c04526 	beq	r2,r3,8004448 <_fflush_r+0x1c0>
 8004334:	80c0030b 	ldhu	r3,12(r16)
 8004338:	81000417 	ldw	r4,16(r16)
 800433c:	80000115 	stw	zero,4(r16)
 8004340:	197dffcc 	andi	r5,r3,63487
 8004344:	8140030d 	sth	r5,12(r16)
 8004348:	81000015 	stw	r4,0(r16)
 800434c:	18c4000c 	andi	r3,r3,4096
 8004350:	18000126 	beq	r3,zero,8004358 <_fflush_r+0xd0>
 8004354:	80801415 	stw	r2,80(r16)
 8004358:	81400c17 	ldw	r5,48(r16)
 800435c:	9c400015 	stw	r17,0(r19)
 8004360:	28000526 	beq	r5,zero,8004378 <_fflush_r+0xf0>
 8004364:	80801004 	addi	r2,r16,64
 8004368:	28800226 	beq	r5,r2,8004374 <_fflush_r+0xec>
 800436c:	9809883a 	mov	r4,r19
 8004370:	80049b80 	call	80049b8 <_free_r>
 8004374:	80000c15 	stw	zero,48(r16)
 8004378:	0005883a 	mov	r2,zero
 800437c:	dfc00417 	ldw	ra,16(sp)
 8004380:	dcc00317 	ldw	r19,12(sp)
 8004384:	dc800217 	ldw	r18,8(sp)
 8004388:	dc400117 	ldw	r17,4(sp)
 800438c:	dc000017 	ldw	r16,0(sp)
 8004390:	dec00504 	addi	sp,sp,20
 8004394:	f800283a 	ret
 8004398:	84800417 	ldw	r18,16(r16)
 800439c:	903ff626 	beq	r18,zero,8004378 <__alt_data_end+0xfc004378>
 80043a0:	84400017 	ldw	r17,0(r16)
 80043a4:	108000cc 	andi	r2,r2,3
 80043a8:	84800015 	stw	r18,0(r16)
 80043ac:	8ca3c83a 	sub	r17,r17,r18
 80043b0:	10001526 	beq	r2,zero,8004408 <_fflush_r+0x180>
 80043b4:	0005883a 	mov	r2,zero
 80043b8:	80800215 	stw	r2,8(r16)
 80043bc:	04400316 	blt	zero,r17,80043cc <_fflush_r+0x144>
 80043c0:	003fed06 	br	8004378 <__alt_data_end+0xfc004378>
 80043c4:	90a5883a 	add	r18,r18,r2
 80043c8:	047feb0e 	bge	zero,r17,8004378 <__alt_data_end+0xfc004378>
 80043cc:	80800917 	ldw	r2,36(r16)
 80043d0:	81400717 	ldw	r5,28(r16)
 80043d4:	880f883a 	mov	r7,r17
 80043d8:	900d883a 	mov	r6,r18
 80043dc:	9809883a 	mov	r4,r19
 80043e0:	103ee83a 	callr	r2
 80043e4:	88a3c83a 	sub	r17,r17,r2
 80043e8:	00bff616 	blt	zero,r2,80043c4 <__alt_data_end+0xfc0043c4>
 80043ec:	80c0030b 	ldhu	r3,12(r16)
 80043f0:	00bfffc4 	movi	r2,-1
 80043f4:	18c01014 	ori	r3,r3,64
 80043f8:	80c0030d 	sth	r3,12(r16)
 80043fc:	003fdf06 	br	800437c <__alt_data_end+0xfc00437c>
 8004400:	80048440 	call	8004844 <__sinit>
 8004404:	003fab06 	br	80042b4 <__alt_data_end+0xfc0042b4>
 8004408:	80800517 	ldw	r2,20(r16)
 800440c:	003fea06 	br	80043b8 <__alt_data_end+0xfc0043b8>
 8004410:	81400717 	ldw	r5,28(r16)
 8004414:	000d883a 	mov	r6,zero
 8004418:	9809883a 	mov	r4,r19
 800441c:	01c00044 	movi	r7,1
 8004420:	403ee83a 	callr	r8
 8004424:	100d883a 	mov	r6,r2
 8004428:	00bfffc4 	movi	r2,-1
 800442c:	30801326 	beq	r6,r2,800447c <_fflush_r+0x1f4>
 8004430:	8080030b 	ldhu	r2,12(r16)
 8004434:	82000a17 	ldw	r8,40(r16)
 8004438:	003fb006 	br	80042fc <__alt_data_end+0xfc0042fc>
 800443c:	80c00f17 	ldw	r3,60(r16)
 8004440:	00ffa716 	blt	zero,r3,80042e0 <__alt_data_end+0xfc0042e0>
 8004444:	003fcc06 	br	8004378 <__alt_data_end+0xfc004378>
 8004448:	98c00017 	ldw	r3,0(r19)
 800444c:	183fb926 	beq	r3,zero,8004334 <__alt_data_end+0xfc004334>
 8004450:	01000744 	movi	r4,29
 8004454:	19000226 	beq	r3,r4,8004460 <_fflush_r+0x1d8>
 8004458:	01000584 	movi	r4,22
 800445c:	1900101e 	bne	r3,r4,80044a0 <_fflush_r+0x218>
 8004460:	8080030b 	ldhu	r2,12(r16)
 8004464:	80c00417 	ldw	r3,16(r16)
 8004468:	80000115 	stw	zero,4(r16)
 800446c:	10bdffcc 	andi	r2,r2,63487
 8004470:	8080030d 	sth	r2,12(r16)
 8004474:	80c00015 	stw	r3,0(r16)
 8004478:	003fb706 	br	8004358 <__alt_data_end+0xfc004358>
 800447c:	98800017 	ldw	r2,0(r19)
 8004480:	103feb26 	beq	r2,zero,8004430 <__alt_data_end+0xfc004430>
 8004484:	00c00744 	movi	r3,29
 8004488:	10c00226 	beq	r2,r3,8004494 <_fflush_r+0x20c>
 800448c:	00c00584 	movi	r3,22
 8004490:	10ffd61e 	bne	r2,r3,80043ec <__alt_data_end+0xfc0043ec>
 8004494:	9c400015 	stw	r17,0(r19)
 8004498:	0005883a 	mov	r2,zero
 800449c:	003fb706 	br	800437c <__alt_data_end+0xfc00437c>
 80044a0:	80c0030b 	ldhu	r3,12(r16)
 80044a4:	18c01014 	ori	r3,r3,64
 80044a8:	80c0030d 	sth	r3,12(r16)
 80044ac:	003fb306 	br	800437c <__alt_data_end+0xfc00437c>

080044b0 <fflush>:
 80044b0:	20000526 	beq	r4,zero,80044c8 <fflush+0x18>
 80044b4:	00820074 	movhi	r2,2049
 80044b8:	10850004 	addi	r2,r2,5120
 80044bc:	200b883a 	mov	r5,r4
 80044c0:	11000017 	ldw	r4,0(r2)
 80044c4:	80042881 	jmpi	8004288 <_fflush_r>
 80044c8:	00820074 	movhi	r2,2049
 80044cc:	1084ff04 	addi	r2,r2,5116
 80044d0:	11000017 	ldw	r4,0(r2)
 80044d4:	01420034 	movhi	r5,2048
 80044d8:	2950a204 	addi	r5,r5,17032
 80044dc:	80052041 	jmpi	8005204 <_fwalk_reent>

080044e0 <__fp_lock>:
 80044e0:	0005883a 	mov	r2,zero
 80044e4:	f800283a 	ret

080044e8 <__fp_unlock>:
 80044e8:	0005883a 	mov	r2,zero
 80044ec:	f800283a 	ret

080044f0 <_cleanup_r>:
 80044f0:	01420074 	movhi	r5,2049
 80044f4:	29648404 	addi	r5,r5,-28144
 80044f8:	800514c1 	jmpi	800514c <_fwalk>

080044fc <__sinit.part.1>:
 80044fc:	defff604 	addi	sp,sp,-40
 8004500:	00c20034 	movhi	r3,2048
 8004504:	dfc00915 	stw	ra,36(sp)
 8004508:	df000815 	stw	fp,32(sp)
 800450c:	ddc00715 	stw	r23,28(sp)
 8004510:	dd800615 	stw	r22,24(sp)
 8004514:	dd400515 	stw	r21,20(sp)
 8004518:	dd000415 	stw	r20,16(sp)
 800451c:	dcc00315 	stw	r19,12(sp)
 8004520:	dc800215 	stw	r18,8(sp)
 8004524:	dc400115 	stw	r17,4(sp)
 8004528:	dc000015 	stw	r16,0(sp)
 800452c:	18d13c04 	addi	r3,r3,17648
 8004530:	24000117 	ldw	r16,4(r4)
 8004534:	20c00f15 	stw	r3,60(r4)
 8004538:	07000044 	movi	fp,1
 800453c:	00c000c4 	movi	r3,3
 8004540:	2080bb04 	addi	r2,r4,748
 8004544:	20c0b915 	stw	r3,740(r4)
 8004548:	27000e15 	stw	fp,56(r4)
 800454c:	2080ba15 	stw	r2,744(r4)
 8004550:	2000b815 	stw	zero,736(r4)
 8004554:	05c00204 	movi	r23,8
 8004558:	00800104 	movi	r2,4
 800455c:	2025883a 	mov	r18,r4
 8004560:	b80d883a 	mov	r6,r23
 8004564:	81001704 	addi	r4,r16,92
 8004568:	000b883a 	mov	r5,zero
 800456c:	80000015 	stw	zero,0(r16)
 8004570:	80000115 	stw	zero,4(r16)
 8004574:	80000215 	stw	zero,8(r16)
 8004578:	8080030d 	sth	r2,12(r16)
 800457c:	80001915 	stw	zero,100(r16)
 8004580:	8000038d 	sth	zero,14(r16)
 8004584:	80000415 	stw	zero,16(r16)
 8004588:	80000515 	stw	zero,20(r16)
 800458c:	80000615 	stw	zero,24(r16)
 8004590:	80060780 	call	8006078 <memset>
 8004594:	05820034 	movhi	r22,2048
 8004598:	94400217 	ldw	r17,8(r18)
 800459c:	05420034 	movhi	r21,2048
 80045a0:	05020034 	movhi	r20,2048
 80045a4:	04c20034 	movhi	r19,2048
 80045a8:	b59e1304 	addi	r22,r22,30796
 80045ac:	ad5e2a04 	addi	r21,r21,30888
 80045b0:	a51e4904 	addi	r20,r20,31012
 80045b4:	9cde6004 	addi	r19,r19,31104
 80045b8:	85800815 	stw	r22,32(r16)
 80045bc:	85400915 	stw	r21,36(r16)
 80045c0:	85000a15 	stw	r20,40(r16)
 80045c4:	84c00b15 	stw	r19,44(r16)
 80045c8:	84000715 	stw	r16,28(r16)
 80045cc:	00800284 	movi	r2,10
 80045d0:	89001704 	addi	r4,r17,92
 80045d4:	b80d883a 	mov	r6,r23
 80045d8:	000b883a 	mov	r5,zero
 80045dc:	88000015 	stw	zero,0(r17)
 80045e0:	88000115 	stw	zero,4(r17)
 80045e4:	88000215 	stw	zero,8(r17)
 80045e8:	8880030d 	sth	r2,12(r17)
 80045ec:	88001915 	stw	zero,100(r17)
 80045f0:	8f00038d 	sth	fp,14(r17)
 80045f4:	88000415 	stw	zero,16(r17)
 80045f8:	88000515 	stw	zero,20(r17)
 80045fc:	88000615 	stw	zero,24(r17)
 8004600:	80060780 	call	8006078 <memset>
 8004604:	94000317 	ldw	r16,12(r18)
 8004608:	00800484 	movi	r2,18
 800460c:	8c400715 	stw	r17,28(r17)
 8004610:	8d800815 	stw	r22,32(r17)
 8004614:	8d400915 	stw	r21,36(r17)
 8004618:	8d000a15 	stw	r20,40(r17)
 800461c:	8cc00b15 	stw	r19,44(r17)
 8004620:	8080030d 	sth	r2,12(r16)
 8004624:	00800084 	movi	r2,2
 8004628:	80000015 	stw	zero,0(r16)
 800462c:	80000115 	stw	zero,4(r16)
 8004630:	80000215 	stw	zero,8(r16)
 8004634:	80001915 	stw	zero,100(r16)
 8004638:	8080038d 	sth	r2,14(r16)
 800463c:	80000415 	stw	zero,16(r16)
 8004640:	80000515 	stw	zero,20(r16)
 8004644:	80000615 	stw	zero,24(r16)
 8004648:	81001704 	addi	r4,r16,92
 800464c:	000b883a 	mov	r5,zero
 8004650:	b80d883a 	mov	r6,r23
 8004654:	80060780 	call	8006078 <memset>
 8004658:	84000715 	stw	r16,28(r16)
 800465c:	85800815 	stw	r22,32(r16)
 8004660:	85400915 	stw	r21,36(r16)
 8004664:	85000a15 	stw	r20,40(r16)
 8004668:	84c00b15 	stw	r19,44(r16)
 800466c:	dfc00917 	ldw	ra,36(sp)
 8004670:	df000817 	ldw	fp,32(sp)
 8004674:	ddc00717 	ldw	r23,28(sp)
 8004678:	dd800617 	ldw	r22,24(sp)
 800467c:	dd400517 	ldw	r21,20(sp)
 8004680:	dd000417 	ldw	r20,16(sp)
 8004684:	dcc00317 	ldw	r19,12(sp)
 8004688:	dc800217 	ldw	r18,8(sp)
 800468c:	dc400117 	ldw	r17,4(sp)
 8004690:	dc000017 	ldw	r16,0(sp)
 8004694:	dec00a04 	addi	sp,sp,40
 8004698:	f800283a 	ret

0800469c <__sfmoreglue>:
 800469c:	defffc04 	addi	sp,sp,-16
 80046a0:	dc800215 	stw	r18,8(sp)
 80046a4:	2825883a 	mov	r18,r5
 80046a8:	dc000015 	stw	r16,0(sp)
 80046ac:	01401a04 	movi	r5,104
 80046b0:	2021883a 	mov	r16,r4
 80046b4:	9009883a 	mov	r4,r18
 80046b8:	dfc00315 	stw	ra,12(sp)
 80046bc:	dc400115 	stw	r17,4(sp)
 80046c0:	800a65c0 	call	800a65c <__mulsi3>
 80046c4:	8009883a 	mov	r4,r16
 80046c8:	11400304 	addi	r5,r2,12
 80046cc:	1023883a 	mov	r17,r2
 80046d0:	80055540 	call	8005554 <_malloc_r>
 80046d4:	1021883a 	mov	r16,r2
 80046d8:	10000726 	beq	r2,zero,80046f8 <__sfmoreglue+0x5c>
 80046dc:	11000304 	addi	r4,r2,12
 80046e0:	10000015 	stw	zero,0(r2)
 80046e4:	14800115 	stw	r18,4(r2)
 80046e8:	11000215 	stw	r4,8(r2)
 80046ec:	000b883a 	mov	r5,zero
 80046f0:	880d883a 	mov	r6,r17
 80046f4:	80060780 	call	8006078 <memset>
 80046f8:	8005883a 	mov	r2,r16
 80046fc:	dfc00317 	ldw	ra,12(sp)
 8004700:	dc800217 	ldw	r18,8(sp)
 8004704:	dc400117 	ldw	r17,4(sp)
 8004708:	dc000017 	ldw	r16,0(sp)
 800470c:	dec00404 	addi	sp,sp,16
 8004710:	f800283a 	ret

08004714 <__sfp>:
 8004714:	00820074 	movhi	r2,2049
 8004718:	defffb04 	addi	sp,sp,-20
 800471c:	1084ff04 	addi	r2,r2,5116
 8004720:	dc800215 	stw	r18,8(sp)
 8004724:	14800017 	ldw	r18,0(r2)
 8004728:	dcc00315 	stw	r19,12(sp)
 800472c:	dfc00415 	stw	ra,16(sp)
 8004730:	90800e17 	ldw	r2,56(r18)
 8004734:	dc400115 	stw	r17,4(sp)
 8004738:	dc000015 	stw	r16,0(sp)
 800473c:	2027883a 	mov	r19,r4
 8004740:	1000021e 	bne	r2,zero,800474c <__sfp+0x38>
 8004744:	9009883a 	mov	r4,r18
 8004748:	80044fc0 	call	80044fc <__sinit.part.1>
 800474c:	9480b804 	addi	r18,r18,736
 8004750:	047fffc4 	movi	r17,-1
 8004754:	91400117 	ldw	r5,4(r18)
 8004758:	94000217 	ldw	r16,8(r18)
 800475c:	297fffc4 	addi	r5,r5,-1
 8004760:	28000a16 	blt	r5,zero,800478c <__sfp+0x78>
 8004764:	8080030f 	ldh	r2,12(r16)
 8004768:	10000c26 	beq	r2,zero,800479c <__sfp+0x88>
 800476c:	80c01d04 	addi	r3,r16,116
 8004770:	00000206 	br	800477c <__sfp+0x68>
 8004774:	18bfe60f 	ldh	r2,-104(r3)
 8004778:	10000826 	beq	r2,zero,800479c <__sfp+0x88>
 800477c:	297fffc4 	addi	r5,r5,-1
 8004780:	1c3ffd04 	addi	r16,r3,-12
 8004784:	18c01a04 	addi	r3,r3,104
 8004788:	2c7ffa1e 	bne	r5,r17,8004774 <__alt_data_end+0xfc004774>
 800478c:	90800017 	ldw	r2,0(r18)
 8004790:	10001d26 	beq	r2,zero,8004808 <__sfp+0xf4>
 8004794:	1025883a 	mov	r18,r2
 8004798:	003fee06 	br	8004754 <__alt_data_end+0xfc004754>
 800479c:	00bfffc4 	movi	r2,-1
 80047a0:	8080038d 	sth	r2,14(r16)
 80047a4:	00800044 	movi	r2,1
 80047a8:	8080030d 	sth	r2,12(r16)
 80047ac:	80001915 	stw	zero,100(r16)
 80047b0:	80000015 	stw	zero,0(r16)
 80047b4:	80000215 	stw	zero,8(r16)
 80047b8:	80000115 	stw	zero,4(r16)
 80047bc:	80000415 	stw	zero,16(r16)
 80047c0:	80000515 	stw	zero,20(r16)
 80047c4:	80000615 	stw	zero,24(r16)
 80047c8:	81001704 	addi	r4,r16,92
 80047cc:	000b883a 	mov	r5,zero
 80047d0:	01800204 	movi	r6,8
 80047d4:	80060780 	call	8006078 <memset>
 80047d8:	8005883a 	mov	r2,r16
 80047dc:	80000c15 	stw	zero,48(r16)
 80047e0:	80000d15 	stw	zero,52(r16)
 80047e4:	80001115 	stw	zero,68(r16)
 80047e8:	80001215 	stw	zero,72(r16)
 80047ec:	dfc00417 	ldw	ra,16(sp)
 80047f0:	dcc00317 	ldw	r19,12(sp)
 80047f4:	dc800217 	ldw	r18,8(sp)
 80047f8:	dc400117 	ldw	r17,4(sp)
 80047fc:	dc000017 	ldw	r16,0(sp)
 8004800:	dec00504 	addi	sp,sp,20
 8004804:	f800283a 	ret
 8004808:	9809883a 	mov	r4,r19
 800480c:	01400104 	movi	r5,4
 8004810:	800469c0 	call	800469c <__sfmoreglue>
 8004814:	90800015 	stw	r2,0(r18)
 8004818:	103fde1e 	bne	r2,zero,8004794 <__alt_data_end+0xfc004794>
 800481c:	00800304 	movi	r2,12
 8004820:	98800015 	stw	r2,0(r19)
 8004824:	0005883a 	mov	r2,zero
 8004828:	003ff006 	br	80047ec <__alt_data_end+0xfc0047ec>

0800482c <_cleanup>:
 800482c:	00820074 	movhi	r2,2049
 8004830:	1084ff04 	addi	r2,r2,5116
 8004834:	11000017 	ldw	r4,0(r2)
 8004838:	01420074 	movhi	r5,2049
 800483c:	29648404 	addi	r5,r5,-28144
 8004840:	800514c1 	jmpi	800514c <_fwalk>

08004844 <__sinit>:
 8004844:	20800e17 	ldw	r2,56(r4)
 8004848:	10000126 	beq	r2,zero,8004850 <__sinit+0xc>
 800484c:	f800283a 	ret
 8004850:	80044fc1 	jmpi	80044fc <__sinit.part.1>

08004854 <__sfp_lock_acquire>:
 8004854:	f800283a 	ret

08004858 <__sfp_lock_release>:
 8004858:	f800283a 	ret

0800485c <__sinit_lock_acquire>:
 800485c:	f800283a 	ret

08004860 <__sinit_lock_release>:
 8004860:	f800283a 	ret

08004864 <__fp_lock_all>:
 8004864:	00820074 	movhi	r2,2049
 8004868:	10850004 	addi	r2,r2,5120
 800486c:	11000017 	ldw	r4,0(r2)
 8004870:	01420034 	movhi	r5,2048
 8004874:	29513804 	addi	r5,r5,17632
 8004878:	800514c1 	jmpi	800514c <_fwalk>

0800487c <__fp_unlock_all>:
 800487c:	00820074 	movhi	r2,2049
 8004880:	10850004 	addi	r2,r2,5120
 8004884:	11000017 	ldw	r4,0(r2)
 8004888:	01420034 	movhi	r5,2048
 800488c:	29513a04 	addi	r5,r5,17640
 8004890:	800514c1 	jmpi	800514c <_fwalk>

08004894 <_malloc_trim_r>:
 8004894:	defffb04 	addi	sp,sp,-20
 8004898:	dcc00315 	stw	r19,12(sp)
 800489c:	04c20074 	movhi	r19,2049
 80048a0:	dc800215 	stw	r18,8(sp)
 80048a4:	dc400115 	stw	r17,4(sp)
 80048a8:	dc000015 	stw	r16,0(sp)
 80048ac:	dfc00415 	stw	ra,16(sp)
 80048b0:	2821883a 	mov	r16,r5
 80048b4:	9cff7b04 	addi	r19,r19,-532
 80048b8:	2025883a 	mov	r18,r4
 80048bc:	800d4600 	call	800d460 <__malloc_lock>
 80048c0:	98800217 	ldw	r2,8(r19)
 80048c4:	14400117 	ldw	r17,4(r2)
 80048c8:	00bfff04 	movi	r2,-4
 80048cc:	88a2703a 	and	r17,r17,r2
 80048d0:	8c21c83a 	sub	r16,r17,r16
 80048d4:	8403fbc4 	addi	r16,r16,4079
 80048d8:	8020d33a 	srli	r16,r16,12
 80048dc:	0083ffc4 	movi	r2,4095
 80048e0:	843fffc4 	addi	r16,r16,-1
 80048e4:	8020933a 	slli	r16,r16,12
 80048e8:	1400060e 	bge	r2,r16,8004904 <_malloc_trim_r+0x70>
 80048ec:	9009883a 	mov	r4,r18
 80048f0:	000b883a 	mov	r5,zero
 80048f4:	80077f80 	call	80077f8 <_sbrk_r>
 80048f8:	98c00217 	ldw	r3,8(r19)
 80048fc:	1c47883a 	add	r3,r3,r17
 8004900:	10c00a26 	beq	r2,r3,800492c <_malloc_trim_r+0x98>
 8004904:	9009883a 	mov	r4,r18
 8004908:	800d4800 	call	800d480 <__malloc_unlock>
 800490c:	0005883a 	mov	r2,zero
 8004910:	dfc00417 	ldw	ra,16(sp)
 8004914:	dcc00317 	ldw	r19,12(sp)
 8004918:	dc800217 	ldw	r18,8(sp)
 800491c:	dc400117 	ldw	r17,4(sp)
 8004920:	dc000017 	ldw	r16,0(sp)
 8004924:	dec00504 	addi	sp,sp,20
 8004928:	f800283a 	ret
 800492c:	9009883a 	mov	r4,r18
 8004930:	040bc83a 	sub	r5,zero,r16
 8004934:	80077f80 	call	80077f8 <_sbrk_r>
 8004938:	00ffffc4 	movi	r3,-1
 800493c:	10c00d26 	beq	r2,r3,8004974 <_malloc_trim_r+0xe0>
 8004940:	00c20074 	movhi	r3,2049
 8004944:	18cbd804 	addi	r3,r3,12128
 8004948:	18800017 	ldw	r2,0(r3)
 800494c:	99000217 	ldw	r4,8(r19)
 8004950:	8c23c83a 	sub	r17,r17,r16
 8004954:	8c400054 	ori	r17,r17,1
 8004958:	1421c83a 	sub	r16,r2,r16
 800495c:	24400115 	stw	r17,4(r4)
 8004960:	9009883a 	mov	r4,r18
 8004964:	1c000015 	stw	r16,0(r3)
 8004968:	800d4800 	call	800d480 <__malloc_unlock>
 800496c:	00800044 	movi	r2,1
 8004970:	003fe706 	br	8004910 <__alt_data_end+0xfc004910>
 8004974:	9009883a 	mov	r4,r18
 8004978:	000b883a 	mov	r5,zero
 800497c:	80077f80 	call	80077f8 <_sbrk_r>
 8004980:	99000217 	ldw	r4,8(r19)
 8004984:	014003c4 	movi	r5,15
 8004988:	1107c83a 	sub	r3,r2,r4
 800498c:	28ffdd0e 	bge	r5,r3,8004904 <__alt_data_end+0xfc004904>
 8004990:	01420074 	movhi	r5,2049
 8004994:	29450204 	addi	r5,r5,5128
 8004998:	29400017 	ldw	r5,0(r5)
 800499c:	18c00054 	ori	r3,r3,1
 80049a0:	20c00115 	stw	r3,4(r4)
 80049a4:	00c20074 	movhi	r3,2049
 80049a8:	1145c83a 	sub	r2,r2,r5
 80049ac:	18cbd804 	addi	r3,r3,12128
 80049b0:	18800015 	stw	r2,0(r3)
 80049b4:	003fd306 	br	8004904 <__alt_data_end+0xfc004904>

080049b8 <_free_r>:
 80049b8:	28004c26 	beq	r5,zero,8004aec <_free_r+0x134>
 80049bc:	defffd04 	addi	sp,sp,-12
 80049c0:	dc400115 	stw	r17,4(sp)
 80049c4:	dc000015 	stw	r16,0(sp)
 80049c8:	2023883a 	mov	r17,r4
 80049cc:	2821883a 	mov	r16,r5
 80049d0:	dfc00215 	stw	ra,8(sp)
 80049d4:	800d4600 	call	800d460 <__malloc_lock>
 80049d8:	813fff17 	ldw	r4,-4(r16)
 80049dc:	00bfff84 	movi	r2,-2
 80049e0:	02420074 	movhi	r9,2049
 80049e4:	81bffe04 	addi	r6,r16,-8
 80049e8:	2084703a 	and	r2,r4,r2
 80049ec:	4a7f7b04 	addi	r9,r9,-532
 80049f0:	308b883a 	add	r5,r6,r2
 80049f4:	2a000117 	ldw	r8,4(r5)
 80049f8:	49c00217 	ldw	r7,8(r9)
 80049fc:	00ffff04 	movi	r3,-4
 8004a00:	40c6703a 	and	r3,r8,r3
 8004a04:	39405326 	beq	r7,r5,8004b54 <_free_r+0x19c>
 8004a08:	28c00115 	stw	r3,4(r5)
 8004a0c:	2100004c 	andi	r4,r4,1
 8004a10:	2000091e 	bne	r4,zero,8004a38 <_free_r+0x80>
 8004a14:	81fffe17 	ldw	r7,-8(r16)
 8004a18:	4a000204 	addi	r8,r9,8
 8004a1c:	31cdc83a 	sub	r6,r6,r7
 8004a20:	31000217 	ldw	r4,8(r6)
 8004a24:	11c5883a 	add	r2,r2,r7
 8004a28:	22006126 	beq	r4,r8,8004bb0 <_free_r+0x1f8>
 8004a2c:	31c00317 	ldw	r7,12(r6)
 8004a30:	21c00315 	stw	r7,12(r4)
 8004a34:	39000215 	stw	r4,8(r7)
 8004a38:	28c9883a 	add	r4,r5,r3
 8004a3c:	21c00117 	ldw	r7,4(r4)
 8004a40:	39c0004c 	andi	r7,r7,1
 8004a44:	38000d1e 	bne	r7,zero,8004a7c <_free_r+0xc4>
 8004a48:	29000217 	ldw	r4,8(r5)
 8004a4c:	10c5883a 	add	r2,r2,r3
 8004a50:	00c20074 	movhi	r3,2049
 8004a54:	18ff7d04 	addi	r3,r3,-524
 8004a58:	20c07526 	beq	r4,r3,8004c30 <_free_r+0x278>
 8004a5c:	29c00317 	ldw	r7,12(r5)
 8004a60:	11400054 	ori	r5,r2,1
 8004a64:	3087883a 	add	r3,r6,r2
 8004a68:	21c00315 	stw	r7,12(r4)
 8004a6c:	39000215 	stw	r4,8(r7)
 8004a70:	31400115 	stw	r5,4(r6)
 8004a74:	18800015 	stw	r2,0(r3)
 8004a78:	00000406 	br	8004a8c <_free_r+0xd4>
 8004a7c:	10c00054 	ori	r3,r2,1
 8004a80:	30c00115 	stw	r3,4(r6)
 8004a84:	3087883a 	add	r3,r6,r2
 8004a88:	18800015 	stw	r2,0(r3)
 8004a8c:	00c07fc4 	movi	r3,511
 8004a90:	18801736 	bltu	r3,r2,8004af0 <_free_r+0x138>
 8004a94:	1004d0fa 	srli	r2,r2,3
 8004a98:	01400044 	movi	r5,1
 8004a9c:	49000117 	ldw	r4,4(r9)
 8004aa0:	1087883a 	add	r3,r2,r2
 8004aa4:	18c7883a 	add	r3,r3,r3
 8004aa8:	1005d0ba 	srai	r2,r2,2
 8004aac:	18c7883a 	add	r3,r3,r3
 8004ab0:	1a47883a 	add	r3,r3,r9
 8004ab4:	19c00217 	ldw	r7,8(r3)
 8004ab8:	2884983a 	sll	r2,r5,r2
 8004abc:	30c00315 	stw	r3,12(r6)
 8004ac0:	31c00215 	stw	r7,8(r6)
 8004ac4:	1104b03a 	or	r2,r2,r4
 8004ac8:	19800215 	stw	r6,8(r3)
 8004acc:	48800115 	stw	r2,4(r9)
 8004ad0:	39800315 	stw	r6,12(r7)
 8004ad4:	8809883a 	mov	r4,r17
 8004ad8:	dfc00217 	ldw	ra,8(sp)
 8004adc:	dc400117 	ldw	r17,4(sp)
 8004ae0:	dc000017 	ldw	r16,0(sp)
 8004ae4:	dec00304 	addi	sp,sp,12
 8004ae8:	800d4801 	jmpi	800d480 <__malloc_unlock>
 8004aec:	f800283a 	ret
 8004af0:	1006d27a 	srli	r3,r2,9
 8004af4:	01000104 	movi	r4,4
 8004af8:	20c04036 	bltu	r4,r3,8004bfc <_free_r+0x244>
 8004afc:	1006d1ba 	srli	r3,r2,6
 8004b00:	19400e04 	addi	r5,r3,56
 8004b04:	2947883a 	add	r3,r5,r5
 8004b08:	18c7883a 	add	r3,r3,r3
 8004b0c:	18c7883a 	add	r3,r3,r3
 8004b10:	1a49883a 	add	r4,r3,r9
 8004b14:	20c00217 	ldw	r3,8(r4)
 8004b18:	01c20074 	movhi	r7,2049
 8004b1c:	39ff7b04 	addi	r7,r7,-532
 8004b20:	19003b26 	beq	r3,r4,8004c10 <_free_r+0x258>
 8004b24:	01ffff04 	movi	r7,-4
 8004b28:	19400117 	ldw	r5,4(r3)
 8004b2c:	29ca703a 	and	r5,r5,r7
 8004b30:	1140022e 	bgeu	r2,r5,8004b3c <_free_r+0x184>
 8004b34:	18c00217 	ldw	r3,8(r3)
 8004b38:	20fffb1e 	bne	r4,r3,8004b28 <__alt_data_end+0xfc004b28>
 8004b3c:	18800317 	ldw	r2,12(r3)
 8004b40:	30800315 	stw	r2,12(r6)
 8004b44:	30c00215 	stw	r3,8(r6)
 8004b48:	11800215 	stw	r6,8(r2)
 8004b4c:	19800315 	stw	r6,12(r3)
 8004b50:	003fe006 	br	8004ad4 <__alt_data_end+0xfc004ad4>
 8004b54:	2100004c 	andi	r4,r4,1
 8004b58:	1885883a 	add	r2,r3,r2
 8004b5c:	2000071e 	bne	r4,zero,8004b7c <_free_r+0x1c4>
 8004b60:	817ffe17 	ldw	r5,-8(r16)
 8004b64:	314dc83a 	sub	r6,r6,r5
 8004b68:	30c00317 	ldw	r3,12(r6)
 8004b6c:	31000217 	ldw	r4,8(r6)
 8004b70:	1145883a 	add	r2,r2,r5
 8004b74:	20c00315 	stw	r3,12(r4)
 8004b78:	19000215 	stw	r4,8(r3)
 8004b7c:	10c00054 	ori	r3,r2,1
 8004b80:	30c00115 	stw	r3,4(r6)
 8004b84:	00c20074 	movhi	r3,2049
 8004b88:	18c50304 	addi	r3,r3,5132
 8004b8c:	18c00017 	ldw	r3,0(r3)
 8004b90:	49800215 	stw	r6,8(r9)
 8004b94:	10ffcf36 	bltu	r2,r3,8004ad4 <__alt_data_end+0xfc004ad4>
 8004b98:	00820074 	movhi	r2,2049
 8004b9c:	108bcf04 	addi	r2,r2,12092
 8004ba0:	11400017 	ldw	r5,0(r2)
 8004ba4:	8809883a 	mov	r4,r17
 8004ba8:	80048940 	call	8004894 <_malloc_trim_r>
 8004bac:	003fc906 	br	8004ad4 <__alt_data_end+0xfc004ad4>
 8004bb0:	28c9883a 	add	r4,r5,r3
 8004bb4:	21000117 	ldw	r4,4(r4)
 8004bb8:	2100004c 	andi	r4,r4,1
 8004bbc:	20000a1e 	bne	r4,zero,8004be8 <_free_r+0x230>
 8004bc0:	29000317 	ldw	r4,12(r5)
 8004bc4:	29400217 	ldw	r5,8(r5)
 8004bc8:	10c5883a 	add	r2,r2,r3
 8004bcc:	10c00054 	ori	r3,r2,1
 8004bd0:	29000315 	stw	r4,12(r5)
 8004bd4:	21400215 	stw	r5,8(r4)
 8004bd8:	30c00115 	stw	r3,4(r6)
 8004bdc:	308d883a 	add	r6,r6,r2
 8004be0:	30800015 	stw	r2,0(r6)
 8004be4:	003fbb06 	br	8004ad4 <__alt_data_end+0xfc004ad4>
 8004be8:	10c00054 	ori	r3,r2,1
 8004bec:	30c00115 	stw	r3,4(r6)
 8004bf0:	308d883a 	add	r6,r6,r2
 8004bf4:	30800015 	stw	r2,0(r6)
 8004bf8:	003fb606 	br	8004ad4 <__alt_data_end+0xfc004ad4>
 8004bfc:	01000504 	movi	r4,20
 8004c00:	20c01436 	bltu	r4,r3,8004c54 <_free_r+0x29c>
 8004c04:	194016c4 	addi	r5,r3,91
 8004c08:	2947883a 	add	r3,r5,r5
 8004c0c:	003fbe06 	br	8004b08 <__alt_data_end+0xfc004b08>
 8004c10:	280bd0ba 	srai	r5,r5,2
 8004c14:	00800044 	movi	r2,1
 8004c18:	39000117 	ldw	r4,4(r7)
 8004c1c:	114a983a 	sll	r5,r2,r5
 8004c20:	1805883a 	mov	r2,r3
 8004c24:	2908b03a 	or	r4,r5,r4
 8004c28:	39000115 	stw	r4,4(r7)
 8004c2c:	003fc406 	br	8004b40 <__alt_data_end+0xfc004b40>
 8004c30:	49800515 	stw	r6,20(r9)
 8004c34:	49800415 	stw	r6,16(r9)
 8004c38:	10c00054 	ori	r3,r2,1
 8004c3c:	31000315 	stw	r4,12(r6)
 8004c40:	31000215 	stw	r4,8(r6)
 8004c44:	30c00115 	stw	r3,4(r6)
 8004c48:	308d883a 	add	r6,r6,r2
 8004c4c:	30800015 	stw	r2,0(r6)
 8004c50:	003fa006 	br	8004ad4 <__alt_data_end+0xfc004ad4>
 8004c54:	01001504 	movi	r4,84
 8004c58:	20c00436 	bltu	r4,r3,8004c6c <_free_r+0x2b4>
 8004c5c:	1006d33a 	srli	r3,r2,12
 8004c60:	19401b84 	addi	r5,r3,110
 8004c64:	2947883a 	add	r3,r5,r5
 8004c68:	003fa706 	br	8004b08 <__alt_data_end+0xfc004b08>
 8004c6c:	01005504 	movi	r4,340
 8004c70:	20c00436 	bltu	r4,r3,8004c84 <_free_r+0x2cc>
 8004c74:	1006d3fa 	srli	r3,r2,15
 8004c78:	19401dc4 	addi	r5,r3,119
 8004c7c:	2947883a 	add	r3,r5,r5
 8004c80:	003fa106 	br	8004b08 <__alt_data_end+0xfc004b08>
 8004c84:	01015504 	movi	r4,1364
 8004c88:	20c00436 	bltu	r4,r3,8004c9c <_free_r+0x2e4>
 8004c8c:	1006d4ba 	srli	r3,r2,18
 8004c90:	19401f04 	addi	r5,r3,124
 8004c94:	2947883a 	add	r3,r5,r5
 8004c98:	003f9b06 	br	8004b08 <__alt_data_end+0xfc004b08>
 8004c9c:	00c03f04 	movi	r3,252
 8004ca0:	01401f84 	movi	r5,126
 8004ca4:	003f9806 	br	8004b08 <__alt_data_end+0xfc004b08>

08004ca8 <__sfvwrite_r>:
 8004ca8:	30800217 	ldw	r2,8(r6)
 8004cac:	10004526 	beq	r2,zero,8004dc4 <__sfvwrite_r+0x11c>
 8004cb0:	28c0030b 	ldhu	r3,12(r5)
 8004cb4:	defff404 	addi	sp,sp,-48
 8004cb8:	dd400715 	stw	r21,28(sp)
 8004cbc:	dcc00515 	stw	r19,20(sp)
 8004cc0:	dc000215 	stw	r16,8(sp)
 8004cc4:	dfc00b15 	stw	ra,44(sp)
 8004cc8:	df000a15 	stw	fp,40(sp)
 8004ccc:	ddc00915 	stw	r23,36(sp)
 8004cd0:	dd800815 	stw	r22,32(sp)
 8004cd4:	dd000615 	stw	r20,24(sp)
 8004cd8:	dc800415 	stw	r18,16(sp)
 8004cdc:	dc400315 	stw	r17,12(sp)
 8004ce0:	1880020c 	andi	r2,r3,8
 8004ce4:	2821883a 	mov	r16,r5
 8004ce8:	202b883a 	mov	r21,r4
 8004cec:	3027883a 	mov	r19,r6
 8004cf0:	10002526 	beq	r2,zero,8004d88 <__sfvwrite_r+0xe0>
 8004cf4:	28800417 	ldw	r2,16(r5)
 8004cf8:	10002326 	beq	r2,zero,8004d88 <__sfvwrite_r+0xe0>
 8004cfc:	1880008c 	andi	r2,r3,2
 8004d00:	9c400017 	ldw	r17,0(r19)
 8004d04:	10003126 	beq	r2,zero,8004dcc <__sfvwrite_r+0x124>
 8004d08:	0029883a 	mov	r20,zero
 8004d0c:	0025883a 	mov	r18,zero
 8004d10:	05810004 	movi	r22,1024
 8004d14:	a00d883a 	mov	r6,r20
 8004d18:	a809883a 	mov	r4,r21
 8004d1c:	90002526 	beq	r18,zero,8004db4 <__sfvwrite_r+0x10c>
 8004d20:	900f883a 	mov	r7,r18
 8004d24:	81400717 	ldw	r5,28(r16)
 8004d28:	b480012e 	bgeu	r22,r18,8004d30 <__sfvwrite_r+0x88>
 8004d2c:	01c10004 	movi	r7,1024
 8004d30:	80800917 	ldw	r2,36(r16)
 8004d34:	103ee83a 	callr	r2
 8004d38:	0080510e 	bge	zero,r2,8004e80 <__sfvwrite_r+0x1d8>
 8004d3c:	98c00217 	ldw	r3,8(r19)
 8004d40:	a0a9883a 	add	r20,r20,r2
 8004d44:	90a5c83a 	sub	r18,r18,r2
 8004d48:	1885c83a 	sub	r2,r3,r2
 8004d4c:	98800215 	stw	r2,8(r19)
 8004d50:	103ff01e 	bne	r2,zero,8004d14 <__alt_data_end+0xfc004d14>
 8004d54:	0005883a 	mov	r2,zero
 8004d58:	dfc00b17 	ldw	ra,44(sp)
 8004d5c:	df000a17 	ldw	fp,40(sp)
 8004d60:	ddc00917 	ldw	r23,36(sp)
 8004d64:	dd800817 	ldw	r22,32(sp)
 8004d68:	dd400717 	ldw	r21,28(sp)
 8004d6c:	dd000617 	ldw	r20,24(sp)
 8004d70:	dcc00517 	ldw	r19,20(sp)
 8004d74:	dc800417 	ldw	r18,16(sp)
 8004d78:	dc400317 	ldw	r17,12(sp)
 8004d7c:	dc000217 	ldw	r16,8(sp)
 8004d80:	dec00c04 	addi	sp,sp,48
 8004d84:	f800283a 	ret
 8004d88:	a809883a 	mov	r4,r21
 8004d8c:	800b883a 	mov	r5,r16
 8004d90:	80028080 	call	8002808 <__swsetup_r>
 8004d94:	80c0030b 	ldhu	r3,12(r16)
 8004d98:	103fd826 	beq	r2,zero,8004cfc <__alt_data_end+0xfc004cfc>
 8004d9c:	18c01014 	ori	r3,r3,64
 8004da0:	80c0030d 	sth	r3,12(r16)
 8004da4:	00c00244 	movi	r3,9
 8004da8:	00bfffc4 	movi	r2,-1
 8004dac:	a8c00015 	stw	r3,0(r21)
 8004db0:	003fe906 	br	8004d58 <__alt_data_end+0xfc004d58>
 8004db4:	8d000017 	ldw	r20,0(r17)
 8004db8:	8c800117 	ldw	r18,4(r17)
 8004dbc:	8c400204 	addi	r17,r17,8
 8004dc0:	003fd406 	br	8004d14 <__alt_data_end+0xfc004d14>
 8004dc4:	0005883a 	mov	r2,zero
 8004dc8:	f800283a 	ret
 8004dcc:	1880004c 	andi	r2,r3,1
 8004dd0:	1000301e 	bne	r2,zero,8004e94 <__sfvwrite_r+0x1ec>
 8004dd4:	002f883a 	mov	r23,zero
 8004dd8:	0025883a 	mov	r18,zero
 8004ddc:	90001c26 	beq	r18,zero,8004e50 <__sfvwrite_r+0x1a8>
 8004de0:	1880800c 	andi	r2,r3,512
 8004de4:	85000217 	ldw	r20,8(r16)
 8004de8:	10006c26 	beq	r2,zero,8004f9c <__sfvwrite_r+0x2f4>
 8004dec:	a02d883a 	mov	r22,r20
 8004df0:	95008536 	bltu	r18,r20,8005008 <__sfvwrite_r+0x360>
 8004df4:	1881200c 	andi	r2,r3,1152
 8004df8:	10009d1e 	bne	r2,zero,8005070 <__sfvwrite_r+0x3c8>
 8004dfc:	81000017 	ldw	r4,0(r16)
 8004e00:	a039883a 	mov	fp,r20
 8004e04:	9029883a 	mov	r20,r18
 8004e08:	b80b883a 	mov	r5,r23
 8004e0c:	b00d883a 	mov	r6,r22
 8004e10:	8005f1c0 	call	8005f1c <memmove>
 8004e14:	80c00217 	ldw	r3,8(r16)
 8004e18:	81000017 	ldw	r4,0(r16)
 8004e1c:	9005883a 	mov	r2,r18
 8004e20:	1f39c83a 	sub	fp,r3,fp
 8004e24:	258f883a 	add	r7,r4,r22
 8004e28:	87000215 	stw	fp,8(r16)
 8004e2c:	81c00015 	stw	r7,0(r16)
 8004e30:	98c00217 	ldw	r3,8(r19)
 8004e34:	b8af883a 	add	r23,r23,r2
 8004e38:	90a5c83a 	sub	r18,r18,r2
 8004e3c:	1d05c83a 	sub	r2,r3,r20
 8004e40:	98800215 	stw	r2,8(r19)
 8004e44:	103fc326 	beq	r2,zero,8004d54 <__alt_data_end+0xfc004d54>
 8004e48:	80c0030b 	ldhu	r3,12(r16)
 8004e4c:	903fe41e 	bne	r18,zero,8004de0 <__alt_data_end+0xfc004de0>
 8004e50:	8dc00017 	ldw	r23,0(r17)
 8004e54:	8c800117 	ldw	r18,4(r17)
 8004e58:	8c400204 	addi	r17,r17,8
 8004e5c:	003fdf06 	br	8004ddc <__alt_data_end+0xfc004ddc>
 8004e60:	80071e40 	call	80071e4 <_realloc_r>
 8004e64:	102d883a 	mov	r22,r2
 8004e68:	1000a01e 	bne	r2,zero,80050ec <__sfvwrite_r+0x444>
 8004e6c:	81400417 	ldw	r5,16(r16)
 8004e70:	a809883a 	mov	r4,r21
 8004e74:	80049b80 	call	80049b8 <_free_r>
 8004e78:	00800304 	movi	r2,12
 8004e7c:	a8800015 	stw	r2,0(r21)
 8004e80:	80c0030b 	ldhu	r3,12(r16)
 8004e84:	00bfffc4 	movi	r2,-1
 8004e88:	18c01014 	ori	r3,r3,64
 8004e8c:	80c0030d 	sth	r3,12(r16)
 8004e90:	003fb106 	br	8004d58 <__alt_data_end+0xfc004d58>
 8004e94:	0029883a 	mov	r20,zero
 8004e98:	0011883a 	mov	r8,zero
 8004e9c:	0039883a 	mov	fp,zero
 8004ea0:	0025883a 	mov	r18,zero
 8004ea4:	90001f26 	beq	r18,zero,8004f24 <__sfvwrite_r+0x27c>
 8004ea8:	40006826 	beq	r8,zero,800504c <__sfvwrite_r+0x3a4>
 8004eac:	a02f883a 	mov	r23,r20
 8004eb0:	9500012e 	bgeu	r18,r20,8004eb8 <__sfvwrite_r+0x210>
 8004eb4:	902f883a 	mov	r23,r18
 8004eb8:	81000017 	ldw	r4,0(r16)
 8004ebc:	80800417 	ldw	r2,16(r16)
 8004ec0:	b82d883a 	mov	r22,r23
 8004ec4:	81800217 	ldw	r6,8(r16)
 8004ec8:	81c00517 	ldw	r7,20(r16)
 8004ecc:	1100022e 	bgeu	r2,r4,8004ed8 <__sfvwrite_r+0x230>
 8004ed0:	31c7883a 	add	r3,r6,r7
 8004ed4:	1dc01816 	blt	r3,r23,8004f38 <__sfvwrite_r+0x290>
 8004ed8:	b9c03f16 	blt	r23,r7,8004fd8 <__sfvwrite_r+0x330>
 8004edc:	80800917 	ldw	r2,36(r16)
 8004ee0:	81400717 	ldw	r5,28(r16)
 8004ee4:	a809883a 	mov	r4,r21
 8004ee8:	da000115 	stw	r8,4(sp)
 8004eec:	e00d883a 	mov	r6,fp
 8004ef0:	103ee83a 	callr	r2
 8004ef4:	102d883a 	mov	r22,r2
 8004ef8:	da000117 	ldw	r8,4(sp)
 8004efc:	00bfe00e 	bge	zero,r2,8004e80 <__alt_data_end+0xfc004e80>
 8004f00:	a5a9c83a 	sub	r20,r20,r22
 8004f04:	a0001f26 	beq	r20,zero,8004f84 <__sfvwrite_r+0x2dc>
 8004f08:	98800217 	ldw	r2,8(r19)
 8004f0c:	e5b9883a 	add	fp,fp,r22
 8004f10:	95a5c83a 	sub	r18,r18,r22
 8004f14:	15adc83a 	sub	r22,r2,r22
 8004f18:	9d800215 	stw	r22,8(r19)
 8004f1c:	b03f8d26 	beq	r22,zero,8004d54 <__alt_data_end+0xfc004d54>
 8004f20:	903fe11e 	bne	r18,zero,8004ea8 <__alt_data_end+0xfc004ea8>
 8004f24:	8f000017 	ldw	fp,0(r17)
 8004f28:	8c800117 	ldw	r18,4(r17)
 8004f2c:	0011883a 	mov	r8,zero
 8004f30:	8c400204 	addi	r17,r17,8
 8004f34:	003fdb06 	br	8004ea4 <__alt_data_end+0xfc004ea4>
 8004f38:	180d883a 	mov	r6,r3
 8004f3c:	e00b883a 	mov	r5,fp
 8004f40:	da000115 	stw	r8,4(sp)
 8004f44:	d8c00015 	stw	r3,0(sp)
 8004f48:	8005f1c0 	call	8005f1c <memmove>
 8004f4c:	d8c00017 	ldw	r3,0(sp)
 8004f50:	80800017 	ldw	r2,0(r16)
 8004f54:	a809883a 	mov	r4,r21
 8004f58:	800b883a 	mov	r5,r16
 8004f5c:	10c5883a 	add	r2,r2,r3
 8004f60:	80800015 	stw	r2,0(r16)
 8004f64:	d8c00015 	stw	r3,0(sp)
 8004f68:	80042880 	call	8004288 <_fflush_r>
 8004f6c:	d8c00017 	ldw	r3,0(sp)
 8004f70:	da000117 	ldw	r8,4(sp)
 8004f74:	103fc21e 	bne	r2,zero,8004e80 <__alt_data_end+0xfc004e80>
 8004f78:	182d883a 	mov	r22,r3
 8004f7c:	a5a9c83a 	sub	r20,r20,r22
 8004f80:	a03fe11e 	bne	r20,zero,8004f08 <__alt_data_end+0xfc004f08>
 8004f84:	a809883a 	mov	r4,r21
 8004f88:	800b883a 	mov	r5,r16
 8004f8c:	80042880 	call	8004288 <_fflush_r>
 8004f90:	103fbb1e 	bne	r2,zero,8004e80 <__alt_data_end+0xfc004e80>
 8004f94:	0011883a 	mov	r8,zero
 8004f98:	003fdb06 	br	8004f08 <__alt_data_end+0xfc004f08>
 8004f9c:	81000017 	ldw	r4,0(r16)
 8004fa0:	80800417 	ldw	r2,16(r16)
 8004fa4:	1100012e 	bgeu	r2,r4,8004fac <__sfvwrite_r+0x304>
 8004fa8:	a4805a36 	bltu	r20,r18,8005114 <__sfvwrite_r+0x46c>
 8004fac:	81c00517 	ldw	r7,20(r16)
 8004fb0:	91c01a36 	bltu	r18,r7,800501c <__sfvwrite_r+0x374>
 8004fb4:	80800917 	ldw	r2,36(r16)
 8004fb8:	81400717 	ldw	r5,28(r16)
 8004fbc:	a809883a 	mov	r4,r21
 8004fc0:	b80d883a 	mov	r6,r23
 8004fc4:	103ee83a 	callr	r2
 8004fc8:	1029883a 	mov	r20,r2
 8004fcc:	00bfac0e 	bge	zero,r2,8004e80 <__alt_data_end+0xfc004e80>
 8004fd0:	a005883a 	mov	r2,r20
 8004fd4:	003f9606 	br	8004e30 <__alt_data_end+0xfc004e30>
 8004fd8:	b80d883a 	mov	r6,r23
 8004fdc:	e00b883a 	mov	r5,fp
 8004fe0:	da000115 	stw	r8,4(sp)
 8004fe4:	8005f1c0 	call	8005f1c <memmove>
 8004fe8:	80800217 	ldw	r2,8(r16)
 8004fec:	80c00017 	ldw	r3,0(r16)
 8004ff0:	da000117 	ldw	r8,4(sp)
 8004ff4:	15c5c83a 	sub	r2,r2,r23
 8004ff8:	1def883a 	add	r23,r3,r23
 8004ffc:	80800215 	stw	r2,8(r16)
 8005000:	85c00015 	stw	r23,0(r16)
 8005004:	003fbe06 	br	8004f00 <__alt_data_end+0xfc004f00>
 8005008:	81000017 	ldw	r4,0(r16)
 800500c:	9039883a 	mov	fp,r18
 8005010:	9029883a 	mov	r20,r18
 8005014:	902d883a 	mov	r22,r18
 8005018:	003f7b06 	br	8004e08 <__alt_data_end+0xfc004e08>
 800501c:	b80b883a 	mov	r5,r23
 8005020:	900d883a 	mov	r6,r18
 8005024:	8005f1c0 	call	8005f1c <memmove>
 8005028:	80c00217 	ldw	r3,8(r16)
 800502c:	80800017 	ldw	r2,0(r16)
 8005030:	9029883a 	mov	r20,r18
 8005034:	1c87c83a 	sub	r3,r3,r18
 8005038:	1485883a 	add	r2,r2,r18
 800503c:	80800015 	stw	r2,0(r16)
 8005040:	80c00215 	stw	r3,8(r16)
 8005044:	9005883a 	mov	r2,r18
 8005048:	003f7906 	br	8004e30 <__alt_data_end+0xfc004e30>
 800504c:	e009883a 	mov	r4,fp
 8005050:	01400284 	movi	r5,10
 8005054:	900d883a 	mov	r6,r18
 8005058:	8005cfc0 	call	8005cfc <memchr>
 800505c:	10003826 	beq	r2,zero,8005140 <__sfvwrite_r+0x498>
 8005060:	10800044 	addi	r2,r2,1
 8005064:	1729c83a 	sub	r20,r2,fp
 8005068:	02000044 	movi	r8,1
 800506c:	003f8f06 	br	8004eac <__alt_data_end+0xfc004eac>
 8005070:	80800517 	ldw	r2,20(r16)
 8005074:	81400417 	ldw	r5,16(r16)
 8005078:	87000017 	ldw	fp,0(r16)
 800507c:	10a9883a 	add	r20,r2,r2
 8005080:	a085883a 	add	r2,r20,r2
 8005084:	1028d7fa 	srli	r20,r2,31
 8005088:	e179c83a 	sub	fp,fp,r5
 800508c:	e1000044 	addi	r4,fp,1
 8005090:	a085883a 	add	r2,r20,r2
 8005094:	1029d07a 	srai	r20,r2,1
 8005098:	2485883a 	add	r2,r4,r18
 800509c:	a00d883a 	mov	r6,r20
 80050a0:	a080022e 	bgeu	r20,r2,80050ac <__sfvwrite_r+0x404>
 80050a4:	1029883a 	mov	r20,r2
 80050a8:	100d883a 	mov	r6,r2
 80050ac:	18c1000c 	andi	r3,r3,1024
 80050b0:	a809883a 	mov	r4,r21
 80050b4:	183f6a26 	beq	r3,zero,8004e60 <__alt_data_end+0xfc004e60>
 80050b8:	300b883a 	mov	r5,r6
 80050bc:	80055540 	call	8005554 <_malloc_r>
 80050c0:	102d883a 	mov	r22,r2
 80050c4:	103f6c26 	beq	r2,zero,8004e78 <__alt_data_end+0xfc004e78>
 80050c8:	81400417 	ldw	r5,16(r16)
 80050cc:	1009883a 	mov	r4,r2
 80050d0:	e00d883a 	mov	r6,fp
 80050d4:	8005de40 	call	8005de4 <memcpy>
 80050d8:	8080030b 	ldhu	r2,12(r16)
 80050dc:	00fedfc4 	movi	r3,-1153
 80050e0:	10c4703a 	and	r2,r2,r3
 80050e4:	10802014 	ori	r2,r2,128
 80050e8:	8080030d 	sth	r2,12(r16)
 80050ec:	b709883a 	add	r4,r22,fp
 80050f0:	a707c83a 	sub	r3,r20,fp
 80050f4:	85800415 	stw	r22,16(r16)
 80050f8:	85000515 	stw	r20,20(r16)
 80050fc:	81000015 	stw	r4,0(r16)
 8005100:	9039883a 	mov	fp,r18
 8005104:	80c00215 	stw	r3,8(r16)
 8005108:	9029883a 	mov	r20,r18
 800510c:	902d883a 	mov	r22,r18
 8005110:	003f3d06 	br	8004e08 <__alt_data_end+0xfc004e08>
 8005114:	b80b883a 	mov	r5,r23
 8005118:	a00d883a 	mov	r6,r20
 800511c:	8005f1c0 	call	8005f1c <memmove>
 8005120:	80800017 	ldw	r2,0(r16)
 8005124:	a809883a 	mov	r4,r21
 8005128:	800b883a 	mov	r5,r16
 800512c:	1505883a 	add	r2,r2,r20
 8005130:	80800015 	stw	r2,0(r16)
 8005134:	80042880 	call	8004288 <_fflush_r>
 8005138:	103fa526 	beq	r2,zero,8004fd0 <__alt_data_end+0xfc004fd0>
 800513c:	003f5006 	br	8004e80 <__alt_data_end+0xfc004e80>
 8005140:	95000044 	addi	r20,r18,1
 8005144:	02000044 	movi	r8,1
 8005148:	003f5806 	br	8004eac <__alt_data_end+0xfc004eac>

0800514c <_fwalk>:
 800514c:	defff804 	addi	sp,sp,-32
 8005150:	dd400515 	stw	r21,20(sp)
 8005154:	2540b804 	addi	r21,r4,736
 8005158:	dd800615 	stw	r22,24(sp)
 800515c:	dd000415 	stw	r20,16(sp)
 8005160:	dfc00715 	stw	ra,28(sp)
 8005164:	dcc00315 	stw	r19,12(sp)
 8005168:	dc800215 	stw	r18,8(sp)
 800516c:	dc400115 	stw	r17,4(sp)
 8005170:	dc000015 	stw	r16,0(sp)
 8005174:	2829883a 	mov	r20,r5
 8005178:	002d883a 	mov	r22,zero
 800517c:	80048540 	call	8004854 <__sfp_lock_acquire>
 8005180:	a8001426 	beq	r21,zero,80051d4 <_fwalk+0x88>
 8005184:	04ffffc4 	movi	r19,-1
 8005188:	ac400117 	ldw	r17,4(r21)
 800518c:	ac800217 	ldw	r18,8(r21)
 8005190:	8c7fffc4 	addi	r17,r17,-1
 8005194:	88000d16 	blt	r17,zero,80051cc <_fwalk+0x80>
 8005198:	94000304 	addi	r16,r18,12
 800519c:	94800384 	addi	r18,r18,14
 80051a0:	80c0000f 	ldh	r3,0(r16)
 80051a4:	8c7fffc4 	addi	r17,r17,-1
 80051a8:	813ffd04 	addi	r4,r16,-12
 80051ac:	18000426 	beq	r3,zero,80051c0 <_fwalk+0x74>
 80051b0:	90c0000f 	ldh	r3,0(r18)
 80051b4:	1cc00226 	beq	r3,r19,80051c0 <_fwalk+0x74>
 80051b8:	a03ee83a 	callr	r20
 80051bc:	b0acb03a 	or	r22,r22,r2
 80051c0:	84001a04 	addi	r16,r16,104
 80051c4:	94801a04 	addi	r18,r18,104
 80051c8:	8cfff51e 	bne	r17,r19,80051a0 <__alt_data_end+0xfc0051a0>
 80051cc:	ad400017 	ldw	r21,0(r21)
 80051d0:	a83fed1e 	bne	r21,zero,8005188 <__alt_data_end+0xfc005188>
 80051d4:	80048580 	call	8004858 <__sfp_lock_release>
 80051d8:	b005883a 	mov	r2,r22
 80051dc:	dfc00717 	ldw	ra,28(sp)
 80051e0:	dd800617 	ldw	r22,24(sp)
 80051e4:	dd400517 	ldw	r21,20(sp)
 80051e8:	dd000417 	ldw	r20,16(sp)
 80051ec:	dcc00317 	ldw	r19,12(sp)
 80051f0:	dc800217 	ldw	r18,8(sp)
 80051f4:	dc400117 	ldw	r17,4(sp)
 80051f8:	dc000017 	ldw	r16,0(sp)
 80051fc:	dec00804 	addi	sp,sp,32
 8005200:	f800283a 	ret

08005204 <_fwalk_reent>:
 8005204:	defff804 	addi	sp,sp,-32
 8005208:	dd400515 	stw	r21,20(sp)
 800520c:	2540b804 	addi	r21,r4,736
 8005210:	dd800615 	stw	r22,24(sp)
 8005214:	dd000415 	stw	r20,16(sp)
 8005218:	dcc00315 	stw	r19,12(sp)
 800521c:	dfc00715 	stw	ra,28(sp)
 8005220:	dc800215 	stw	r18,8(sp)
 8005224:	dc400115 	stw	r17,4(sp)
 8005228:	dc000015 	stw	r16,0(sp)
 800522c:	2027883a 	mov	r19,r4
 8005230:	2829883a 	mov	r20,r5
 8005234:	002d883a 	mov	r22,zero
 8005238:	80048540 	call	8004854 <__sfp_lock_acquire>
 800523c:	a8001326 	beq	r21,zero,800528c <_fwalk_reent+0x88>
 8005240:	04bfffc4 	movi	r18,-1
 8005244:	ac400117 	ldw	r17,4(r21)
 8005248:	ac000217 	ldw	r16,8(r21)
 800524c:	8c7fffc4 	addi	r17,r17,-1
 8005250:	88000c16 	blt	r17,zero,8005284 <_fwalk_reent+0x80>
 8005254:	84000304 	addi	r16,r16,12
 8005258:	80c0000f 	ldh	r3,0(r16)
 800525c:	8c7fffc4 	addi	r17,r17,-1
 8005260:	817ffd04 	addi	r5,r16,-12
 8005264:	18000526 	beq	r3,zero,800527c <_fwalk_reent+0x78>
 8005268:	80c0008f 	ldh	r3,2(r16)
 800526c:	9809883a 	mov	r4,r19
 8005270:	1c800226 	beq	r3,r18,800527c <_fwalk_reent+0x78>
 8005274:	a03ee83a 	callr	r20
 8005278:	b0acb03a 	or	r22,r22,r2
 800527c:	84001a04 	addi	r16,r16,104
 8005280:	8cbff51e 	bne	r17,r18,8005258 <__alt_data_end+0xfc005258>
 8005284:	ad400017 	ldw	r21,0(r21)
 8005288:	a83fee1e 	bne	r21,zero,8005244 <__alt_data_end+0xfc005244>
 800528c:	80048580 	call	8004858 <__sfp_lock_release>
 8005290:	b005883a 	mov	r2,r22
 8005294:	dfc00717 	ldw	ra,28(sp)
 8005298:	dd800617 	ldw	r22,24(sp)
 800529c:	dd400517 	ldw	r21,20(sp)
 80052a0:	dd000417 	ldw	r20,16(sp)
 80052a4:	dcc00317 	ldw	r19,12(sp)
 80052a8:	dc800217 	ldw	r18,8(sp)
 80052ac:	dc400117 	ldw	r17,4(sp)
 80052b0:	dc000017 	ldw	r16,0(sp)
 80052b4:	dec00804 	addi	sp,sp,32
 80052b8:	f800283a 	ret

080052bc <_setlocale_r>:
 80052bc:	30001b26 	beq	r6,zero,800532c <_setlocale_r+0x70>
 80052c0:	01420074 	movhi	r5,2049
 80052c4:	defffe04 	addi	sp,sp,-8
 80052c8:	297db304 	addi	r5,r5,-2356
 80052cc:	3009883a 	mov	r4,r6
 80052d0:	dc000015 	stw	r16,0(sp)
 80052d4:	dfc00115 	stw	ra,4(sp)
 80052d8:	3021883a 	mov	r16,r6
 80052dc:	80079880 	call	8007988 <strcmp>
 80052e0:	1000061e 	bne	r2,zero,80052fc <_setlocale_r+0x40>
 80052e4:	00820074 	movhi	r2,2049
 80052e8:	10bdb204 	addi	r2,r2,-2360
 80052ec:	dfc00117 	ldw	ra,4(sp)
 80052f0:	dc000017 	ldw	r16,0(sp)
 80052f4:	dec00204 	addi	sp,sp,8
 80052f8:	f800283a 	ret
 80052fc:	01420074 	movhi	r5,2049
 8005300:	297db204 	addi	r5,r5,-2360
 8005304:	8009883a 	mov	r4,r16
 8005308:	80079880 	call	8007988 <strcmp>
 800530c:	103ff526 	beq	r2,zero,80052e4 <__alt_data_end+0xfc0052e4>
 8005310:	01420074 	movhi	r5,2049
 8005314:	297d9d04 	addi	r5,r5,-2444
 8005318:	8009883a 	mov	r4,r16
 800531c:	80079880 	call	8007988 <strcmp>
 8005320:	103ff026 	beq	r2,zero,80052e4 <__alt_data_end+0xfc0052e4>
 8005324:	0005883a 	mov	r2,zero
 8005328:	003ff006 	br	80052ec <__alt_data_end+0xfc0052ec>
 800532c:	00820074 	movhi	r2,2049
 8005330:	10bdb204 	addi	r2,r2,-2360
 8005334:	f800283a 	ret

08005338 <__locale_charset>:
 8005338:	00820074 	movhi	r2,2049
 800533c:	10bf6504 	addi	r2,r2,-620
 8005340:	f800283a 	ret

08005344 <__locale_mb_cur_max>:
 8005344:	00820074 	movhi	r2,2049
 8005348:	10850104 	addi	r2,r2,5124
 800534c:	10800017 	ldw	r2,0(r2)
 8005350:	f800283a 	ret

08005354 <__locale_msgcharset>:
 8005354:	00820074 	movhi	r2,2049
 8005358:	10bf5d04 	addi	r2,r2,-652
 800535c:	f800283a 	ret

08005360 <__locale_cjk_lang>:
 8005360:	0005883a 	mov	r2,zero
 8005364:	f800283a 	ret

08005368 <_localeconv_r>:
 8005368:	00820074 	movhi	r2,2049
 800536c:	10bf6d04 	addi	r2,r2,-588
 8005370:	f800283a 	ret

08005374 <setlocale>:
 8005374:	00c20074 	movhi	r3,2049
 8005378:	18c50004 	addi	r3,r3,5120
 800537c:	2005883a 	mov	r2,r4
 8005380:	19000017 	ldw	r4,0(r3)
 8005384:	280d883a 	mov	r6,r5
 8005388:	100b883a 	mov	r5,r2
 800538c:	80052bc1 	jmpi	80052bc <_setlocale_r>

08005390 <localeconv>:
 8005390:	00820074 	movhi	r2,2049
 8005394:	10bf6d04 	addi	r2,r2,-588
 8005398:	f800283a 	ret

0800539c <__smakebuf_r>:
 800539c:	2880030b 	ldhu	r2,12(r5)
 80053a0:	10c0008c 	andi	r3,r2,2
 80053a4:	1800401e 	bne	r3,zero,80054a8 <__smakebuf_r+0x10c>
 80053a8:	deffec04 	addi	sp,sp,-80
 80053ac:	dc000f15 	stw	r16,60(sp)
 80053b0:	2821883a 	mov	r16,r5
 80053b4:	2940038f 	ldh	r5,14(r5)
 80053b8:	dc401015 	stw	r17,64(sp)
 80053bc:	dfc01315 	stw	ra,76(sp)
 80053c0:	dcc01215 	stw	r19,72(sp)
 80053c4:	dc801115 	stw	r18,68(sp)
 80053c8:	2023883a 	mov	r17,r4
 80053cc:	28001b16 	blt	r5,zero,800543c <__smakebuf_r+0xa0>
 80053d0:	d80d883a 	mov	r6,sp
 80053d4:	80094000 	call	8009400 <_fstat_r>
 80053d8:	10001716 	blt	r2,zero,8005438 <__smakebuf_r+0x9c>
 80053dc:	d8800117 	ldw	r2,4(sp)
 80053e0:	00e00014 	movui	r3,32768
 80053e4:	10bc000c 	andi	r2,r2,61440
 80053e8:	10c03726 	beq	r2,r3,80054c8 <__smakebuf_r+0x12c>
 80053ec:	80c0030b 	ldhu	r3,12(r16)
 80053f0:	18c20014 	ori	r3,r3,2048
 80053f4:	80c0030d 	sth	r3,12(r16)
 80053f8:	00c80004 	movi	r3,8192
 80053fc:	10c03c1e 	bne	r2,r3,80054f0 <__smakebuf_r+0x154>
 8005400:	8140038f 	ldh	r5,14(r16)
 8005404:	8809883a 	mov	r4,r17
 8005408:	80094580 	call	8009458 <_isatty_r>
 800540c:	10004e26 	beq	r2,zero,8005548 <__smakebuf_r+0x1ac>
 8005410:	8080030b 	ldhu	r2,12(r16)
 8005414:	04c00044 	movi	r19,1
 8005418:	80c010c4 	addi	r3,r16,67
 800541c:	14c4b03a 	or	r2,r2,r19
 8005420:	8080030d 	sth	r2,12(r16)
 8005424:	80c00015 	stw	r3,0(r16)
 8005428:	80c00415 	stw	r3,16(r16)
 800542c:	84c00515 	stw	r19,20(r16)
 8005430:	04810004 	movi	r18,1024
 8005434:	00000706 	br	8005454 <__smakebuf_r+0xb8>
 8005438:	8080030b 	ldhu	r2,12(r16)
 800543c:	10c0200c 	andi	r3,r2,128
 8005440:	18001f1e 	bne	r3,zero,80054c0 <__smakebuf_r+0x124>
 8005444:	04810004 	movi	r18,1024
 8005448:	10820014 	ori	r2,r2,2048
 800544c:	8080030d 	sth	r2,12(r16)
 8005450:	0027883a 	mov	r19,zero
 8005454:	8809883a 	mov	r4,r17
 8005458:	900b883a 	mov	r5,r18
 800545c:	80055540 	call	8005554 <_malloc_r>
 8005460:	10002e26 	beq	r2,zero,800551c <__smakebuf_r+0x180>
 8005464:	80c0030b 	ldhu	r3,12(r16)
 8005468:	01020034 	movhi	r4,2048
 800546c:	21113c04 	addi	r4,r4,17648
 8005470:	89000f15 	stw	r4,60(r17)
 8005474:	18c02014 	ori	r3,r3,128
 8005478:	80c0030d 	sth	r3,12(r16)
 800547c:	80800015 	stw	r2,0(r16)
 8005480:	80800415 	stw	r2,16(r16)
 8005484:	84800515 	stw	r18,20(r16)
 8005488:	98001c1e 	bne	r19,zero,80054fc <__smakebuf_r+0x160>
 800548c:	dfc01317 	ldw	ra,76(sp)
 8005490:	dcc01217 	ldw	r19,72(sp)
 8005494:	dc801117 	ldw	r18,68(sp)
 8005498:	dc401017 	ldw	r17,64(sp)
 800549c:	dc000f17 	ldw	r16,60(sp)
 80054a0:	dec01404 	addi	sp,sp,80
 80054a4:	f800283a 	ret
 80054a8:	288010c4 	addi	r2,r5,67
 80054ac:	28800015 	stw	r2,0(r5)
 80054b0:	28800415 	stw	r2,16(r5)
 80054b4:	00800044 	movi	r2,1
 80054b8:	28800515 	stw	r2,20(r5)
 80054bc:	f800283a 	ret
 80054c0:	04801004 	movi	r18,64
 80054c4:	003fe006 	br	8005448 <__alt_data_end+0xfc005448>
 80054c8:	81000a17 	ldw	r4,40(r16)
 80054cc:	00c20034 	movhi	r3,2048
 80054d0:	18de4904 	addi	r3,r3,31012
 80054d4:	20ffc51e 	bne	r4,r3,80053ec <__alt_data_end+0xfc0053ec>
 80054d8:	80c0030b 	ldhu	r3,12(r16)
 80054dc:	01010004 	movi	r4,1024
 80054e0:	81001315 	stw	r4,76(r16)
 80054e4:	1906b03a 	or	r3,r3,r4
 80054e8:	80c0030d 	sth	r3,12(r16)
 80054ec:	003fc206 	br	80053f8 <__alt_data_end+0xfc0053f8>
 80054f0:	0027883a 	mov	r19,zero
 80054f4:	04810004 	movi	r18,1024
 80054f8:	003fd606 	br	8005454 <__alt_data_end+0xfc005454>
 80054fc:	8140038f 	ldh	r5,14(r16)
 8005500:	8809883a 	mov	r4,r17
 8005504:	80094580 	call	8009458 <_isatty_r>
 8005508:	103fe026 	beq	r2,zero,800548c <__alt_data_end+0xfc00548c>
 800550c:	8080030b 	ldhu	r2,12(r16)
 8005510:	10800054 	ori	r2,r2,1
 8005514:	8080030d 	sth	r2,12(r16)
 8005518:	003fdc06 	br	800548c <__alt_data_end+0xfc00548c>
 800551c:	8080030b 	ldhu	r2,12(r16)
 8005520:	10c0800c 	andi	r3,r2,512
 8005524:	183fd91e 	bne	r3,zero,800548c <__alt_data_end+0xfc00548c>
 8005528:	10800094 	ori	r2,r2,2
 800552c:	80c010c4 	addi	r3,r16,67
 8005530:	8080030d 	sth	r2,12(r16)
 8005534:	00800044 	movi	r2,1
 8005538:	80c00015 	stw	r3,0(r16)
 800553c:	80c00415 	stw	r3,16(r16)
 8005540:	80800515 	stw	r2,20(r16)
 8005544:	003fd106 	br	800548c <__alt_data_end+0xfc00548c>
 8005548:	04c00044 	movi	r19,1
 800554c:	04810004 	movi	r18,1024
 8005550:	003fc006 	br	8005454 <__alt_data_end+0xfc005454>

08005554 <_malloc_r>:
 8005554:	defff504 	addi	sp,sp,-44
 8005558:	dc800315 	stw	r18,12(sp)
 800555c:	dfc00a15 	stw	ra,40(sp)
 8005560:	df000915 	stw	fp,36(sp)
 8005564:	ddc00815 	stw	r23,32(sp)
 8005568:	dd800715 	stw	r22,28(sp)
 800556c:	dd400615 	stw	r21,24(sp)
 8005570:	dd000515 	stw	r20,20(sp)
 8005574:	dcc00415 	stw	r19,16(sp)
 8005578:	dc400215 	stw	r17,8(sp)
 800557c:	dc000115 	stw	r16,4(sp)
 8005580:	288002c4 	addi	r2,r5,11
 8005584:	00c00584 	movi	r3,22
 8005588:	2025883a 	mov	r18,r4
 800558c:	18802a2e 	bgeu	r3,r2,8005638 <_malloc_r+0xe4>
 8005590:	047ffe04 	movi	r17,-8
 8005594:	1462703a 	and	r17,r2,r17
 8005598:	88009e16 	blt	r17,zero,8005814 <_malloc_r+0x2c0>
 800559c:	89409d36 	bltu	r17,r5,8005814 <_malloc_r+0x2c0>
 80055a0:	800d4600 	call	800d460 <__malloc_lock>
 80055a4:	00807dc4 	movi	r2,503
 80055a8:	14402736 	bltu	r2,r17,8005648 <_malloc_r+0xf4>
 80055ac:	8806d0fa 	srli	r3,r17,3
 80055b0:	04c20074 	movhi	r19,2049
 80055b4:	9cff7b04 	addi	r19,r19,-532
 80055b8:	18c5883a 	add	r2,r3,r3
 80055bc:	1085883a 	add	r2,r2,r2
 80055c0:	1085883a 	add	r2,r2,r2
 80055c4:	9885883a 	add	r2,r19,r2
 80055c8:	14000317 	ldw	r16,12(r2)
 80055cc:	80814a26 	beq	r16,r2,8005af8 <_malloc_r+0x5a4>
 80055d0:	80c00117 	ldw	r3,4(r16)
 80055d4:	81000317 	ldw	r4,12(r16)
 80055d8:	00bfff04 	movi	r2,-4
 80055dc:	1884703a 	and	r2,r3,r2
 80055e0:	81400217 	ldw	r5,8(r16)
 80055e4:	8085883a 	add	r2,r16,r2
 80055e8:	10c00117 	ldw	r3,4(r2)
 80055ec:	29000315 	stw	r4,12(r5)
 80055f0:	21400215 	stw	r5,8(r4)
 80055f4:	18c00054 	ori	r3,r3,1
 80055f8:	10c00115 	stw	r3,4(r2)
 80055fc:	9009883a 	mov	r4,r18
 8005600:	800d4800 	call	800d480 <__malloc_unlock>
 8005604:	80800204 	addi	r2,r16,8
 8005608:	dfc00a17 	ldw	ra,40(sp)
 800560c:	df000917 	ldw	fp,36(sp)
 8005610:	ddc00817 	ldw	r23,32(sp)
 8005614:	dd800717 	ldw	r22,28(sp)
 8005618:	dd400617 	ldw	r21,24(sp)
 800561c:	dd000517 	ldw	r20,20(sp)
 8005620:	dcc00417 	ldw	r19,16(sp)
 8005624:	dc800317 	ldw	r18,12(sp)
 8005628:	dc400217 	ldw	r17,8(sp)
 800562c:	dc000117 	ldw	r16,4(sp)
 8005630:	dec00b04 	addi	sp,sp,44
 8005634:	f800283a 	ret
 8005638:	04400404 	movi	r17,16
 800563c:	89407536 	bltu	r17,r5,8005814 <_malloc_r+0x2c0>
 8005640:	800d4600 	call	800d460 <__malloc_lock>
 8005644:	003fd906 	br	80055ac <__alt_data_end+0xfc0055ac>
 8005648:	8806d27a 	srli	r3,r17,9
 800564c:	18007526 	beq	r3,zero,8005824 <_malloc_r+0x2d0>
 8005650:	00800104 	movi	r2,4
 8005654:	10c0ef36 	bltu	r2,r3,8005a14 <_malloc_r+0x4c0>
 8005658:	8806d1ba 	srli	r3,r17,6
 800565c:	19c00e04 	addi	r7,r3,56
 8005660:	39cb883a 	add	r5,r7,r7
 8005664:	04c20074 	movhi	r19,2049
 8005668:	294b883a 	add	r5,r5,r5
 800566c:	9cff7b04 	addi	r19,r19,-532
 8005670:	294b883a 	add	r5,r5,r5
 8005674:	994b883a 	add	r5,r19,r5
 8005678:	2c000317 	ldw	r16,12(r5)
 800567c:	2c000e26 	beq	r5,r16,80056b8 <_malloc_r+0x164>
 8005680:	80800117 	ldw	r2,4(r16)
 8005684:	01bfff04 	movi	r6,-4
 8005688:	010003c4 	movi	r4,15
 800568c:	1184703a 	and	r2,r2,r6
 8005690:	1447c83a 	sub	r3,r2,r17
 8005694:	20c00716 	blt	r4,r3,80056b4 <_malloc_r+0x160>
 8005698:	1800650e 	bge	r3,zero,8005830 <_malloc_r+0x2dc>
 800569c:	84000317 	ldw	r16,12(r16)
 80056a0:	2c000526 	beq	r5,r16,80056b8 <_malloc_r+0x164>
 80056a4:	80800117 	ldw	r2,4(r16)
 80056a8:	1184703a 	and	r2,r2,r6
 80056ac:	1447c83a 	sub	r3,r2,r17
 80056b0:	20fff90e 	bge	r4,r3,8005698 <__alt_data_end+0xfc005698>
 80056b4:	39ffffc4 	addi	r7,r7,-1
 80056b8:	38c00044 	addi	r3,r7,1
 80056bc:	01820074 	movhi	r6,2049
 80056c0:	9c000417 	ldw	r16,16(r19)
 80056c4:	31bf7b04 	addi	r6,r6,-532
 80056c8:	32400204 	addi	r9,r6,8
 80056cc:	82410326 	beq	r16,r9,8005adc <_malloc_r+0x588>
 80056d0:	81000117 	ldw	r4,4(r16)
 80056d4:	00bfff04 	movi	r2,-4
 80056d8:	208e703a 	and	r7,r4,r2
 80056dc:	3c45c83a 	sub	r2,r7,r17
 80056e0:	010003c4 	movi	r4,15
 80056e4:	2080ee16 	blt	r4,r2,8005aa0 <_malloc_r+0x54c>
 80056e8:	32400515 	stw	r9,20(r6)
 80056ec:	32400415 	stw	r9,16(r6)
 80056f0:	1000510e 	bge	r2,zero,8005838 <_malloc_r+0x2e4>
 80056f4:	00807fc4 	movi	r2,511
 80056f8:	11c0ce36 	bltu	r2,r7,8005a34 <_malloc_r+0x4e0>
 80056fc:	3808d0fa 	srli	r4,r7,3
 8005700:	01c00044 	movi	r7,1
 8005704:	30800117 	ldw	r2,4(r6)
 8005708:	210b883a 	add	r5,r4,r4
 800570c:	294b883a 	add	r5,r5,r5
 8005710:	2009d0ba 	srai	r4,r4,2
 8005714:	294b883a 	add	r5,r5,r5
 8005718:	298b883a 	add	r5,r5,r6
 800571c:	2a000217 	ldw	r8,8(r5)
 8005720:	3908983a 	sll	r4,r7,r4
 8005724:	81400315 	stw	r5,12(r16)
 8005728:	82000215 	stw	r8,8(r16)
 800572c:	2088b03a 	or	r4,r4,r2
 8005730:	2c000215 	stw	r16,8(r5)
 8005734:	31000115 	stw	r4,4(r6)
 8005738:	44000315 	stw	r16,12(r8)
 800573c:	1805d0ba 	srai	r2,r3,2
 8005740:	01400044 	movi	r5,1
 8005744:	288a983a 	sll	r5,r5,r2
 8005748:	21404336 	bltu	r4,r5,8005858 <_malloc_r+0x304>
 800574c:	2144703a 	and	r2,r4,r5
 8005750:	10000a1e 	bne	r2,zero,800577c <_malloc_r+0x228>
 8005754:	00bfff04 	movi	r2,-4
 8005758:	294b883a 	add	r5,r5,r5
 800575c:	1886703a 	and	r3,r3,r2
 8005760:	2144703a 	and	r2,r4,r5
 8005764:	18c00104 	addi	r3,r3,4
 8005768:	1000041e 	bne	r2,zero,800577c <_malloc_r+0x228>
 800576c:	294b883a 	add	r5,r5,r5
 8005770:	2144703a 	and	r2,r4,r5
 8005774:	18c00104 	addi	r3,r3,4
 8005778:	103ffc26 	beq	r2,zero,800576c <__alt_data_end+0xfc00576c>
 800577c:	023fff04 	movi	r8,-4
 8005780:	01c003c4 	movi	r7,15
 8005784:	18c5883a 	add	r2,r3,r3
 8005788:	1085883a 	add	r2,r2,r2
 800578c:	1085883a 	add	r2,r2,r2
 8005790:	9895883a 	add	r10,r19,r2
 8005794:	52c00304 	addi	r11,r10,12
 8005798:	1819883a 	mov	r12,r3
 800579c:	5c000017 	ldw	r16,0(r11)
 80057a0:	59bffd04 	addi	r6,r11,-12
 80057a4:	8180041e 	bne	r16,r6,80057b8 <_malloc_r+0x264>
 80057a8:	0000ce06 	br	8005ae4 <_malloc_r+0x590>
 80057ac:	2000d70e 	bge	r4,zero,8005b0c <_malloc_r+0x5b8>
 80057b0:	84000317 	ldw	r16,12(r16)
 80057b4:	8180cb26 	beq	r16,r6,8005ae4 <_malloc_r+0x590>
 80057b8:	80800117 	ldw	r2,4(r16)
 80057bc:	1204703a 	and	r2,r2,r8
 80057c0:	1449c83a 	sub	r4,r2,r17
 80057c4:	393ff90e 	bge	r7,r4,80057ac <__alt_data_end+0xfc0057ac>
 80057c8:	80800317 	ldw	r2,12(r16)
 80057cc:	80c00217 	ldw	r3,8(r16)
 80057d0:	89400054 	ori	r5,r17,1
 80057d4:	81400115 	stw	r5,4(r16)
 80057d8:	18800315 	stw	r2,12(r3)
 80057dc:	10c00215 	stw	r3,8(r2)
 80057e0:	8463883a 	add	r17,r16,r17
 80057e4:	9c400515 	stw	r17,20(r19)
 80057e8:	9c400415 	stw	r17,16(r19)
 80057ec:	20800054 	ori	r2,r4,1
 80057f0:	88800115 	stw	r2,4(r17)
 80057f4:	8a400315 	stw	r9,12(r17)
 80057f8:	8a400215 	stw	r9,8(r17)
 80057fc:	8923883a 	add	r17,r17,r4
 8005800:	89000015 	stw	r4,0(r17)
 8005804:	9009883a 	mov	r4,r18
 8005808:	800d4800 	call	800d480 <__malloc_unlock>
 800580c:	80800204 	addi	r2,r16,8
 8005810:	003f7d06 	br	8005608 <__alt_data_end+0xfc005608>
 8005814:	00800304 	movi	r2,12
 8005818:	90800015 	stw	r2,0(r18)
 800581c:	0005883a 	mov	r2,zero
 8005820:	003f7906 	br	8005608 <__alt_data_end+0xfc005608>
 8005824:	01401f84 	movi	r5,126
 8005828:	01c00fc4 	movi	r7,63
 800582c:	003f8d06 	br	8005664 <__alt_data_end+0xfc005664>
 8005830:	81000317 	ldw	r4,12(r16)
 8005834:	003f6a06 	br	80055e0 <__alt_data_end+0xfc0055e0>
 8005838:	81c5883a 	add	r2,r16,r7
 800583c:	10c00117 	ldw	r3,4(r2)
 8005840:	9009883a 	mov	r4,r18
 8005844:	18c00054 	ori	r3,r3,1
 8005848:	10c00115 	stw	r3,4(r2)
 800584c:	800d4800 	call	800d480 <__malloc_unlock>
 8005850:	80800204 	addi	r2,r16,8
 8005854:	003f6c06 	br	8005608 <__alt_data_end+0xfc005608>
 8005858:	9c000217 	ldw	r16,8(r19)
 800585c:	00bfff04 	movi	r2,-4
 8005860:	85800117 	ldw	r22,4(r16)
 8005864:	b0ac703a 	and	r22,r22,r2
 8005868:	b4400336 	bltu	r22,r17,8005878 <_malloc_r+0x324>
 800586c:	b445c83a 	sub	r2,r22,r17
 8005870:	00c003c4 	movi	r3,15
 8005874:	18805d16 	blt	r3,r2,80059ec <_malloc_r+0x498>
 8005878:	05c20074 	movhi	r23,2049
 800587c:	00820074 	movhi	r2,2049
 8005880:	bdc50204 	addi	r23,r23,5128
 8005884:	108bcf04 	addi	r2,r2,12092
 8005888:	15400017 	ldw	r21,0(r2)
 800588c:	b9000017 	ldw	r4,0(r23)
 8005890:	00ffffc4 	movi	r3,-1
 8005894:	858d883a 	add	r6,r16,r22
 8005898:	8d6b883a 	add	r21,r17,r21
 800589c:	20c0e426 	beq	r4,r3,8005c30 <_malloc_r+0x6dc>
 80058a0:	ad4403c4 	addi	r21,r21,4111
 80058a4:	00fc0004 	movi	r3,-4096
 80058a8:	a8ea703a 	and	r21,r21,r3
 80058ac:	9009883a 	mov	r4,r18
 80058b0:	a80b883a 	mov	r5,r21
 80058b4:	d9800015 	stw	r6,0(sp)
 80058b8:	80077f80 	call	80077f8 <_sbrk_r>
 80058bc:	00ffffc4 	movi	r3,-1
 80058c0:	1029883a 	mov	r20,r2
 80058c4:	d9800017 	ldw	r6,0(sp)
 80058c8:	10c0a426 	beq	r2,r3,8005b5c <_malloc_r+0x608>
 80058cc:	1180a236 	bltu	r2,r6,8005b58 <_malloc_r+0x604>
 80058d0:	07020074 	movhi	fp,2049
 80058d4:	e70bd804 	addi	fp,fp,12128
 80058d8:	e0c00017 	ldw	r3,0(fp)
 80058dc:	a8c7883a 	add	r3,r21,r3
 80058e0:	e0c00015 	stw	r3,0(fp)
 80058e4:	3500da26 	beq	r6,r20,8005c50 <_malloc_r+0x6fc>
 80058e8:	b9000017 	ldw	r4,0(r23)
 80058ec:	00bfffc4 	movi	r2,-1
 80058f0:	2080e426 	beq	r4,r2,8005c84 <_malloc_r+0x730>
 80058f4:	a185c83a 	sub	r2,r20,r6
 80058f8:	1885883a 	add	r2,r3,r2
 80058fc:	e0800015 	stw	r2,0(fp)
 8005900:	a0c001cc 	andi	r3,r20,7
 8005904:	1800b526 	beq	r3,zero,8005bdc <_malloc_r+0x688>
 8005908:	a0e9c83a 	sub	r20,r20,r3
 800590c:	00840204 	movi	r2,4104
 8005910:	a5000204 	addi	r20,r20,8
 8005914:	10c7c83a 	sub	r3,r2,r3
 8005918:	a545883a 	add	r2,r20,r21
 800591c:	1083ffcc 	andi	r2,r2,4095
 8005920:	18abc83a 	sub	r21,r3,r2
 8005924:	9009883a 	mov	r4,r18
 8005928:	a80b883a 	mov	r5,r21
 800592c:	80077f80 	call	80077f8 <_sbrk_r>
 8005930:	00ffffc4 	movi	r3,-1
 8005934:	10c0d026 	beq	r2,r3,8005c78 <_malloc_r+0x724>
 8005938:	1507c83a 	sub	r3,r2,r20
 800593c:	a8c7883a 	add	r3,r21,r3
 8005940:	18c00054 	ori	r3,r3,1
 8005944:	e0800017 	ldw	r2,0(fp)
 8005948:	9d000215 	stw	r20,8(r19)
 800594c:	a0c00115 	stw	r3,4(r20)
 8005950:	a887883a 	add	r3,r21,r2
 8005954:	e0c00015 	stw	r3,0(fp)
 8005958:	84c00e26 	beq	r16,r19,8005994 <_malloc_r+0x440>
 800595c:	018003c4 	movi	r6,15
 8005960:	3580a02e 	bgeu	r6,r22,8005be4 <_malloc_r+0x690>
 8005964:	81400117 	ldw	r5,4(r16)
 8005968:	013ffe04 	movi	r4,-8
 800596c:	b0bffd04 	addi	r2,r22,-12
 8005970:	1104703a 	and	r2,r2,r4
 8005974:	2900004c 	andi	r4,r5,1
 8005978:	1108b03a 	or	r4,r2,r4
 800597c:	81000115 	stw	r4,4(r16)
 8005980:	01400144 	movi	r5,5
 8005984:	8089883a 	add	r4,r16,r2
 8005988:	21400115 	stw	r5,4(r4)
 800598c:	21400215 	stw	r5,8(r4)
 8005990:	3080c036 	bltu	r6,r2,8005c94 <_malloc_r+0x740>
 8005994:	00820074 	movhi	r2,2049
 8005998:	108bce04 	addi	r2,r2,12088
 800599c:	11000017 	ldw	r4,0(r2)
 80059a0:	20c0012e 	bgeu	r4,r3,80059a8 <_malloc_r+0x454>
 80059a4:	10c00015 	stw	r3,0(r2)
 80059a8:	00820074 	movhi	r2,2049
 80059ac:	108bcd04 	addi	r2,r2,12084
 80059b0:	11000017 	ldw	r4,0(r2)
 80059b4:	9c000217 	ldw	r16,8(r19)
 80059b8:	20c0012e 	bgeu	r4,r3,80059c0 <_malloc_r+0x46c>
 80059bc:	10c00015 	stw	r3,0(r2)
 80059c0:	80c00117 	ldw	r3,4(r16)
 80059c4:	00bfff04 	movi	r2,-4
 80059c8:	1886703a 	and	r3,r3,r2
 80059cc:	1c45c83a 	sub	r2,r3,r17
 80059d0:	1c400236 	bltu	r3,r17,80059dc <_malloc_r+0x488>
 80059d4:	00c003c4 	movi	r3,15
 80059d8:	18800416 	blt	r3,r2,80059ec <_malloc_r+0x498>
 80059dc:	9009883a 	mov	r4,r18
 80059e0:	800d4800 	call	800d480 <__malloc_unlock>
 80059e4:	0005883a 	mov	r2,zero
 80059e8:	003f0706 	br	8005608 <__alt_data_end+0xfc005608>
 80059ec:	88c00054 	ori	r3,r17,1
 80059f0:	80c00115 	stw	r3,4(r16)
 80059f4:	8463883a 	add	r17,r16,r17
 80059f8:	10800054 	ori	r2,r2,1
 80059fc:	9c400215 	stw	r17,8(r19)
 8005a00:	88800115 	stw	r2,4(r17)
 8005a04:	9009883a 	mov	r4,r18
 8005a08:	800d4800 	call	800d480 <__malloc_unlock>
 8005a0c:	80800204 	addi	r2,r16,8
 8005a10:	003efd06 	br	8005608 <__alt_data_end+0xfc005608>
 8005a14:	00800504 	movi	r2,20
 8005a18:	10c0482e 	bgeu	r2,r3,8005b3c <_malloc_r+0x5e8>
 8005a1c:	00801504 	movi	r2,84
 8005a20:	10c06836 	bltu	r2,r3,8005bc4 <_malloc_r+0x670>
 8005a24:	8806d33a 	srli	r3,r17,12
 8005a28:	19c01b84 	addi	r7,r3,110
 8005a2c:	39cb883a 	add	r5,r7,r7
 8005a30:	003f0c06 	br	8005664 <__alt_data_end+0xfc005664>
 8005a34:	3804d27a 	srli	r2,r7,9
 8005a38:	01000104 	movi	r4,4
 8005a3c:	2080422e 	bgeu	r4,r2,8005b48 <_malloc_r+0x5f4>
 8005a40:	01000504 	movi	r4,20
 8005a44:	20807c36 	bltu	r4,r2,8005c38 <_malloc_r+0x6e4>
 8005a48:	110016c4 	addi	r4,r2,91
 8005a4c:	210b883a 	add	r5,r4,r4
 8005a50:	294b883a 	add	r5,r5,r5
 8005a54:	294b883a 	add	r5,r5,r5
 8005a58:	994b883a 	add	r5,r19,r5
 8005a5c:	28800217 	ldw	r2,8(r5)
 8005a60:	02020074 	movhi	r8,2049
 8005a64:	423f7b04 	addi	r8,r8,-532
 8005a68:	11406326 	beq	r2,r5,8005bf8 <_malloc_r+0x6a4>
 8005a6c:	01bfff04 	movi	r6,-4
 8005a70:	11000117 	ldw	r4,4(r2)
 8005a74:	2188703a 	and	r4,r4,r6
 8005a78:	3900022e 	bgeu	r7,r4,8005a84 <_malloc_r+0x530>
 8005a7c:	10800217 	ldw	r2,8(r2)
 8005a80:	28bffb1e 	bne	r5,r2,8005a70 <__alt_data_end+0xfc005a70>
 8005a84:	11800317 	ldw	r6,12(r2)
 8005a88:	99000117 	ldw	r4,4(r19)
 8005a8c:	81800315 	stw	r6,12(r16)
 8005a90:	80800215 	stw	r2,8(r16)
 8005a94:	34000215 	stw	r16,8(r6)
 8005a98:	14000315 	stw	r16,12(r2)
 8005a9c:	003f2706 	br	800573c <__alt_data_end+0xfc00573c>
 8005aa0:	88c00054 	ori	r3,r17,1
 8005aa4:	80c00115 	stw	r3,4(r16)
 8005aa8:	8463883a 	add	r17,r16,r17
 8005aac:	34400515 	stw	r17,20(r6)
 8005ab0:	34400415 	stw	r17,16(r6)
 8005ab4:	10c00054 	ori	r3,r2,1
 8005ab8:	8a400315 	stw	r9,12(r17)
 8005abc:	8a400215 	stw	r9,8(r17)
 8005ac0:	88c00115 	stw	r3,4(r17)
 8005ac4:	88a3883a 	add	r17,r17,r2
 8005ac8:	88800015 	stw	r2,0(r17)
 8005acc:	9009883a 	mov	r4,r18
 8005ad0:	800d4800 	call	800d480 <__malloc_unlock>
 8005ad4:	80800204 	addi	r2,r16,8
 8005ad8:	003ecb06 	br	8005608 <__alt_data_end+0xfc005608>
 8005adc:	31000117 	ldw	r4,4(r6)
 8005ae0:	003f1606 	br	800573c <__alt_data_end+0xfc00573c>
 8005ae4:	63000044 	addi	r12,r12,1
 8005ae8:	608000cc 	andi	r2,r12,3
 8005aec:	5ac00204 	addi	r11,r11,8
 8005af0:	103f2a1e 	bne	r2,zero,800579c <__alt_data_end+0xfc00579c>
 8005af4:	00002106 	br	8005b7c <_malloc_r+0x628>
 8005af8:	80800204 	addi	r2,r16,8
 8005afc:	84000517 	ldw	r16,20(r16)
 8005b00:	143eb31e 	bne	r2,r16,80055d0 <__alt_data_end+0xfc0055d0>
 8005b04:	18c00084 	addi	r3,r3,2
 8005b08:	003eec06 	br	80056bc <__alt_data_end+0xfc0056bc>
 8005b0c:	8085883a 	add	r2,r16,r2
 8005b10:	10c00117 	ldw	r3,4(r2)
 8005b14:	81000317 	ldw	r4,12(r16)
 8005b18:	81400217 	ldw	r5,8(r16)
 8005b1c:	18c00054 	ori	r3,r3,1
 8005b20:	10c00115 	stw	r3,4(r2)
 8005b24:	29000315 	stw	r4,12(r5)
 8005b28:	21400215 	stw	r5,8(r4)
 8005b2c:	9009883a 	mov	r4,r18
 8005b30:	800d4800 	call	800d480 <__malloc_unlock>
 8005b34:	80800204 	addi	r2,r16,8
 8005b38:	003eb306 	br	8005608 <__alt_data_end+0xfc005608>
 8005b3c:	19c016c4 	addi	r7,r3,91
 8005b40:	39cb883a 	add	r5,r7,r7
 8005b44:	003ec706 	br	8005664 <__alt_data_end+0xfc005664>
 8005b48:	3804d1ba 	srli	r2,r7,6
 8005b4c:	11000e04 	addi	r4,r2,56
 8005b50:	210b883a 	add	r5,r4,r4
 8005b54:	003fbe06 	br	8005a50 <__alt_data_end+0xfc005a50>
 8005b58:	84ff5d26 	beq	r16,r19,80058d0 <__alt_data_end+0xfc0058d0>
 8005b5c:	9c000217 	ldw	r16,8(r19)
 8005b60:	00bfff04 	movi	r2,-4
 8005b64:	80c00117 	ldw	r3,4(r16)
 8005b68:	1886703a 	and	r3,r3,r2
 8005b6c:	003f9706 	br	80059cc <__alt_data_end+0xfc0059cc>
 8005b70:	52800017 	ldw	r10,0(r10)
 8005b74:	18ffffc4 	addi	r3,r3,-1
 8005b78:	50805c1e 	bne	r10,r2,8005cec <_malloc_r+0x798>
 8005b7c:	190000cc 	andi	r4,r3,3
 8005b80:	50bffe04 	addi	r2,r10,-8
 8005b84:	203ffa1e 	bne	r4,zero,8005b70 <__alt_data_end+0xfc005b70>
 8005b88:	98800117 	ldw	r2,4(r19)
 8005b8c:	0146303a 	nor	r3,zero,r5
 8005b90:	1884703a 	and	r2,r3,r2
 8005b94:	98800115 	stw	r2,4(r19)
 8005b98:	294b883a 	add	r5,r5,r5
 8005b9c:	117f2e36 	bltu	r2,r5,8005858 <__alt_data_end+0xfc005858>
 8005ba0:	283f2d26 	beq	r5,zero,8005858 <__alt_data_end+0xfc005858>
 8005ba4:	1146703a 	and	r3,r2,r5
 8005ba8:	1800521e 	bne	r3,zero,8005cf4 <_malloc_r+0x7a0>
 8005bac:	6007883a 	mov	r3,r12
 8005bb0:	294b883a 	add	r5,r5,r5
 8005bb4:	1148703a 	and	r4,r2,r5
 8005bb8:	18c00104 	addi	r3,r3,4
 8005bbc:	203ffc26 	beq	r4,zero,8005bb0 <__alt_data_end+0xfc005bb0>
 8005bc0:	003ef006 	br	8005784 <__alt_data_end+0xfc005784>
 8005bc4:	00805504 	movi	r2,340
 8005bc8:	10c01336 	bltu	r2,r3,8005c18 <_malloc_r+0x6c4>
 8005bcc:	8806d3fa 	srli	r3,r17,15
 8005bd0:	19c01dc4 	addi	r7,r3,119
 8005bd4:	39cb883a 	add	r5,r7,r7
 8005bd8:	003ea206 	br	8005664 <__alt_data_end+0xfc005664>
 8005bdc:	00c40004 	movi	r3,4096
 8005be0:	003f4d06 	br	8005918 <__alt_data_end+0xfc005918>
 8005be4:	00800044 	movi	r2,1
 8005be8:	a0800115 	stw	r2,4(r20)
 8005bec:	a021883a 	mov	r16,r20
 8005bf0:	0007883a 	mov	r3,zero
 8005bf4:	003f7506 	br	80059cc <__alt_data_end+0xfc0059cc>
 8005bf8:	200bd0ba 	srai	r5,r4,2
 8005bfc:	01800044 	movi	r6,1
 8005c00:	41000117 	ldw	r4,4(r8)
 8005c04:	314a983a 	sll	r5,r6,r5
 8005c08:	100d883a 	mov	r6,r2
 8005c0c:	2908b03a 	or	r4,r5,r4
 8005c10:	41000115 	stw	r4,4(r8)
 8005c14:	003f9d06 	br	8005a8c <__alt_data_end+0xfc005a8c>
 8005c18:	00815504 	movi	r2,1364
 8005c1c:	10c01336 	bltu	r2,r3,8005c6c <_malloc_r+0x718>
 8005c20:	8806d4ba 	srli	r3,r17,18
 8005c24:	19c01f04 	addi	r7,r3,124
 8005c28:	39cb883a 	add	r5,r7,r7
 8005c2c:	003e8d06 	br	8005664 <__alt_data_end+0xfc005664>
 8005c30:	ad400404 	addi	r21,r21,16
 8005c34:	003f1d06 	br	80058ac <__alt_data_end+0xfc0058ac>
 8005c38:	01001504 	movi	r4,84
 8005c3c:	20801c36 	bltu	r4,r2,8005cb0 <_malloc_r+0x75c>
 8005c40:	3804d33a 	srli	r2,r7,12
 8005c44:	11001b84 	addi	r4,r2,110
 8005c48:	210b883a 	add	r5,r4,r4
 8005c4c:	003f8006 	br	8005a50 <__alt_data_end+0xfc005a50>
 8005c50:	3083ffcc 	andi	r2,r6,4095
 8005c54:	103f241e 	bne	r2,zero,80058e8 <__alt_data_end+0xfc0058e8>
 8005c58:	99000217 	ldw	r4,8(r19)
 8005c5c:	ad85883a 	add	r2,r21,r22
 8005c60:	10800054 	ori	r2,r2,1
 8005c64:	20800115 	stw	r2,4(r4)
 8005c68:	003f4a06 	br	8005994 <__alt_data_end+0xfc005994>
 8005c6c:	01403f04 	movi	r5,252
 8005c70:	01c01f84 	movi	r7,126
 8005c74:	003e7b06 	br	8005664 <__alt_data_end+0xfc005664>
 8005c78:	00c00044 	movi	r3,1
 8005c7c:	002b883a 	mov	r21,zero
 8005c80:	003f3006 	br	8005944 <__alt_data_end+0xfc005944>
 8005c84:	00820074 	movhi	r2,2049
 8005c88:	10850204 	addi	r2,r2,5128
 8005c8c:	15000015 	stw	r20,0(r2)
 8005c90:	003f1b06 	br	8005900 <__alt_data_end+0xfc005900>
 8005c94:	9009883a 	mov	r4,r18
 8005c98:	81400204 	addi	r5,r16,8
 8005c9c:	80049b80 	call	80049b8 <_free_r>
 8005ca0:	00820074 	movhi	r2,2049
 8005ca4:	108bd804 	addi	r2,r2,12128
 8005ca8:	10c00017 	ldw	r3,0(r2)
 8005cac:	003f3906 	br	8005994 <__alt_data_end+0xfc005994>
 8005cb0:	01005504 	movi	r4,340
 8005cb4:	20800436 	bltu	r4,r2,8005cc8 <_malloc_r+0x774>
 8005cb8:	3804d3fa 	srli	r2,r7,15
 8005cbc:	11001dc4 	addi	r4,r2,119
 8005cc0:	210b883a 	add	r5,r4,r4
 8005cc4:	003f6206 	br	8005a50 <__alt_data_end+0xfc005a50>
 8005cc8:	01015504 	movi	r4,1364
 8005ccc:	20800436 	bltu	r4,r2,8005ce0 <_malloc_r+0x78c>
 8005cd0:	3804d4ba 	srli	r2,r7,18
 8005cd4:	11001f04 	addi	r4,r2,124
 8005cd8:	210b883a 	add	r5,r4,r4
 8005cdc:	003f5c06 	br	8005a50 <__alt_data_end+0xfc005a50>
 8005ce0:	01403f04 	movi	r5,252
 8005ce4:	01001f84 	movi	r4,126
 8005ce8:	003f5906 	br	8005a50 <__alt_data_end+0xfc005a50>
 8005cec:	98800117 	ldw	r2,4(r19)
 8005cf0:	003fa906 	br	8005b98 <__alt_data_end+0xfc005b98>
 8005cf4:	6007883a 	mov	r3,r12
 8005cf8:	003ea206 	br	8005784 <__alt_data_end+0xfc005784>

08005cfc <memchr>:
 8005cfc:	208000cc 	andi	r2,r4,3
 8005d00:	280f883a 	mov	r7,r5
 8005d04:	10003526 	beq	r2,zero,8005ddc <memchr+0xe0>
 8005d08:	30bfffc4 	addi	r2,r6,-1
 8005d0c:	30001b26 	beq	r6,zero,8005d7c <memchr+0x80>
 8005d10:	21800003 	ldbu	r6,0(r4)
 8005d14:	28c03fcc 	andi	r3,r5,255
 8005d18:	30c01a26 	beq	r6,r3,8005d84 <memchr+0x88>
 8005d1c:	180d883a 	mov	r6,r3
 8005d20:	00000406 	br	8005d34 <memchr+0x38>
 8005d24:	10001526 	beq	r2,zero,8005d7c <memchr+0x80>
 8005d28:	20c00003 	ldbu	r3,0(r4)
 8005d2c:	10bfffc4 	addi	r2,r2,-1
 8005d30:	19801426 	beq	r3,r6,8005d84 <memchr+0x88>
 8005d34:	21000044 	addi	r4,r4,1
 8005d38:	20c000cc 	andi	r3,r4,3
 8005d3c:	183ff91e 	bne	r3,zero,8005d24 <__alt_data_end+0xfc005d24>
 8005d40:	024000c4 	movi	r9,3
 8005d44:	48801136 	bltu	r9,r2,8005d8c <memchr+0x90>
 8005d48:	10000c26 	beq	r2,zero,8005d7c <memchr+0x80>
 8005d4c:	20c00003 	ldbu	r3,0(r4)
 8005d50:	29403fcc 	andi	r5,r5,255
 8005d54:	19400b26 	beq	r3,r5,8005d84 <memchr+0x88>
 8005d58:	20c00044 	addi	r3,r4,1
 8005d5c:	2085883a 	add	r2,r4,r2
 8005d60:	39803fcc 	andi	r6,r7,255
 8005d64:	00000306 	br	8005d74 <memchr+0x78>
 8005d68:	18c00044 	addi	r3,r3,1
 8005d6c:	197fffc3 	ldbu	r5,-1(r3)
 8005d70:	29800426 	beq	r5,r6,8005d84 <memchr+0x88>
 8005d74:	1809883a 	mov	r4,r3
 8005d78:	18bffb1e 	bne	r3,r2,8005d68 <__alt_data_end+0xfc005d68>
 8005d7c:	0005883a 	mov	r2,zero
 8005d80:	f800283a 	ret
 8005d84:	2005883a 	mov	r2,r4
 8005d88:	f800283a 	ret
 8005d8c:	28c03fcc 	andi	r3,r5,255
 8005d90:	1810923a 	slli	r8,r3,8
 8005d94:	02ffbff4 	movhi	r11,65279
 8005d98:	02a02074 	movhi	r10,32897
 8005d9c:	40c6b03a 	or	r3,r8,r3
 8005da0:	1810943a 	slli	r8,r3,16
 8005da4:	5affbfc4 	addi	r11,r11,-257
 8005da8:	52a02004 	addi	r10,r10,-32640
 8005dac:	40d0b03a 	or	r8,r8,r3
 8005db0:	20c00017 	ldw	r3,0(r4)
 8005db4:	40c6f03a 	xor	r3,r8,r3
 8005db8:	1acd883a 	add	r6,r3,r11
 8005dbc:	00c6303a 	nor	r3,zero,r3
 8005dc0:	30c6703a 	and	r3,r6,r3
 8005dc4:	1a86703a 	and	r3,r3,r10
 8005dc8:	183fdf1e 	bne	r3,zero,8005d48 <__alt_data_end+0xfc005d48>
 8005dcc:	10bfff04 	addi	r2,r2,-4
 8005dd0:	21000104 	addi	r4,r4,4
 8005dd4:	48bff636 	bltu	r9,r2,8005db0 <__alt_data_end+0xfc005db0>
 8005dd8:	003fdb06 	br	8005d48 <__alt_data_end+0xfc005d48>
 8005ddc:	3005883a 	mov	r2,r6
 8005de0:	003fd706 	br	8005d40 <__alt_data_end+0xfc005d40>

08005de4 <memcpy>:
 8005de4:	deffff04 	addi	sp,sp,-4
 8005de8:	dc000015 	stw	r16,0(sp)
 8005dec:	00c003c4 	movi	r3,15
 8005df0:	2005883a 	mov	r2,r4
 8005df4:	1980432e 	bgeu	r3,r6,8005f04 <memcpy+0x120>
 8005df8:	2146b03a 	or	r3,r4,r5
 8005dfc:	18c000cc 	andi	r3,r3,3
 8005e00:	1800421e 	bne	r3,zero,8005f0c <memcpy+0x128>
 8005e04:	343ffc04 	addi	r16,r6,-16
 8005e08:	8020d13a 	srli	r16,r16,4
 8005e0c:	28c00104 	addi	r3,r5,4
 8005e10:	23400104 	addi	r13,r4,4
 8005e14:	801e913a 	slli	r15,r16,4
 8005e18:	2b000204 	addi	r12,r5,8
 8005e1c:	22c00204 	addi	r11,r4,8
 8005e20:	7bc00504 	addi	r15,r15,20
 8005e24:	2a800304 	addi	r10,r5,12
 8005e28:	22400304 	addi	r9,r4,12
 8005e2c:	2bdf883a 	add	r15,r5,r15
 8005e30:	2811883a 	mov	r8,r5
 8005e34:	200f883a 	mov	r7,r4
 8005e38:	41000017 	ldw	r4,0(r8)
 8005e3c:	39c00404 	addi	r7,r7,16
 8005e40:	18c00404 	addi	r3,r3,16
 8005e44:	393ffc15 	stw	r4,-16(r7)
 8005e48:	1bbffc17 	ldw	r14,-16(r3)
 8005e4c:	6b400404 	addi	r13,r13,16
 8005e50:	5ac00404 	addi	r11,r11,16
 8005e54:	6bbffc15 	stw	r14,-16(r13)
 8005e58:	63800017 	ldw	r14,0(r12)
 8005e5c:	4a400404 	addi	r9,r9,16
 8005e60:	42000404 	addi	r8,r8,16
 8005e64:	5bbffc15 	stw	r14,-16(r11)
 8005e68:	53800017 	ldw	r14,0(r10)
 8005e6c:	63000404 	addi	r12,r12,16
 8005e70:	52800404 	addi	r10,r10,16
 8005e74:	4bbffc15 	stw	r14,-16(r9)
 8005e78:	1bffef1e 	bne	r3,r15,8005e38 <__alt_data_end+0xfc005e38>
 8005e7c:	81c00044 	addi	r7,r16,1
 8005e80:	380e913a 	slli	r7,r7,4
 8005e84:	310003cc 	andi	r4,r6,15
 8005e88:	02c000c4 	movi	r11,3
 8005e8c:	11c7883a 	add	r3,r2,r7
 8005e90:	29cb883a 	add	r5,r5,r7
 8005e94:	59001f2e 	bgeu	r11,r4,8005f14 <memcpy+0x130>
 8005e98:	1813883a 	mov	r9,r3
 8005e9c:	2811883a 	mov	r8,r5
 8005ea0:	200f883a 	mov	r7,r4
 8005ea4:	42800017 	ldw	r10,0(r8)
 8005ea8:	4a400104 	addi	r9,r9,4
 8005eac:	39ffff04 	addi	r7,r7,-4
 8005eb0:	4abfff15 	stw	r10,-4(r9)
 8005eb4:	42000104 	addi	r8,r8,4
 8005eb8:	59fffa36 	bltu	r11,r7,8005ea4 <__alt_data_end+0xfc005ea4>
 8005ebc:	213fff04 	addi	r4,r4,-4
 8005ec0:	2008d0ba 	srli	r4,r4,2
 8005ec4:	318000cc 	andi	r6,r6,3
 8005ec8:	21000044 	addi	r4,r4,1
 8005ecc:	2109883a 	add	r4,r4,r4
 8005ed0:	2109883a 	add	r4,r4,r4
 8005ed4:	1907883a 	add	r3,r3,r4
 8005ed8:	290b883a 	add	r5,r5,r4
 8005edc:	30000626 	beq	r6,zero,8005ef8 <memcpy+0x114>
 8005ee0:	198d883a 	add	r6,r3,r6
 8005ee4:	29c00003 	ldbu	r7,0(r5)
 8005ee8:	18c00044 	addi	r3,r3,1
 8005eec:	29400044 	addi	r5,r5,1
 8005ef0:	19ffffc5 	stb	r7,-1(r3)
 8005ef4:	19bffb1e 	bne	r3,r6,8005ee4 <__alt_data_end+0xfc005ee4>
 8005ef8:	dc000017 	ldw	r16,0(sp)
 8005efc:	dec00104 	addi	sp,sp,4
 8005f00:	f800283a 	ret
 8005f04:	2007883a 	mov	r3,r4
 8005f08:	003ff406 	br	8005edc <__alt_data_end+0xfc005edc>
 8005f0c:	2007883a 	mov	r3,r4
 8005f10:	003ff306 	br	8005ee0 <__alt_data_end+0xfc005ee0>
 8005f14:	200d883a 	mov	r6,r4
 8005f18:	003ff006 	br	8005edc <__alt_data_end+0xfc005edc>

08005f1c <memmove>:
 8005f1c:	2005883a 	mov	r2,r4
 8005f20:	29000b2e 	bgeu	r5,r4,8005f50 <memmove+0x34>
 8005f24:	298f883a 	add	r7,r5,r6
 8005f28:	21c0092e 	bgeu	r4,r7,8005f50 <memmove+0x34>
 8005f2c:	2187883a 	add	r3,r4,r6
 8005f30:	198bc83a 	sub	r5,r3,r6
 8005f34:	30004b26 	beq	r6,zero,8006064 <memmove+0x148>
 8005f38:	39ffffc4 	addi	r7,r7,-1
 8005f3c:	39000003 	ldbu	r4,0(r7)
 8005f40:	18ffffc4 	addi	r3,r3,-1
 8005f44:	19000005 	stb	r4,0(r3)
 8005f48:	197ffb1e 	bne	r3,r5,8005f38 <__alt_data_end+0xfc005f38>
 8005f4c:	f800283a 	ret
 8005f50:	00c003c4 	movi	r3,15
 8005f54:	1980412e 	bgeu	r3,r6,800605c <memmove+0x140>
 8005f58:	1146b03a 	or	r3,r2,r5
 8005f5c:	18c000cc 	andi	r3,r3,3
 8005f60:	1800411e 	bne	r3,zero,8006068 <memmove+0x14c>
 8005f64:	33fffc04 	addi	r15,r6,-16
 8005f68:	781ed13a 	srli	r15,r15,4
 8005f6c:	28c00104 	addi	r3,r5,4
 8005f70:	13400104 	addi	r13,r2,4
 8005f74:	781c913a 	slli	r14,r15,4
 8005f78:	2b000204 	addi	r12,r5,8
 8005f7c:	12c00204 	addi	r11,r2,8
 8005f80:	73800504 	addi	r14,r14,20
 8005f84:	2a800304 	addi	r10,r5,12
 8005f88:	12400304 	addi	r9,r2,12
 8005f8c:	2b9d883a 	add	r14,r5,r14
 8005f90:	2811883a 	mov	r8,r5
 8005f94:	100f883a 	mov	r7,r2
 8005f98:	41000017 	ldw	r4,0(r8)
 8005f9c:	39c00404 	addi	r7,r7,16
 8005fa0:	18c00404 	addi	r3,r3,16
 8005fa4:	393ffc15 	stw	r4,-16(r7)
 8005fa8:	193ffc17 	ldw	r4,-16(r3)
 8005fac:	6b400404 	addi	r13,r13,16
 8005fb0:	5ac00404 	addi	r11,r11,16
 8005fb4:	693ffc15 	stw	r4,-16(r13)
 8005fb8:	61000017 	ldw	r4,0(r12)
 8005fbc:	4a400404 	addi	r9,r9,16
 8005fc0:	42000404 	addi	r8,r8,16
 8005fc4:	593ffc15 	stw	r4,-16(r11)
 8005fc8:	51000017 	ldw	r4,0(r10)
 8005fcc:	63000404 	addi	r12,r12,16
 8005fd0:	52800404 	addi	r10,r10,16
 8005fd4:	493ffc15 	stw	r4,-16(r9)
 8005fd8:	1bbfef1e 	bne	r3,r14,8005f98 <__alt_data_end+0xfc005f98>
 8005fdc:	79000044 	addi	r4,r15,1
 8005fe0:	2008913a 	slli	r4,r4,4
 8005fe4:	328003cc 	andi	r10,r6,15
 8005fe8:	02c000c4 	movi	r11,3
 8005fec:	1107883a 	add	r3,r2,r4
 8005ff0:	290b883a 	add	r5,r5,r4
 8005ff4:	5a801e2e 	bgeu	r11,r10,8006070 <memmove+0x154>
 8005ff8:	1813883a 	mov	r9,r3
 8005ffc:	2811883a 	mov	r8,r5
 8006000:	500f883a 	mov	r7,r10
 8006004:	41000017 	ldw	r4,0(r8)
 8006008:	4a400104 	addi	r9,r9,4
 800600c:	39ffff04 	addi	r7,r7,-4
 8006010:	493fff15 	stw	r4,-4(r9)
 8006014:	42000104 	addi	r8,r8,4
 8006018:	59fffa36 	bltu	r11,r7,8006004 <__alt_data_end+0xfc006004>
 800601c:	513fff04 	addi	r4,r10,-4
 8006020:	2008d0ba 	srli	r4,r4,2
 8006024:	318000cc 	andi	r6,r6,3
 8006028:	21000044 	addi	r4,r4,1
 800602c:	2109883a 	add	r4,r4,r4
 8006030:	2109883a 	add	r4,r4,r4
 8006034:	1907883a 	add	r3,r3,r4
 8006038:	290b883a 	add	r5,r5,r4
 800603c:	30000926 	beq	r6,zero,8006064 <memmove+0x148>
 8006040:	198d883a 	add	r6,r3,r6
 8006044:	29c00003 	ldbu	r7,0(r5)
 8006048:	18c00044 	addi	r3,r3,1
 800604c:	29400044 	addi	r5,r5,1
 8006050:	19ffffc5 	stb	r7,-1(r3)
 8006054:	19bffb1e 	bne	r3,r6,8006044 <__alt_data_end+0xfc006044>
 8006058:	f800283a 	ret
 800605c:	1007883a 	mov	r3,r2
 8006060:	003ff606 	br	800603c <__alt_data_end+0xfc00603c>
 8006064:	f800283a 	ret
 8006068:	1007883a 	mov	r3,r2
 800606c:	003ff406 	br	8006040 <__alt_data_end+0xfc006040>
 8006070:	500d883a 	mov	r6,r10
 8006074:	003ff106 	br	800603c <__alt_data_end+0xfc00603c>

08006078 <memset>:
 8006078:	20c000cc 	andi	r3,r4,3
 800607c:	2005883a 	mov	r2,r4
 8006080:	18004326 	beq	r3,zero,8006190 <memset+0x118>
 8006084:	31ffffc4 	addi	r7,r6,-1
 8006088:	30004026 	beq	r6,zero,800618c <memset+0x114>
 800608c:	2813883a 	mov	r9,r5
 8006090:	200d883a 	mov	r6,r4
 8006094:	2007883a 	mov	r3,r4
 8006098:	00000406 	br	80060ac <memset+0x34>
 800609c:	3a3fffc4 	addi	r8,r7,-1
 80060a0:	31800044 	addi	r6,r6,1
 80060a4:	38003926 	beq	r7,zero,800618c <memset+0x114>
 80060a8:	400f883a 	mov	r7,r8
 80060ac:	18c00044 	addi	r3,r3,1
 80060b0:	32400005 	stb	r9,0(r6)
 80060b4:	1a0000cc 	andi	r8,r3,3
 80060b8:	403ff81e 	bne	r8,zero,800609c <__alt_data_end+0xfc00609c>
 80060bc:	010000c4 	movi	r4,3
 80060c0:	21c02d2e 	bgeu	r4,r7,8006178 <memset+0x100>
 80060c4:	29803fcc 	andi	r6,r5,255
 80060c8:	3008923a 	slli	r4,r6,8
 80060cc:	218cb03a 	or	r6,r4,r6
 80060d0:	3008943a 	slli	r4,r6,16
 80060d4:	218cb03a 	or	r6,r4,r6
 80060d8:	010003c4 	movi	r4,15
 80060dc:	21c0182e 	bgeu	r4,r7,8006140 <memset+0xc8>
 80060e0:	3b3ffc04 	addi	r12,r7,-16
 80060e4:	6018d13a 	srli	r12,r12,4
 80060e8:	1a000104 	addi	r8,r3,4
 80060ec:	1ac00204 	addi	r11,r3,8
 80060f0:	6008913a 	slli	r4,r12,4
 80060f4:	1a800304 	addi	r10,r3,12
 80060f8:	1813883a 	mov	r9,r3
 80060fc:	21000504 	addi	r4,r4,20
 8006100:	1909883a 	add	r4,r3,r4
 8006104:	49800015 	stw	r6,0(r9)
 8006108:	41800015 	stw	r6,0(r8)
 800610c:	59800015 	stw	r6,0(r11)
 8006110:	51800015 	stw	r6,0(r10)
 8006114:	42000404 	addi	r8,r8,16
 8006118:	4a400404 	addi	r9,r9,16
 800611c:	5ac00404 	addi	r11,r11,16
 8006120:	52800404 	addi	r10,r10,16
 8006124:	413ff71e 	bne	r8,r4,8006104 <__alt_data_end+0xfc006104>
 8006128:	63000044 	addi	r12,r12,1
 800612c:	6018913a 	slli	r12,r12,4
 8006130:	39c003cc 	andi	r7,r7,15
 8006134:	010000c4 	movi	r4,3
 8006138:	1b07883a 	add	r3,r3,r12
 800613c:	21c00e2e 	bgeu	r4,r7,8006178 <memset+0x100>
 8006140:	1813883a 	mov	r9,r3
 8006144:	3811883a 	mov	r8,r7
 8006148:	010000c4 	movi	r4,3
 800614c:	49800015 	stw	r6,0(r9)
 8006150:	423fff04 	addi	r8,r8,-4
 8006154:	4a400104 	addi	r9,r9,4
 8006158:	223ffc36 	bltu	r4,r8,800614c <__alt_data_end+0xfc00614c>
 800615c:	393fff04 	addi	r4,r7,-4
 8006160:	2008d0ba 	srli	r4,r4,2
 8006164:	39c000cc 	andi	r7,r7,3
 8006168:	21000044 	addi	r4,r4,1
 800616c:	2109883a 	add	r4,r4,r4
 8006170:	2109883a 	add	r4,r4,r4
 8006174:	1907883a 	add	r3,r3,r4
 8006178:	38000426 	beq	r7,zero,800618c <memset+0x114>
 800617c:	19cf883a 	add	r7,r3,r7
 8006180:	19400005 	stb	r5,0(r3)
 8006184:	18c00044 	addi	r3,r3,1
 8006188:	19fffd1e 	bne	r3,r7,8006180 <__alt_data_end+0xfc006180>
 800618c:	f800283a 	ret
 8006190:	2007883a 	mov	r3,r4
 8006194:	300f883a 	mov	r7,r6
 8006198:	003fc806 	br	80060bc <__alt_data_end+0xfc0060bc>

0800619c <_Balloc>:
 800619c:	20801317 	ldw	r2,76(r4)
 80061a0:	defffc04 	addi	sp,sp,-16
 80061a4:	dc400115 	stw	r17,4(sp)
 80061a8:	dc000015 	stw	r16,0(sp)
 80061ac:	dfc00315 	stw	ra,12(sp)
 80061b0:	dc800215 	stw	r18,8(sp)
 80061b4:	2023883a 	mov	r17,r4
 80061b8:	2821883a 	mov	r16,r5
 80061bc:	10000f26 	beq	r2,zero,80061fc <_Balloc+0x60>
 80061c0:	8407883a 	add	r3,r16,r16
 80061c4:	18c7883a 	add	r3,r3,r3
 80061c8:	10c7883a 	add	r3,r2,r3
 80061cc:	18800017 	ldw	r2,0(r3)
 80061d0:	10001126 	beq	r2,zero,8006218 <_Balloc+0x7c>
 80061d4:	11000017 	ldw	r4,0(r2)
 80061d8:	19000015 	stw	r4,0(r3)
 80061dc:	10000415 	stw	zero,16(r2)
 80061e0:	10000315 	stw	zero,12(r2)
 80061e4:	dfc00317 	ldw	ra,12(sp)
 80061e8:	dc800217 	ldw	r18,8(sp)
 80061ec:	dc400117 	ldw	r17,4(sp)
 80061f0:	dc000017 	ldw	r16,0(sp)
 80061f4:	dec00404 	addi	sp,sp,16
 80061f8:	f800283a 	ret
 80061fc:	01400104 	movi	r5,4
 8006200:	01800844 	movi	r6,33
 8006204:	80090380 	call	8009038 <_calloc_r>
 8006208:	88801315 	stw	r2,76(r17)
 800620c:	103fec1e 	bne	r2,zero,80061c0 <__alt_data_end+0xfc0061c0>
 8006210:	0005883a 	mov	r2,zero
 8006214:	003ff306 	br	80061e4 <__alt_data_end+0xfc0061e4>
 8006218:	01400044 	movi	r5,1
 800621c:	2c24983a 	sll	r18,r5,r16
 8006220:	8809883a 	mov	r4,r17
 8006224:	91800144 	addi	r6,r18,5
 8006228:	318d883a 	add	r6,r6,r6
 800622c:	318d883a 	add	r6,r6,r6
 8006230:	80090380 	call	8009038 <_calloc_r>
 8006234:	103ff626 	beq	r2,zero,8006210 <__alt_data_end+0xfc006210>
 8006238:	14000115 	stw	r16,4(r2)
 800623c:	14800215 	stw	r18,8(r2)
 8006240:	003fe606 	br	80061dc <__alt_data_end+0xfc0061dc>

08006244 <_Bfree>:
 8006244:	28000826 	beq	r5,zero,8006268 <_Bfree+0x24>
 8006248:	28c00117 	ldw	r3,4(r5)
 800624c:	20801317 	ldw	r2,76(r4)
 8006250:	18c7883a 	add	r3,r3,r3
 8006254:	18c7883a 	add	r3,r3,r3
 8006258:	10c5883a 	add	r2,r2,r3
 800625c:	10c00017 	ldw	r3,0(r2)
 8006260:	28c00015 	stw	r3,0(r5)
 8006264:	11400015 	stw	r5,0(r2)
 8006268:	f800283a 	ret

0800626c <__multadd>:
 800626c:	defff704 	addi	sp,sp,-36
 8006270:	dc800215 	stw	r18,8(sp)
 8006274:	2c800417 	ldw	r18,16(r5)
 8006278:	ddc00715 	stw	r23,28(sp)
 800627c:	dd800615 	stw	r22,24(sp)
 8006280:	dd000415 	stw	r20,16(sp)
 8006284:	dcc00315 	stw	r19,12(sp)
 8006288:	dc400115 	stw	r17,4(sp)
 800628c:	dc000015 	stw	r16,0(sp)
 8006290:	dfc00815 	stw	ra,32(sp)
 8006294:	dd400515 	stw	r21,20(sp)
 8006298:	2827883a 	mov	r19,r5
 800629c:	2029883a 	mov	r20,r4
 80062a0:	3023883a 	mov	r17,r6
 80062a4:	3821883a 	mov	r16,r7
 80062a8:	2d800504 	addi	r22,r5,20
 80062ac:	002f883a 	mov	r23,zero
 80062b0:	b5400017 	ldw	r21,0(r22)
 80062b4:	880b883a 	mov	r5,r17
 80062b8:	bdc00044 	addi	r23,r23,1
 80062bc:	a93fffcc 	andi	r4,r21,65535
 80062c0:	800a65c0 	call	800a65c <__mulsi3>
 80062c4:	1421883a 	add	r16,r2,r16
 80062c8:	a808d43a 	srli	r4,r21,16
 80062cc:	802ad43a 	srli	r21,r16,16
 80062d0:	880b883a 	mov	r5,r17
 80062d4:	800a65c0 	call	800a65c <__mulsi3>
 80062d8:	a88f883a 	add	r7,r21,r2
 80062dc:	3804943a 	slli	r2,r7,16
 80062e0:	80ffffcc 	andi	r3,r16,65535
 80062e4:	b5800104 	addi	r22,r22,4
 80062e8:	10c7883a 	add	r3,r2,r3
 80062ec:	b0ffff15 	stw	r3,-4(r22)
 80062f0:	3820d43a 	srli	r16,r7,16
 80062f4:	bcbfee16 	blt	r23,r18,80062b0 <__alt_data_end+0xfc0062b0>
 80062f8:	80000926 	beq	r16,zero,8006320 <__multadd+0xb4>
 80062fc:	98800217 	ldw	r2,8(r19)
 8006300:	9080130e 	bge	r18,r2,8006350 <__multadd+0xe4>
 8006304:	90800144 	addi	r2,r18,5
 8006308:	1085883a 	add	r2,r2,r2
 800630c:	1085883a 	add	r2,r2,r2
 8006310:	9885883a 	add	r2,r19,r2
 8006314:	14000015 	stw	r16,0(r2)
 8006318:	94800044 	addi	r18,r18,1
 800631c:	9c800415 	stw	r18,16(r19)
 8006320:	9805883a 	mov	r2,r19
 8006324:	dfc00817 	ldw	ra,32(sp)
 8006328:	ddc00717 	ldw	r23,28(sp)
 800632c:	dd800617 	ldw	r22,24(sp)
 8006330:	dd400517 	ldw	r21,20(sp)
 8006334:	dd000417 	ldw	r20,16(sp)
 8006338:	dcc00317 	ldw	r19,12(sp)
 800633c:	dc800217 	ldw	r18,8(sp)
 8006340:	dc400117 	ldw	r17,4(sp)
 8006344:	dc000017 	ldw	r16,0(sp)
 8006348:	dec00904 	addi	sp,sp,36
 800634c:	f800283a 	ret
 8006350:	99400117 	ldw	r5,4(r19)
 8006354:	a009883a 	mov	r4,r20
 8006358:	29400044 	addi	r5,r5,1
 800635c:	800619c0 	call	800619c <_Balloc>
 8006360:	99800417 	ldw	r6,16(r19)
 8006364:	99400304 	addi	r5,r19,12
 8006368:	11000304 	addi	r4,r2,12
 800636c:	31800084 	addi	r6,r6,2
 8006370:	318d883a 	add	r6,r6,r6
 8006374:	318d883a 	add	r6,r6,r6
 8006378:	1023883a 	mov	r17,r2
 800637c:	8005de40 	call	8005de4 <memcpy>
 8006380:	99000117 	ldw	r4,4(r19)
 8006384:	a0c01317 	ldw	r3,76(r20)
 8006388:	2109883a 	add	r4,r4,r4
 800638c:	2109883a 	add	r4,r4,r4
 8006390:	1907883a 	add	r3,r3,r4
 8006394:	18800017 	ldw	r2,0(r3)
 8006398:	98800015 	stw	r2,0(r19)
 800639c:	1cc00015 	stw	r19,0(r3)
 80063a0:	8827883a 	mov	r19,r17
 80063a4:	003fd706 	br	8006304 <__alt_data_end+0xfc006304>

080063a8 <__s2b>:
 80063a8:	defff904 	addi	sp,sp,-28
 80063ac:	dc400115 	stw	r17,4(sp)
 80063b0:	dc000015 	stw	r16,0(sp)
 80063b4:	2023883a 	mov	r17,r4
 80063b8:	2821883a 	mov	r16,r5
 80063bc:	39000204 	addi	r4,r7,8
 80063c0:	01400244 	movi	r5,9
 80063c4:	dcc00315 	stw	r19,12(sp)
 80063c8:	dc800215 	stw	r18,8(sp)
 80063cc:	dfc00615 	stw	ra,24(sp)
 80063d0:	dd400515 	stw	r21,20(sp)
 80063d4:	dd000415 	stw	r20,16(sp)
 80063d8:	3825883a 	mov	r18,r7
 80063dc:	3027883a 	mov	r19,r6
 80063e0:	800a59c0 	call	800a59c <__divsi3>
 80063e4:	00c00044 	movi	r3,1
 80063e8:	000b883a 	mov	r5,zero
 80063ec:	1880030e 	bge	r3,r2,80063fc <__s2b+0x54>
 80063f0:	18c7883a 	add	r3,r3,r3
 80063f4:	29400044 	addi	r5,r5,1
 80063f8:	18bffd16 	blt	r3,r2,80063f0 <__alt_data_end+0xfc0063f0>
 80063fc:	8809883a 	mov	r4,r17
 8006400:	800619c0 	call	800619c <_Balloc>
 8006404:	d8c00717 	ldw	r3,28(sp)
 8006408:	10c00515 	stw	r3,20(r2)
 800640c:	00c00044 	movi	r3,1
 8006410:	10c00415 	stw	r3,16(r2)
 8006414:	00c00244 	movi	r3,9
 8006418:	1cc0210e 	bge	r3,r19,80064a0 <__s2b+0xf8>
 800641c:	80eb883a 	add	r21,r16,r3
 8006420:	a829883a 	mov	r20,r21
 8006424:	84e1883a 	add	r16,r16,r19
 8006428:	a1c00007 	ldb	r7,0(r20)
 800642c:	8809883a 	mov	r4,r17
 8006430:	a5000044 	addi	r20,r20,1
 8006434:	100b883a 	mov	r5,r2
 8006438:	01800284 	movi	r6,10
 800643c:	39fff404 	addi	r7,r7,-48
 8006440:	800626c0 	call	800626c <__multadd>
 8006444:	a43ff81e 	bne	r20,r16,8006428 <__alt_data_end+0xfc006428>
 8006448:	ace1883a 	add	r16,r21,r19
 800644c:	843ffe04 	addi	r16,r16,-8
 8006450:	9c800a0e 	bge	r19,r18,800647c <__s2b+0xd4>
 8006454:	94e5c83a 	sub	r18,r18,r19
 8006458:	84a5883a 	add	r18,r16,r18
 800645c:	81c00007 	ldb	r7,0(r16)
 8006460:	8809883a 	mov	r4,r17
 8006464:	84000044 	addi	r16,r16,1
 8006468:	100b883a 	mov	r5,r2
 800646c:	01800284 	movi	r6,10
 8006470:	39fff404 	addi	r7,r7,-48
 8006474:	800626c0 	call	800626c <__multadd>
 8006478:	84bff81e 	bne	r16,r18,800645c <__alt_data_end+0xfc00645c>
 800647c:	dfc00617 	ldw	ra,24(sp)
 8006480:	dd400517 	ldw	r21,20(sp)
 8006484:	dd000417 	ldw	r20,16(sp)
 8006488:	dcc00317 	ldw	r19,12(sp)
 800648c:	dc800217 	ldw	r18,8(sp)
 8006490:	dc400117 	ldw	r17,4(sp)
 8006494:	dc000017 	ldw	r16,0(sp)
 8006498:	dec00704 	addi	sp,sp,28
 800649c:	f800283a 	ret
 80064a0:	84000284 	addi	r16,r16,10
 80064a4:	1827883a 	mov	r19,r3
 80064a8:	003fe906 	br	8006450 <__alt_data_end+0xfc006450>

080064ac <__hi0bits>:
 80064ac:	20bfffec 	andhi	r2,r4,65535
 80064b0:	1000141e 	bne	r2,zero,8006504 <__hi0bits+0x58>
 80064b4:	2008943a 	slli	r4,r4,16
 80064b8:	00800404 	movi	r2,16
 80064bc:	20ffc02c 	andhi	r3,r4,65280
 80064c0:	1800021e 	bne	r3,zero,80064cc <__hi0bits+0x20>
 80064c4:	2008923a 	slli	r4,r4,8
 80064c8:	10800204 	addi	r2,r2,8
 80064cc:	20fc002c 	andhi	r3,r4,61440
 80064d0:	1800021e 	bne	r3,zero,80064dc <__hi0bits+0x30>
 80064d4:	2008913a 	slli	r4,r4,4
 80064d8:	10800104 	addi	r2,r2,4
 80064dc:	20f0002c 	andhi	r3,r4,49152
 80064e0:	1800031e 	bne	r3,zero,80064f0 <__hi0bits+0x44>
 80064e4:	2109883a 	add	r4,r4,r4
 80064e8:	10800084 	addi	r2,r2,2
 80064ec:	2109883a 	add	r4,r4,r4
 80064f0:	20000316 	blt	r4,zero,8006500 <__hi0bits+0x54>
 80064f4:	2110002c 	andhi	r4,r4,16384
 80064f8:	2000041e 	bne	r4,zero,800650c <__hi0bits+0x60>
 80064fc:	00800804 	movi	r2,32
 8006500:	f800283a 	ret
 8006504:	0005883a 	mov	r2,zero
 8006508:	003fec06 	br	80064bc <__alt_data_end+0xfc0064bc>
 800650c:	10800044 	addi	r2,r2,1
 8006510:	f800283a 	ret

08006514 <__lo0bits>:
 8006514:	20c00017 	ldw	r3,0(r4)
 8006518:	188001cc 	andi	r2,r3,7
 800651c:	10000826 	beq	r2,zero,8006540 <__lo0bits+0x2c>
 8006520:	1880004c 	andi	r2,r3,1
 8006524:	1000211e 	bne	r2,zero,80065ac <__lo0bits+0x98>
 8006528:	1880008c 	andi	r2,r3,2
 800652c:	1000211e 	bne	r2,zero,80065b4 <__lo0bits+0xa0>
 8006530:	1806d0ba 	srli	r3,r3,2
 8006534:	00800084 	movi	r2,2
 8006538:	20c00015 	stw	r3,0(r4)
 800653c:	f800283a 	ret
 8006540:	18bfffcc 	andi	r2,r3,65535
 8006544:	10001326 	beq	r2,zero,8006594 <__lo0bits+0x80>
 8006548:	0005883a 	mov	r2,zero
 800654c:	19403fcc 	andi	r5,r3,255
 8006550:	2800021e 	bne	r5,zero,800655c <__lo0bits+0x48>
 8006554:	1806d23a 	srli	r3,r3,8
 8006558:	10800204 	addi	r2,r2,8
 800655c:	194003cc 	andi	r5,r3,15
 8006560:	2800021e 	bne	r5,zero,800656c <__lo0bits+0x58>
 8006564:	1806d13a 	srli	r3,r3,4
 8006568:	10800104 	addi	r2,r2,4
 800656c:	194000cc 	andi	r5,r3,3
 8006570:	2800021e 	bne	r5,zero,800657c <__lo0bits+0x68>
 8006574:	1806d0ba 	srli	r3,r3,2
 8006578:	10800084 	addi	r2,r2,2
 800657c:	1940004c 	andi	r5,r3,1
 8006580:	2800081e 	bne	r5,zero,80065a4 <__lo0bits+0x90>
 8006584:	1806d07a 	srli	r3,r3,1
 8006588:	1800051e 	bne	r3,zero,80065a0 <__lo0bits+0x8c>
 800658c:	00800804 	movi	r2,32
 8006590:	f800283a 	ret
 8006594:	1806d43a 	srli	r3,r3,16
 8006598:	00800404 	movi	r2,16
 800659c:	003feb06 	br	800654c <__alt_data_end+0xfc00654c>
 80065a0:	10800044 	addi	r2,r2,1
 80065a4:	20c00015 	stw	r3,0(r4)
 80065a8:	f800283a 	ret
 80065ac:	0005883a 	mov	r2,zero
 80065b0:	f800283a 	ret
 80065b4:	1806d07a 	srli	r3,r3,1
 80065b8:	00800044 	movi	r2,1
 80065bc:	20c00015 	stw	r3,0(r4)
 80065c0:	f800283a 	ret

080065c4 <__i2b>:
 80065c4:	defffd04 	addi	sp,sp,-12
 80065c8:	dc000015 	stw	r16,0(sp)
 80065cc:	04000044 	movi	r16,1
 80065d0:	dc400115 	stw	r17,4(sp)
 80065d4:	2823883a 	mov	r17,r5
 80065d8:	800b883a 	mov	r5,r16
 80065dc:	dfc00215 	stw	ra,8(sp)
 80065e0:	800619c0 	call	800619c <_Balloc>
 80065e4:	14400515 	stw	r17,20(r2)
 80065e8:	14000415 	stw	r16,16(r2)
 80065ec:	dfc00217 	ldw	ra,8(sp)
 80065f0:	dc400117 	ldw	r17,4(sp)
 80065f4:	dc000017 	ldw	r16,0(sp)
 80065f8:	dec00304 	addi	sp,sp,12
 80065fc:	f800283a 	ret

08006600 <__multiply>:
 8006600:	deffef04 	addi	sp,sp,-68
 8006604:	dc400815 	stw	r17,32(sp)
 8006608:	dc000715 	stw	r16,28(sp)
 800660c:	2c400417 	ldw	r17,16(r5)
 8006610:	34000417 	ldw	r16,16(r6)
 8006614:	dd800d15 	stw	r22,52(sp)
 8006618:	dc800915 	stw	r18,36(sp)
 800661c:	dfc01015 	stw	ra,64(sp)
 8006620:	df000f15 	stw	fp,60(sp)
 8006624:	ddc00e15 	stw	r23,56(sp)
 8006628:	dd400c15 	stw	r21,48(sp)
 800662c:	dd000b15 	stw	r20,44(sp)
 8006630:	dcc00a15 	stw	r19,40(sp)
 8006634:	2825883a 	mov	r18,r5
 8006638:	302d883a 	mov	r22,r6
 800663c:	8c009116 	blt	r17,r16,8006884 <__multiply+0x284>
 8006640:	8005883a 	mov	r2,r16
 8006644:	8821883a 	mov	r16,r17
 8006648:	1023883a 	mov	r17,r2
 800664c:	90800217 	ldw	r2,8(r18)
 8006650:	8447883a 	add	r3,r16,r17
 8006654:	d8c00215 	stw	r3,8(sp)
 8006658:	91400117 	ldw	r5,4(r18)
 800665c:	10c0010e 	bge	r2,r3,8006664 <__multiply+0x64>
 8006660:	29400044 	addi	r5,r5,1
 8006664:	800619c0 	call	800619c <_Balloc>
 8006668:	d8c00217 	ldw	r3,8(sp)
 800666c:	d8800615 	stw	r2,24(sp)
 8006670:	18eb883a 	add	r21,r3,r3
 8006674:	ad6b883a 	add	r21,r21,r21
 8006678:	10c00504 	addi	r3,r2,20
 800667c:	1d6b883a 	add	r21,r3,r21
 8006680:	d8c00115 	stw	r3,4(sp)
 8006684:	dd400315 	stw	r21,12(sp)
 8006688:	1805883a 	mov	r2,r3
 800668c:	1d40042e 	bgeu	r3,r21,80066a0 <__multiply+0xa0>
 8006690:	d8c00317 	ldw	r3,12(sp)
 8006694:	10000015 	stw	zero,0(r2)
 8006698:	10800104 	addi	r2,r2,4
 800669c:	10fffc36 	bltu	r2,r3,8006690 <__alt_data_end+0xfc006690>
 80066a0:	8c63883a 	add	r17,r17,r17
 80066a4:	b5800504 	addi	r22,r22,20
 80066a8:	8c63883a 	add	r17,r17,r17
 80066ac:	94800504 	addi	r18,r18,20
 80066b0:	8421883a 	add	r16,r16,r16
 80066b4:	b463883a 	add	r17,r22,r17
 80066b8:	8421883a 	add	r16,r16,r16
 80066bc:	dd800015 	stw	r22,0(sp)
 80066c0:	dc800415 	stw	r18,16(sp)
 80066c4:	dc400515 	stw	r17,20(sp)
 80066c8:	9429883a 	add	r20,r18,r16
 80066cc:	b4404f2e 	bgeu	r22,r17,800680c <__multiply+0x20c>
 80066d0:	d8c00017 	ldw	r3,0(sp)
 80066d4:	1c800017 	ldw	r18,0(r3)
 80066d8:	943fffcc 	andi	r16,r18,65535
 80066dc:	80001e26 	beq	r16,zero,8006758 <__multiply+0x158>
 80066e0:	dd800117 	ldw	r22,4(sp)
 80066e4:	dd400417 	ldw	r21,16(sp)
 80066e8:	0025883a 	mov	r18,zero
 80066ec:	adc00017 	ldw	r23,0(r21)
 80066f0:	b4c00017 	ldw	r19,0(r22)
 80066f4:	800b883a 	mov	r5,r16
 80066f8:	b93fffcc 	andi	r4,r23,65535
 80066fc:	800a65c0 	call	800a65c <__mulsi3>
 8006700:	9c7fffcc 	andi	r17,r19,65535
 8006704:	8885883a 	add	r2,r17,r2
 8006708:	b808d43a 	srli	r4,r23,16
 800670c:	14a3883a 	add	r17,r2,r18
 8006710:	9826d43a 	srli	r19,r19,16
 8006714:	8824d43a 	srli	r18,r17,16
 8006718:	800b883a 	mov	r5,r16
 800671c:	800a65c0 	call	800a65c <__mulsi3>
 8006720:	9885883a 	add	r2,r19,r2
 8006724:	14a7883a 	add	r19,r2,r18
 8006728:	88ffffcc 	andi	r3,r17,65535
 800672c:	9822943a 	slli	r17,r19,16
 8006730:	ad400104 	addi	r21,r21,4
 8006734:	b005883a 	mov	r2,r22
 8006738:	88c6b03a 	or	r3,r17,r3
 800673c:	b0c00015 	stw	r3,0(r22)
 8006740:	9824d43a 	srli	r18,r19,16
 8006744:	b5800104 	addi	r22,r22,4
 8006748:	ad3fe836 	bltu	r21,r20,80066ec <__alt_data_end+0xfc0066ec>
 800674c:	d8c00017 	ldw	r3,0(sp)
 8006750:	14800115 	stw	r18,4(r2)
 8006754:	1c800017 	ldw	r18,0(r3)
 8006758:	9024d43a 	srli	r18,r18,16
 800675c:	90002226 	beq	r18,zero,80067e8 <__multiply+0x1e8>
 8006760:	d8c00117 	ldw	r3,4(sp)
 8006764:	dd800417 	ldw	r22,16(sp)
 8006768:	002f883a 	mov	r23,zero
 800676c:	1f000017 	ldw	fp,0(r3)
 8006770:	1823883a 	mov	r17,r3
 8006774:	182b883a 	mov	r21,r3
 8006778:	e021883a 	mov	r16,fp
 800677c:	00000106 	br	8006784 <__multiply+0x184>
 8006780:	982b883a 	mov	r21,r19
 8006784:	b100000b 	ldhu	r4,0(r22)
 8006788:	8020d43a 	srli	r16,r16,16
 800678c:	900b883a 	mov	r5,r18
 8006790:	800a65c0 	call	800a65c <__mulsi3>
 8006794:	1405883a 	add	r2,r2,r16
 8006798:	15ef883a 	add	r23,r2,r23
 800679c:	b804943a 	slli	r2,r23,16
 80067a0:	e0ffffcc 	andi	r3,fp,65535
 80067a4:	8c400104 	addi	r17,r17,4
 80067a8:	10c6b03a 	or	r3,r2,r3
 80067ac:	88ffff15 	stw	r3,-4(r17)
 80067b0:	b5800104 	addi	r22,r22,4
 80067b4:	b13fff17 	ldw	r4,-4(r22)
 80067b8:	acc00104 	addi	r19,r21,4
 80067bc:	900b883a 	mov	r5,r18
 80067c0:	2008d43a 	srli	r4,r4,16
 80067c4:	9c000017 	ldw	r16,0(r19)
 80067c8:	800a65c0 	call	800a65c <__mulsi3>
 80067cc:	b806d43a 	srli	r3,r23,16
 80067d0:	813fffcc 	andi	r4,r16,65535
 80067d4:	1105883a 	add	r2,r2,r4
 80067d8:	10f9883a 	add	fp,r2,r3
 80067dc:	e02ed43a 	srli	r23,fp,16
 80067e0:	b53fe736 	bltu	r22,r20,8006780 <__alt_data_end+0xfc006780>
 80067e4:	af000115 	stw	fp,4(r21)
 80067e8:	d8c00017 	ldw	r3,0(sp)
 80067ec:	d9000517 	ldw	r4,20(sp)
 80067f0:	18c00104 	addi	r3,r3,4
 80067f4:	d8c00015 	stw	r3,0(sp)
 80067f8:	d8c00117 	ldw	r3,4(sp)
 80067fc:	18c00104 	addi	r3,r3,4
 8006800:	d8c00115 	stw	r3,4(sp)
 8006804:	d8c00017 	ldw	r3,0(sp)
 8006808:	193fb136 	bltu	r3,r4,80066d0 <__alt_data_end+0xfc0066d0>
 800680c:	d8c00217 	ldw	r3,8(sp)
 8006810:	00c00c0e 	bge	zero,r3,8006844 <__multiply+0x244>
 8006814:	d8c00317 	ldw	r3,12(sp)
 8006818:	18bfff17 	ldw	r2,-4(r3)
 800681c:	1d7fff04 	addi	r21,r3,-4
 8006820:	10000326 	beq	r2,zero,8006830 <__multiply+0x230>
 8006824:	00000706 	br	8006844 <__multiply+0x244>
 8006828:	a8800017 	ldw	r2,0(r21)
 800682c:	1000051e 	bne	r2,zero,8006844 <__multiply+0x244>
 8006830:	d8c00217 	ldw	r3,8(sp)
 8006834:	ad7fff04 	addi	r21,r21,-4
 8006838:	18ffffc4 	addi	r3,r3,-1
 800683c:	d8c00215 	stw	r3,8(sp)
 8006840:	183ff91e 	bne	r3,zero,8006828 <__alt_data_end+0xfc006828>
 8006844:	d8c00617 	ldw	r3,24(sp)
 8006848:	d9000217 	ldw	r4,8(sp)
 800684c:	1805883a 	mov	r2,r3
 8006850:	19000415 	stw	r4,16(r3)
 8006854:	dfc01017 	ldw	ra,64(sp)
 8006858:	df000f17 	ldw	fp,60(sp)
 800685c:	ddc00e17 	ldw	r23,56(sp)
 8006860:	dd800d17 	ldw	r22,52(sp)
 8006864:	dd400c17 	ldw	r21,48(sp)
 8006868:	dd000b17 	ldw	r20,44(sp)
 800686c:	dcc00a17 	ldw	r19,40(sp)
 8006870:	dc800917 	ldw	r18,36(sp)
 8006874:	dc400817 	ldw	r17,32(sp)
 8006878:	dc000717 	ldw	r16,28(sp)
 800687c:	dec01104 	addi	sp,sp,68
 8006880:	f800283a 	ret
 8006884:	3025883a 	mov	r18,r6
 8006888:	282d883a 	mov	r22,r5
 800688c:	003f6f06 	br	800664c <__alt_data_end+0xfc00664c>

08006890 <__pow5mult>:
 8006890:	defffa04 	addi	sp,sp,-24
 8006894:	dcc00315 	stw	r19,12(sp)
 8006898:	dc800215 	stw	r18,8(sp)
 800689c:	dc000015 	stw	r16,0(sp)
 80068a0:	dfc00515 	stw	ra,20(sp)
 80068a4:	dd000415 	stw	r20,16(sp)
 80068a8:	dc400115 	stw	r17,4(sp)
 80068ac:	308000cc 	andi	r2,r6,3
 80068b0:	3021883a 	mov	r16,r6
 80068b4:	2027883a 	mov	r19,r4
 80068b8:	2825883a 	mov	r18,r5
 80068bc:	10002e1e 	bne	r2,zero,8006978 <__pow5mult+0xe8>
 80068c0:	8021d0ba 	srai	r16,r16,2
 80068c4:	80001a26 	beq	r16,zero,8006930 <__pow5mult+0xa0>
 80068c8:	9c401217 	ldw	r17,72(r19)
 80068cc:	8800061e 	bne	r17,zero,80068e8 <__pow5mult+0x58>
 80068d0:	00003406 	br	80069a4 <__pow5mult+0x114>
 80068d4:	8021d07a 	srai	r16,r16,1
 80068d8:	80001526 	beq	r16,zero,8006930 <__pow5mult+0xa0>
 80068dc:	88800017 	ldw	r2,0(r17)
 80068e0:	10001c26 	beq	r2,zero,8006954 <__pow5mult+0xc4>
 80068e4:	1023883a 	mov	r17,r2
 80068e8:	80c0004c 	andi	r3,r16,1
 80068ec:	183ff926 	beq	r3,zero,80068d4 <__alt_data_end+0xfc0068d4>
 80068f0:	900b883a 	mov	r5,r18
 80068f4:	880d883a 	mov	r6,r17
 80068f8:	9809883a 	mov	r4,r19
 80068fc:	80066000 	call	8006600 <__multiply>
 8006900:	90001b26 	beq	r18,zero,8006970 <__pow5mult+0xe0>
 8006904:	91c00117 	ldw	r7,4(r18)
 8006908:	98c01317 	ldw	r3,76(r19)
 800690c:	8021d07a 	srai	r16,r16,1
 8006910:	39cf883a 	add	r7,r7,r7
 8006914:	39cf883a 	add	r7,r7,r7
 8006918:	19c7883a 	add	r3,r3,r7
 800691c:	19000017 	ldw	r4,0(r3)
 8006920:	91000015 	stw	r4,0(r18)
 8006924:	1c800015 	stw	r18,0(r3)
 8006928:	1025883a 	mov	r18,r2
 800692c:	803feb1e 	bne	r16,zero,80068dc <__alt_data_end+0xfc0068dc>
 8006930:	9005883a 	mov	r2,r18
 8006934:	dfc00517 	ldw	ra,20(sp)
 8006938:	dd000417 	ldw	r20,16(sp)
 800693c:	dcc00317 	ldw	r19,12(sp)
 8006940:	dc800217 	ldw	r18,8(sp)
 8006944:	dc400117 	ldw	r17,4(sp)
 8006948:	dc000017 	ldw	r16,0(sp)
 800694c:	dec00604 	addi	sp,sp,24
 8006950:	f800283a 	ret
 8006954:	9809883a 	mov	r4,r19
 8006958:	880b883a 	mov	r5,r17
 800695c:	880d883a 	mov	r6,r17
 8006960:	80066000 	call	8006600 <__multiply>
 8006964:	88800015 	stw	r2,0(r17)
 8006968:	10000015 	stw	zero,0(r2)
 800696c:	003fdd06 	br	80068e4 <__alt_data_end+0xfc0068e4>
 8006970:	1025883a 	mov	r18,r2
 8006974:	003fd706 	br	80068d4 <__alt_data_end+0xfc0068d4>
 8006978:	10bfffc4 	addi	r2,r2,-1
 800697c:	1085883a 	add	r2,r2,r2
 8006980:	00c20074 	movhi	r3,2049
 8006984:	18fdb604 	addi	r3,r3,-2344
 8006988:	1085883a 	add	r2,r2,r2
 800698c:	1885883a 	add	r2,r3,r2
 8006990:	11800017 	ldw	r6,0(r2)
 8006994:	000f883a 	mov	r7,zero
 8006998:	800626c0 	call	800626c <__multadd>
 800699c:	1025883a 	mov	r18,r2
 80069a0:	003fc706 	br	80068c0 <__alt_data_end+0xfc0068c0>
 80069a4:	05000044 	movi	r20,1
 80069a8:	9809883a 	mov	r4,r19
 80069ac:	a00b883a 	mov	r5,r20
 80069b0:	800619c0 	call	800619c <_Balloc>
 80069b4:	1023883a 	mov	r17,r2
 80069b8:	00809c44 	movi	r2,625
 80069bc:	88800515 	stw	r2,20(r17)
 80069c0:	8d000415 	stw	r20,16(r17)
 80069c4:	9c401215 	stw	r17,72(r19)
 80069c8:	88000015 	stw	zero,0(r17)
 80069cc:	003fc606 	br	80068e8 <__alt_data_end+0xfc0068e8>

080069d0 <__lshift>:
 80069d0:	defff904 	addi	sp,sp,-28
 80069d4:	dd000415 	stw	r20,16(sp)
 80069d8:	dcc00315 	stw	r19,12(sp)
 80069dc:	3029d17a 	srai	r20,r6,5
 80069e0:	2cc00417 	ldw	r19,16(r5)
 80069e4:	28800217 	ldw	r2,8(r5)
 80069e8:	dd400515 	stw	r21,20(sp)
 80069ec:	a4e7883a 	add	r19,r20,r19
 80069f0:	dc800215 	stw	r18,8(sp)
 80069f4:	dc400115 	stw	r17,4(sp)
 80069f8:	dc000015 	stw	r16,0(sp)
 80069fc:	dfc00615 	stw	ra,24(sp)
 8006a00:	9c000044 	addi	r16,r19,1
 8006a04:	2823883a 	mov	r17,r5
 8006a08:	302b883a 	mov	r21,r6
 8006a0c:	2025883a 	mov	r18,r4
 8006a10:	29400117 	ldw	r5,4(r5)
 8006a14:	1400030e 	bge	r2,r16,8006a24 <__lshift+0x54>
 8006a18:	1085883a 	add	r2,r2,r2
 8006a1c:	29400044 	addi	r5,r5,1
 8006a20:	143ffd16 	blt	r2,r16,8006a18 <__alt_data_end+0xfc006a18>
 8006a24:	9009883a 	mov	r4,r18
 8006a28:	800619c0 	call	800619c <_Balloc>
 8006a2c:	11c00504 	addi	r7,r2,20
 8006a30:	0500090e 	bge	zero,r20,8006a58 <__lshift+0x88>
 8006a34:	3811883a 	mov	r8,r7
 8006a38:	0007883a 	mov	r3,zero
 8006a3c:	40000015 	stw	zero,0(r8)
 8006a40:	18c00044 	addi	r3,r3,1
 8006a44:	42000104 	addi	r8,r8,4
 8006a48:	1d3ffc1e 	bne	r3,r20,8006a3c <__alt_data_end+0xfc006a3c>
 8006a4c:	18c7883a 	add	r3,r3,r3
 8006a50:	18c7883a 	add	r3,r3,r3
 8006a54:	38cf883a 	add	r7,r7,r3
 8006a58:	89000417 	ldw	r4,16(r17)
 8006a5c:	88c00504 	addi	r3,r17,20
 8006a60:	a98007cc 	andi	r6,r21,31
 8006a64:	2109883a 	add	r4,r4,r4
 8006a68:	2109883a 	add	r4,r4,r4
 8006a6c:	1909883a 	add	r4,r3,r4
 8006a70:	30002326 	beq	r6,zero,8006b00 <__lshift+0x130>
 8006a74:	01400804 	movi	r5,32
 8006a78:	298bc83a 	sub	r5,r5,r6
 8006a7c:	0013883a 	mov	r9,zero
 8006a80:	1a000017 	ldw	r8,0(r3)
 8006a84:	3815883a 	mov	r10,r7
 8006a88:	39c00104 	addi	r7,r7,4
 8006a8c:	4190983a 	sll	r8,r8,r6
 8006a90:	18c00104 	addi	r3,r3,4
 8006a94:	4a10b03a 	or	r8,r9,r8
 8006a98:	3a3fff15 	stw	r8,-4(r7)
 8006a9c:	1a3fff17 	ldw	r8,-4(r3)
 8006aa0:	4152d83a 	srl	r9,r8,r5
 8006aa4:	193ff636 	bltu	r3,r4,8006a80 <__alt_data_end+0xfc006a80>
 8006aa8:	52400115 	stw	r9,4(r10)
 8006aac:	48000126 	beq	r9,zero,8006ab4 <__lshift+0xe4>
 8006ab0:	9c000084 	addi	r16,r19,2
 8006ab4:	89000117 	ldw	r4,4(r17)
 8006ab8:	90c01317 	ldw	r3,76(r18)
 8006abc:	843fffc4 	addi	r16,r16,-1
 8006ac0:	2109883a 	add	r4,r4,r4
 8006ac4:	2109883a 	add	r4,r4,r4
 8006ac8:	1907883a 	add	r3,r3,r4
 8006acc:	19000017 	ldw	r4,0(r3)
 8006ad0:	14000415 	stw	r16,16(r2)
 8006ad4:	89000015 	stw	r4,0(r17)
 8006ad8:	1c400015 	stw	r17,0(r3)
 8006adc:	dfc00617 	ldw	ra,24(sp)
 8006ae0:	dd400517 	ldw	r21,20(sp)
 8006ae4:	dd000417 	ldw	r20,16(sp)
 8006ae8:	dcc00317 	ldw	r19,12(sp)
 8006aec:	dc800217 	ldw	r18,8(sp)
 8006af0:	dc400117 	ldw	r17,4(sp)
 8006af4:	dc000017 	ldw	r16,0(sp)
 8006af8:	dec00704 	addi	sp,sp,28
 8006afc:	f800283a 	ret
 8006b00:	19400017 	ldw	r5,0(r3)
 8006b04:	39c00104 	addi	r7,r7,4
 8006b08:	18c00104 	addi	r3,r3,4
 8006b0c:	397fff15 	stw	r5,-4(r7)
 8006b10:	193ffb36 	bltu	r3,r4,8006b00 <__alt_data_end+0xfc006b00>
 8006b14:	003fe706 	br	8006ab4 <__alt_data_end+0xfc006ab4>

08006b18 <__mcmp>:
 8006b18:	20800417 	ldw	r2,16(r4)
 8006b1c:	28c00417 	ldw	r3,16(r5)
 8006b20:	10c5c83a 	sub	r2,r2,r3
 8006b24:	1000111e 	bne	r2,zero,8006b6c <__mcmp+0x54>
 8006b28:	18c7883a 	add	r3,r3,r3
 8006b2c:	18c7883a 	add	r3,r3,r3
 8006b30:	21000504 	addi	r4,r4,20
 8006b34:	29400504 	addi	r5,r5,20
 8006b38:	20c5883a 	add	r2,r4,r3
 8006b3c:	28cb883a 	add	r5,r5,r3
 8006b40:	00000106 	br	8006b48 <__mcmp+0x30>
 8006b44:	20800a2e 	bgeu	r4,r2,8006b70 <__mcmp+0x58>
 8006b48:	10bfff04 	addi	r2,r2,-4
 8006b4c:	297fff04 	addi	r5,r5,-4
 8006b50:	11800017 	ldw	r6,0(r2)
 8006b54:	28c00017 	ldw	r3,0(r5)
 8006b58:	30fffa26 	beq	r6,r3,8006b44 <__alt_data_end+0xfc006b44>
 8006b5c:	30c00236 	bltu	r6,r3,8006b68 <__mcmp+0x50>
 8006b60:	00800044 	movi	r2,1
 8006b64:	f800283a 	ret
 8006b68:	00bfffc4 	movi	r2,-1
 8006b6c:	f800283a 	ret
 8006b70:	0005883a 	mov	r2,zero
 8006b74:	f800283a 	ret

08006b78 <__mdiff>:
 8006b78:	defffb04 	addi	sp,sp,-20
 8006b7c:	dc000015 	stw	r16,0(sp)
 8006b80:	2821883a 	mov	r16,r5
 8006b84:	dcc00315 	stw	r19,12(sp)
 8006b88:	300b883a 	mov	r5,r6
 8006b8c:	2027883a 	mov	r19,r4
 8006b90:	8009883a 	mov	r4,r16
 8006b94:	dc800215 	stw	r18,8(sp)
 8006b98:	dfc00415 	stw	ra,16(sp)
 8006b9c:	dc400115 	stw	r17,4(sp)
 8006ba0:	3025883a 	mov	r18,r6
 8006ba4:	8006b180 	call	8006b18 <__mcmp>
 8006ba8:	10005226 	beq	r2,zero,8006cf4 <__mdiff+0x17c>
 8006bac:	10004c16 	blt	r2,zero,8006ce0 <__mdiff+0x168>
 8006bb0:	0023883a 	mov	r17,zero
 8006bb4:	81400117 	ldw	r5,4(r16)
 8006bb8:	9809883a 	mov	r4,r19
 8006bbc:	800619c0 	call	800619c <_Balloc>
 8006bc0:	83400417 	ldw	r13,16(r16)
 8006bc4:	93800417 	ldw	r14,16(r18)
 8006bc8:	81000504 	addi	r4,r16,20
 8006bcc:	6b59883a 	add	r12,r13,r13
 8006bd0:	739d883a 	add	r14,r14,r14
 8006bd4:	6319883a 	add	r12,r12,r12
 8006bd8:	91800504 	addi	r6,r18,20
 8006bdc:	739d883a 	add	r14,r14,r14
 8006be0:	14400315 	stw	r17,12(r2)
 8006be4:	2319883a 	add	r12,r4,r12
 8006be8:	339d883a 	add	r14,r6,r14
 8006bec:	12400504 	addi	r9,r2,20
 8006bf0:	0007883a 	mov	r3,zero
 8006bf4:	22000017 	ldw	r8,0(r4)
 8006bf8:	32800017 	ldw	r10,0(r6)
 8006bfc:	4ac00104 	addi	r11,r9,4
 8006c00:	41ffffcc 	andi	r7,r8,65535
 8006c04:	38c7883a 	add	r3,r7,r3
 8006c08:	51ffffcc 	andi	r7,r10,65535
 8006c0c:	19cfc83a 	sub	r7,r3,r7
 8006c10:	4010d43a 	srli	r8,r8,16
 8006c14:	5014d43a 	srli	r10,r10,16
 8006c18:	3807d43a 	srai	r3,r7,16
 8006c1c:	39ffffcc 	andi	r7,r7,65535
 8006c20:	4291c83a 	sub	r8,r8,r10
 8006c24:	40c7883a 	add	r3,r8,r3
 8006c28:	1810943a 	slli	r8,r3,16
 8006c2c:	31800104 	addi	r6,r6,4
 8006c30:	21000104 	addi	r4,r4,4
 8006c34:	41ceb03a 	or	r7,r8,r7
 8006c38:	49c00015 	stw	r7,0(r9)
 8006c3c:	1807d43a 	srai	r3,r3,16
 8006c40:	580b883a 	mov	r5,r11
 8006c44:	5813883a 	mov	r9,r11
 8006c48:	33bfea36 	bltu	r6,r14,8006bf4 <__alt_data_end+0xfc006bf4>
 8006c4c:	2011883a 	mov	r8,r4
 8006c50:	2300152e 	bgeu	r4,r12,8006ca8 <__mdiff+0x130>
 8006c54:	21400017 	ldw	r5,0(r4)
 8006c58:	4a400104 	addi	r9,r9,4
 8006c5c:	21000104 	addi	r4,r4,4
 8006c60:	29ffffcc 	andi	r7,r5,65535
 8006c64:	38c7883a 	add	r3,r7,r3
 8006c68:	280ad43a 	srli	r5,r5,16
 8006c6c:	180dd43a 	srai	r6,r3,16
 8006c70:	19ffffcc 	andi	r7,r3,65535
 8006c74:	3147883a 	add	r3,r6,r5
 8006c78:	180a943a 	slli	r5,r3,16
 8006c7c:	1807d43a 	srai	r3,r3,16
 8006c80:	29ceb03a 	or	r7,r5,r7
 8006c84:	49ffff15 	stw	r7,-4(r9)
 8006c88:	233ff236 	bltu	r4,r12,8006c54 <__alt_data_end+0xfc006c54>
 8006c8c:	0206303a 	nor	r3,zero,r8
 8006c90:	1b07883a 	add	r3,r3,r12
 8006c94:	1806d0ba 	srli	r3,r3,2
 8006c98:	18c00044 	addi	r3,r3,1
 8006c9c:	18c7883a 	add	r3,r3,r3
 8006ca0:	18c7883a 	add	r3,r3,r3
 8006ca4:	58cb883a 	add	r5,r11,r3
 8006ca8:	28ffff04 	addi	r3,r5,-4
 8006cac:	3800041e 	bne	r7,zero,8006cc0 <__mdiff+0x148>
 8006cb0:	18ffff04 	addi	r3,r3,-4
 8006cb4:	19000017 	ldw	r4,0(r3)
 8006cb8:	6b7fffc4 	addi	r13,r13,-1
 8006cbc:	203ffc26 	beq	r4,zero,8006cb0 <__alt_data_end+0xfc006cb0>
 8006cc0:	13400415 	stw	r13,16(r2)
 8006cc4:	dfc00417 	ldw	ra,16(sp)
 8006cc8:	dcc00317 	ldw	r19,12(sp)
 8006ccc:	dc800217 	ldw	r18,8(sp)
 8006cd0:	dc400117 	ldw	r17,4(sp)
 8006cd4:	dc000017 	ldw	r16,0(sp)
 8006cd8:	dec00504 	addi	sp,sp,20
 8006cdc:	f800283a 	ret
 8006ce0:	8005883a 	mov	r2,r16
 8006ce4:	04400044 	movi	r17,1
 8006ce8:	9021883a 	mov	r16,r18
 8006cec:	1025883a 	mov	r18,r2
 8006cf0:	003fb006 	br	8006bb4 <__alt_data_end+0xfc006bb4>
 8006cf4:	9809883a 	mov	r4,r19
 8006cf8:	000b883a 	mov	r5,zero
 8006cfc:	800619c0 	call	800619c <_Balloc>
 8006d00:	00c00044 	movi	r3,1
 8006d04:	10c00415 	stw	r3,16(r2)
 8006d08:	10000515 	stw	zero,20(r2)
 8006d0c:	003fed06 	br	8006cc4 <__alt_data_end+0xfc006cc4>

08006d10 <__ulp>:
 8006d10:	295ffc2c 	andhi	r5,r5,32752
 8006d14:	00bf3034 	movhi	r2,64704
 8006d18:	2887883a 	add	r3,r5,r2
 8006d1c:	00c0020e 	bge	zero,r3,8006d28 <__ulp+0x18>
 8006d20:	0005883a 	mov	r2,zero
 8006d24:	f800283a 	ret
 8006d28:	00c7c83a 	sub	r3,zero,r3
 8006d2c:	180bd53a 	srai	r5,r3,20
 8006d30:	008004c4 	movi	r2,19
 8006d34:	11400a0e 	bge	r2,r5,8006d60 <__ulp+0x50>
 8006d38:	00800c84 	movi	r2,50
 8006d3c:	0007883a 	mov	r3,zero
 8006d40:	11400516 	blt	r2,r5,8006d58 <__ulp+0x48>
 8006d44:	00800cc4 	movi	r2,51
 8006d48:	114bc83a 	sub	r5,r2,r5
 8006d4c:	00800044 	movi	r2,1
 8006d50:	1144983a 	sll	r2,r2,r5
 8006d54:	f800283a 	ret
 8006d58:	00800044 	movi	r2,1
 8006d5c:	f800283a 	ret
 8006d60:	00800234 	movhi	r2,8
 8006d64:	1147d83a 	sra	r3,r2,r5
 8006d68:	0005883a 	mov	r2,zero
 8006d6c:	f800283a 	ret

08006d70 <__b2d>:
 8006d70:	defffa04 	addi	sp,sp,-24
 8006d74:	dc000015 	stw	r16,0(sp)
 8006d78:	24000417 	ldw	r16,16(r4)
 8006d7c:	dc400115 	stw	r17,4(sp)
 8006d80:	24400504 	addi	r17,r4,20
 8006d84:	8421883a 	add	r16,r16,r16
 8006d88:	8421883a 	add	r16,r16,r16
 8006d8c:	8c21883a 	add	r16,r17,r16
 8006d90:	dc800215 	stw	r18,8(sp)
 8006d94:	84bfff17 	ldw	r18,-4(r16)
 8006d98:	dd000415 	stw	r20,16(sp)
 8006d9c:	dcc00315 	stw	r19,12(sp)
 8006da0:	9009883a 	mov	r4,r18
 8006da4:	2829883a 	mov	r20,r5
 8006da8:	dfc00515 	stw	ra,20(sp)
 8006dac:	80064ac0 	call	80064ac <__hi0bits>
 8006db0:	00c00804 	movi	r3,32
 8006db4:	1887c83a 	sub	r3,r3,r2
 8006db8:	a0c00015 	stw	r3,0(r20)
 8006dbc:	00c00284 	movi	r3,10
 8006dc0:	84ffff04 	addi	r19,r16,-4
 8006dc4:	18801216 	blt	r3,r2,8006e10 <__b2d+0xa0>
 8006dc8:	014002c4 	movi	r5,11
 8006dcc:	2889c83a 	sub	r4,r5,r2
 8006dd0:	9106d83a 	srl	r3,r18,r4
 8006dd4:	18cffc34 	orhi	r3,r3,16368
 8006dd8:	8cc0282e 	bgeu	r17,r19,8006e7c <__b2d+0x10c>
 8006ddc:	817ffe17 	ldw	r5,-8(r16)
 8006de0:	290ad83a 	srl	r5,r5,r4
 8006de4:	10800544 	addi	r2,r2,21
 8006de8:	9084983a 	sll	r2,r18,r2
 8006dec:	2884b03a 	or	r2,r5,r2
 8006df0:	dfc00517 	ldw	ra,20(sp)
 8006df4:	dd000417 	ldw	r20,16(sp)
 8006df8:	dcc00317 	ldw	r19,12(sp)
 8006dfc:	dc800217 	ldw	r18,8(sp)
 8006e00:	dc400117 	ldw	r17,4(sp)
 8006e04:	dc000017 	ldw	r16,0(sp)
 8006e08:	dec00604 	addi	sp,sp,24
 8006e0c:	f800283a 	ret
 8006e10:	113ffd44 	addi	r4,r2,-11
 8006e14:	8cc00f2e 	bgeu	r17,r19,8006e54 <__b2d+0xe4>
 8006e18:	81bffe04 	addi	r6,r16,-8
 8006e1c:	817ffe17 	ldw	r5,-8(r16)
 8006e20:	20001326 	beq	r4,zero,8006e70 <__b2d+0x100>
 8006e24:	00c00ac4 	movi	r3,43
 8006e28:	1885c83a 	sub	r2,r3,r2
 8006e2c:	2886d83a 	srl	r3,r5,r2
 8006e30:	9124983a 	sll	r18,r18,r4
 8006e34:	90e4b03a 	or	r18,r18,r3
 8006e38:	90cffc34 	orhi	r3,r18,16368
 8006e3c:	8980112e 	bgeu	r17,r6,8006e84 <__b2d+0x114>
 8006e40:	81bffd17 	ldw	r6,-12(r16)
 8006e44:	308cd83a 	srl	r6,r6,r2
 8006e48:	2904983a 	sll	r2,r5,r4
 8006e4c:	1184b03a 	or	r2,r2,r6
 8006e50:	003fe706 	br	8006df0 <__alt_data_end+0xfc006df0>
 8006e54:	20000526 	beq	r4,zero,8006e6c <__b2d+0xfc>
 8006e58:	9124983a 	sll	r18,r18,r4
 8006e5c:	000d883a 	mov	r6,zero
 8006e60:	000b883a 	mov	r5,zero
 8006e64:	90cffc34 	orhi	r3,r18,16368
 8006e68:	003ff706 	br	8006e48 <__alt_data_end+0xfc006e48>
 8006e6c:	000b883a 	mov	r5,zero
 8006e70:	90cffc34 	orhi	r3,r18,16368
 8006e74:	2805883a 	mov	r2,r5
 8006e78:	003fdd06 	br	8006df0 <__alt_data_end+0xfc006df0>
 8006e7c:	000b883a 	mov	r5,zero
 8006e80:	003fd806 	br	8006de4 <__alt_data_end+0xfc006de4>
 8006e84:	000d883a 	mov	r6,zero
 8006e88:	003fef06 	br	8006e48 <__alt_data_end+0xfc006e48>

08006e8c <__d2b>:
 8006e8c:	defff704 	addi	sp,sp,-36
 8006e90:	dc000215 	stw	r16,8(sp)
 8006e94:	3021883a 	mov	r16,r6
 8006e98:	dc400315 	stw	r17,12(sp)
 8006e9c:	8022907a 	slli	r17,r16,1
 8006ea0:	dd400715 	stw	r21,28(sp)
 8006ea4:	282b883a 	mov	r21,r5
 8006ea8:	01400044 	movi	r5,1
 8006eac:	dd000615 	stw	r20,24(sp)
 8006eb0:	dcc00515 	stw	r19,20(sp)
 8006eb4:	dc800415 	stw	r18,16(sp)
 8006eb8:	dfc00815 	stw	ra,32(sp)
 8006ebc:	3829883a 	mov	r20,r7
 8006ec0:	dc800917 	ldw	r18,36(sp)
 8006ec4:	8822d57a 	srli	r17,r17,21
 8006ec8:	800619c0 	call	800619c <_Balloc>
 8006ecc:	1027883a 	mov	r19,r2
 8006ed0:	00800434 	movhi	r2,16
 8006ed4:	10bfffc4 	addi	r2,r2,-1
 8006ed8:	808c703a 	and	r6,r16,r2
 8006edc:	88000126 	beq	r17,zero,8006ee4 <__d2b+0x58>
 8006ee0:	31800434 	orhi	r6,r6,16
 8006ee4:	d9800015 	stw	r6,0(sp)
 8006ee8:	a8001f26 	beq	r21,zero,8006f68 <__d2b+0xdc>
 8006eec:	d9000104 	addi	r4,sp,4
 8006ef0:	dd400115 	stw	r21,4(sp)
 8006ef4:	80065140 	call	8006514 <__lo0bits>
 8006ef8:	d8c00017 	ldw	r3,0(sp)
 8006efc:	1000291e 	bne	r2,zero,8006fa4 <__d2b+0x118>
 8006f00:	d9000117 	ldw	r4,4(sp)
 8006f04:	99000515 	stw	r4,20(r19)
 8006f08:	1820c03a 	cmpne	r16,r3,zero
 8006f0c:	84000044 	addi	r16,r16,1
 8006f10:	98c00615 	stw	r3,24(r19)
 8006f14:	9c000415 	stw	r16,16(r19)
 8006f18:	88001b1e 	bne	r17,zero,8006f88 <__d2b+0xfc>
 8006f1c:	800690ba 	slli	r3,r16,2
 8006f20:	10bef384 	addi	r2,r2,-1074
 8006f24:	a0800015 	stw	r2,0(r20)
 8006f28:	98c5883a 	add	r2,r19,r3
 8006f2c:	11000417 	ldw	r4,16(r2)
 8006f30:	8020917a 	slli	r16,r16,5
 8006f34:	80064ac0 	call	80064ac <__hi0bits>
 8006f38:	8085c83a 	sub	r2,r16,r2
 8006f3c:	90800015 	stw	r2,0(r18)
 8006f40:	9805883a 	mov	r2,r19
 8006f44:	dfc00817 	ldw	ra,32(sp)
 8006f48:	dd400717 	ldw	r21,28(sp)
 8006f4c:	dd000617 	ldw	r20,24(sp)
 8006f50:	dcc00517 	ldw	r19,20(sp)
 8006f54:	dc800417 	ldw	r18,16(sp)
 8006f58:	dc400317 	ldw	r17,12(sp)
 8006f5c:	dc000217 	ldw	r16,8(sp)
 8006f60:	dec00904 	addi	sp,sp,36
 8006f64:	f800283a 	ret
 8006f68:	d809883a 	mov	r4,sp
 8006f6c:	80065140 	call	8006514 <__lo0bits>
 8006f70:	d8c00017 	ldw	r3,0(sp)
 8006f74:	04000044 	movi	r16,1
 8006f78:	9c000415 	stw	r16,16(r19)
 8006f7c:	98c00515 	stw	r3,20(r19)
 8006f80:	10800804 	addi	r2,r2,32
 8006f84:	883fe526 	beq	r17,zero,8006f1c <__alt_data_end+0xfc006f1c>
 8006f88:	8c7ef344 	addi	r17,r17,-1075
 8006f8c:	88a3883a 	add	r17,r17,r2
 8006f90:	00c00d44 	movi	r3,53
 8006f94:	a4400015 	stw	r17,0(r20)
 8006f98:	1885c83a 	sub	r2,r3,r2
 8006f9c:	90800015 	stw	r2,0(r18)
 8006fa0:	003fe706 	br	8006f40 <__alt_data_end+0xfc006f40>
 8006fa4:	01000804 	movi	r4,32
 8006fa8:	2089c83a 	sub	r4,r4,r2
 8006fac:	1908983a 	sll	r4,r3,r4
 8006fb0:	d9400117 	ldw	r5,4(sp)
 8006fb4:	1886d83a 	srl	r3,r3,r2
 8006fb8:	2148b03a 	or	r4,r4,r5
 8006fbc:	99000515 	stw	r4,20(r19)
 8006fc0:	d8c00015 	stw	r3,0(sp)
 8006fc4:	003fd006 	br	8006f08 <__alt_data_end+0xfc006f08>

08006fc8 <__ratio>:
 8006fc8:	defff904 	addi	sp,sp,-28
 8006fcc:	dc400315 	stw	r17,12(sp)
 8006fd0:	2823883a 	mov	r17,r5
 8006fd4:	d9400104 	addi	r5,sp,4
 8006fd8:	dfc00615 	stw	ra,24(sp)
 8006fdc:	dcc00515 	stw	r19,20(sp)
 8006fe0:	dc800415 	stw	r18,16(sp)
 8006fe4:	2027883a 	mov	r19,r4
 8006fe8:	dc000215 	stw	r16,8(sp)
 8006fec:	8006d700 	call	8006d70 <__b2d>
 8006ff0:	8809883a 	mov	r4,r17
 8006ff4:	d80b883a 	mov	r5,sp
 8006ff8:	1025883a 	mov	r18,r2
 8006ffc:	1821883a 	mov	r16,r3
 8007000:	8006d700 	call	8006d70 <__b2d>
 8007004:	8a400417 	ldw	r9,16(r17)
 8007008:	9a000417 	ldw	r8,16(r19)
 800700c:	100d883a 	mov	r6,r2
 8007010:	d8800017 	ldw	r2,0(sp)
 8007014:	4251c83a 	sub	r8,r8,r9
 8007018:	4012917a 	slli	r9,r8,5
 800701c:	da000117 	ldw	r8,4(sp)
 8007020:	4091c83a 	sub	r8,r8,r2
 8007024:	4251883a 	add	r8,r8,r9
 8007028:	02000d0e 	bge	zero,r8,8007060 <__ratio+0x98>
 800702c:	4010953a 	slli	r8,r8,20
 8007030:	4421883a 	add	r16,r8,r16
 8007034:	9009883a 	mov	r4,r18
 8007038:	800b883a 	mov	r5,r16
 800703c:	180f883a 	mov	r7,r3
 8007040:	800af200 	call	800af20 <__divdf3>
 8007044:	dfc00617 	ldw	ra,24(sp)
 8007048:	dcc00517 	ldw	r19,20(sp)
 800704c:	dc800417 	ldw	r18,16(sp)
 8007050:	dc400317 	ldw	r17,12(sp)
 8007054:	dc000217 	ldw	r16,8(sp)
 8007058:	dec00704 	addi	sp,sp,28
 800705c:	f800283a 	ret
 8007060:	4010953a 	slli	r8,r8,20
 8007064:	1a07c83a 	sub	r3,r3,r8
 8007068:	003ff206 	br	8007034 <__alt_data_end+0xfc007034>

0800706c <_mprec_log10>:
 800706c:	defffe04 	addi	sp,sp,-8
 8007070:	dc000015 	stw	r16,0(sp)
 8007074:	dfc00115 	stw	ra,4(sp)
 8007078:	008005c4 	movi	r2,23
 800707c:	2021883a 	mov	r16,r4
 8007080:	11000d0e 	bge	r2,r4,80070b8 <_mprec_log10+0x4c>
 8007084:	0005883a 	mov	r2,zero
 8007088:	00cffc34 	movhi	r3,16368
 800708c:	843fffc4 	addi	r16,r16,-1
 8007090:	1009883a 	mov	r4,r2
 8007094:	180b883a 	mov	r5,r3
 8007098:	000d883a 	mov	r6,zero
 800709c:	01d00934 	movhi	r7,16420
 80070a0:	800bae40 	call	800bae4 <__muldf3>
 80070a4:	803ff91e 	bne	r16,zero,800708c <__alt_data_end+0xfc00708c>
 80070a8:	dfc00117 	ldw	ra,4(sp)
 80070ac:	dc000017 	ldw	r16,0(sp)
 80070b0:	dec00204 	addi	sp,sp,8
 80070b4:	f800283a 	ret
 80070b8:	202090fa 	slli	r16,r4,3
 80070bc:	00820074 	movhi	r2,2049
 80070c0:	10bdcd04 	addi	r2,r2,-2252
 80070c4:	1421883a 	add	r16,r2,r16
 80070c8:	80800017 	ldw	r2,0(r16)
 80070cc:	80c00117 	ldw	r3,4(r16)
 80070d0:	dfc00117 	ldw	ra,4(sp)
 80070d4:	dc000017 	ldw	r16,0(sp)
 80070d8:	dec00204 	addi	sp,sp,8
 80070dc:	f800283a 	ret

080070e0 <__copybits>:
 80070e0:	297fffc4 	addi	r5,r5,-1
 80070e4:	280fd17a 	srai	r7,r5,5
 80070e8:	30c00417 	ldw	r3,16(r6)
 80070ec:	30800504 	addi	r2,r6,20
 80070f0:	39c00044 	addi	r7,r7,1
 80070f4:	18c7883a 	add	r3,r3,r3
 80070f8:	39cf883a 	add	r7,r7,r7
 80070fc:	18c7883a 	add	r3,r3,r3
 8007100:	39cf883a 	add	r7,r7,r7
 8007104:	10c7883a 	add	r3,r2,r3
 8007108:	21cf883a 	add	r7,r4,r7
 800710c:	10c00d2e 	bgeu	r2,r3,8007144 <__copybits+0x64>
 8007110:	200b883a 	mov	r5,r4
 8007114:	12000017 	ldw	r8,0(r2)
 8007118:	29400104 	addi	r5,r5,4
 800711c:	10800104 	addi	r2,r2,4
 8007120:	2a3fff15 	stw	r8,-4(r5)
 8007124:	10fffb36 	bltu	r2,r3,8007114 <__alt_data_end+0xfc007114>
 8007128:	1985c83a 	sub	r2,r3,r6
 800712c:	10bffac4 	addi	r2,r2,-21
 8007130:	1004d0ba 	srli	r2,r2,2
 8007134:	10800044 	addi	r2,r2,1
 8007138:	1085883a 	add	r2,r2,r2
 800713c:	1085883a 	add	r2,r2,r2
 8007140:	2089883a 	add	r4,r4,r2
 8007144:	21c0032e 	bgeu	r4,r7,8007154 <__copybits+0x74>
 8007148:	20000015 	stw	zero,0(r4)
 800714c:	21000104 	addi	r4,r4,4
 8007150:	21fffd36 	bltu	r4,r7,8007148 <__alt_data_end+0xfc007148>
 8007154:	f800283a 	ret

08007158 <__any_on>:
 8007158:	20c00417 	ldw	r3,16(r4)
 800715c:	2805d17a 	srai	r2,r5,5
 8007160:	21000504 	addi	r4,r4,20
 8007164:	18800d0e 	bge	r3,r2,800719c <__any_on+0x44>
 8007168:	18c7883a 	add	r3,r3,r3
 800716c:	18c7883a 	add	r3,r3,r3
 8007170:	20c7883a 	add	r3,r4,r3
 8007174:	20c0192e 	bgeu	r4,r3,80071dc <__any_on+0x84>
 8007178:	18bfff17 	ldw	r2,-4(r3)
 800717c:	18ffff04 	addi	r3,r3,-4
 8007180:	1000041e 	bne	r2,zero,8007194 <__any_on+0x3c>
 8007184:	20c0142e 	bgeu	r4,r3,80071d8 <__any_on+0x80>
 8007188:	18ffff04 	addi	r3,r3,-4
 800718c:	19400017 	ldw	r5,0(r3)
 8007190:	283ffc26 	beq	r5,zero,8007184 <__alt_data_end+0xfc007184>
 8007194:	00800044 	movi	r2,1
 8007198:	f800283a 	ret
 800719c:	10c00a0e 	bge	r2,r3,80071c8 <__any_on+0x70>
 80071a0:	1085883a 	add	r2,r2,r2
 80071a4:	1085883a 	add	r2,r2,r2
 80071a8:	294007cc 	andi	r5,r5,31
 80071ac:	2087883a 	add	r3,r4,r2
 80071b0:	283ff026 	beq	r5,zero,8007174 <__alt_data_end+0xfc007174>
 80071b4:	19800017 	ldw	r6,0(r3)
 80071b8:	3144d83a 	srl	r2,r6,r5
 80071bc:	114a983a 	sll	r5,r2,r5
 80071c0:	29bff41e 	bne	r5,r6,8007194 <__alt_data_end+0xfc007194>
 80071c4:	003feb06 	br	8007174 <__alt_data_end+0xfc007174>
 80071c8:	1085883a 	add	r2,r2,r2
 80071cc:	1085883a 	add	r2,r2,r2
 80071d0:	2087883a 	add	r3,r4,r2
 80071d4:	003fe706 	br	8007174 <__alt_data_end+0xfc007174>
 80071d8:	f800283a 	ret
 80071dc:	0005883a 	mov	r2,zero
 80071e0:	f800283a 	ret

080071e4 <_realloc_r>:
 80071e4:	defff604 	addi	sp,sp,-40
 80071e8:	dcc00315 	stw	r19,12(sp)
 80071ec:	dc400115 	stw	r17,4(sp)
 80071f0:	dfc00915 	stw	ra,36(sp)
 80071f4:	df000815 	stw	fp,32(sp)
 80071f8:	ddc00715 	stw	r23,28(sp)
 80071fc:	dd800615 	stw	r22,24(sp)
 8007200:	dd400515 	stw	r21,20(sp)
 8007204:	dd000415 	stw	r20,16(sp)
 8007208:	dc800215 	stw	r18,8(sp)
 800720c:	dc000015 	stw	r16,0(sp)
 8007210:	2827883a 	mov	r19,r5
 8007214:	3023883a 	mov	r17,r6
 8007218:	2800bf26 	beq	r5,zero,8007518 <_realloc_r+0x334>
 800721c:	2025883a 	mov	r18,r4
 8007220:	800d4600 	call	800d460 <__malloc_lock>
 8007224:	98ffff17 	ldw	r3,-4(r19)
 8007228:	01bfff04 	movi	r6,-4
 800722c:	890002c4 	addi	r4,r17,11
 8007230:	01c00584 	movi	r7,22
 8007234:	9d7ffe04 	addi	r21,r19,-8
 8007238:	19a0703a 	and	r16,r3,r6
 800723c:	39003f2e 	bgeu	r7,r4,800733c <_realloc_r+0x158>
 8007240:	053ffe04 	movi	r20,-8
 8007244:	2528703a 	and	r20,r4,r20
 8007248:	a00f883a 	mov	r7,r20
 800724c:	a0008216 	blt	r20,zero,8007458 <_realloc_r+0x274>
 8007250:	a4408136 	bltu	r20,r17,8007458 <_realloc_r+0x274>
 8007254:	81c03c0e 	bge	r16,r7,8007348 <_realloc_r+0x164>
 8007258:	07020074 	movhi	fp,2049
 800725c:	e73f7b04 	addi	fp,fp,-532
 8007260:	e1000217 	ldw	r4,8(fp)
 8007264:	ac05883a 	add	r2,r21,r16
 8007268:	2080bf26 	beq	r4,r2,8007568 <_realloc_r+0x384>
 800726c:	11000117 	ldw	r4,4(r2)
 8007270:	023fff84 	movi	r8,-2
 8007274:	2210703a 	and	r8,r4,r8
 8007278:	1211883a 	add	r8,r2,r8
 800727c:	41400117 	ldw	r5,4(r8)
 8007280:	2940004c 	andi	r5,r5,1
 8007284:	28004a1e 	bne	r5,zero,80073b0 <_realloc_r+0x1cc>
 8007288:	017fff04 	movi	r5,-4
 800728c:	2148703a 	and	r4,r4,r5
 8007290:	2409883a 	add	r4,r4,r16
 8007294:	21c0ad0e 	bge	r4,r7,800754c <_realloc_r+0x368>
 8007298:	18c0004c 	andi	r3,r3,1
 800729c:	18007f1e 	bne	r3,zero,800749c <_realloc_r+0x2b8>
 80072a0:	9dfffe17 	ldw	r23,-8(r19)
 80072a4:	adefc83a 	sub	r23,r21,r23
 80072a8:	bd800117 	ldw	r22,4(r23)
 80072ac:	b14a703a 	and	r5,r22,r5
 80072b0:	216d883a 	add	r22,r4,r5
 80072b4:	b1c04516 	blt	r22,r7,80073cc <_realloc_r+0x1e8>
 80072b8:	10c00317 	ldw	r3,12(r2)
 80072bc:	10800217 	ldw	r2,8(r2)
 80072c0:	81bfff04 	addi	r6,r16,-4
 80072c4:	bc400204 	addi	r17,r23,8
 80072c8:	10c00315 	stw	r3,12(r2)
 80072cc:	18800215 	stw	r2,8(r3)
 80072d0:	b9400217 	ldw	r5,8(r23)
 80072d4:	b8c00317 	ldw	r3,12(r23)
 80072d8:	00800904 	movi	r2,36
 80072dc:	28c00315 	stw	r3,12(r5)
 80072e0:	19400215 	stw	r5,8(r3)
 80072e4:	1180ef36 	bltu	r2,r6,80076a4 <_realloc_r+0x4c0>
 80072e8:	008004c4 	movi	r2,19
 80072ec:	1180da2e 	bgeu	r2,r6,8007658 <_realloc_r+0x474>
 80072f0:	98800017 	ldw	r2,0(r19)
 80072f4:	b8800215 	stw	r2,8(r23)
 80072f8:	98800117 	ldw	r2,4(r19)
 80072fc:	b8800315 	stw	r2,12(r23)
 8007300:	008006c4 	movi	r2,27
 8007304:	1180fc2e 	bgeu	r2,r6,80076f8 <_realloc_r+0x514>
 8007308:	98800217 	ldw	r2,8(r19)
 800730c:	b8800415 	stw	r2,16(r23)
 8007310:	98800317 	ldw	r2,12(r19)
 8007314:	b8800515 	stw	r2,20(r23)
 8007318:	00800904 	movi	r2,36
 800731c:	3080421e 	bne	r6,r2,8007428 <_realloc_r+0x244>
 8007320:	98800417 	ldw	r2,16(r19)
 8007324:	9cc00604 	addi	r19,r19,24
 8007328:	b8c00804 	addi	r3,r23,32
 800732c:	b8800615 	stw	r2,24(r23)
 8007330:	98bfff17 	ldw	r2,-4(r19)
 8007334:	b8800715 	stw	r2,28(r23)
 8007338:	00003d06 	br	8007430 <_realloc_r+0x24c>
 800733c:	01c00404 	movi	r7,16
 8007340:	3829883a 	mov	r20,r7
 8007344:	003fc206 	br	8007250 <__alt_data_end+0xfc007250>
 8007348:	9823883a 	mov	r17,r19
 800734c:	850fc83a 	sub	r7,r16,r20
 8007350:	008003c4 	movi	r2,15
 8007354:	18c0004c 	andi	r3,r3,1
 8007358:	11c04336 	bltu	r2,r7,8007468 <_realloc_r+0x284>
 800735c:	1c06b03a 	or	r3,r3,r16
 8007360:	a8c00115 	stw	r3,4(r21)
 8007364:	ac21883a 	add	r16,r21,r16
 8007368:	80c00117 	ldw	r3,4(r16)
 800736c:	18c00054 	ori	r3,r3,1
 8007370:	80c00115 	stw	r3,4(r16)
 8007374:	9009883a 	mov	r4,r18
 8007378:	800d4800 	call	800d480 <__malloc_unlock>
 800737c:	8805883a 	mov	r2,r17
 8007380:	dfc00917 	ldw	ra,36(sp)
 8007384:	df000817 	ldw	fp,32(sp)
 8007388:	ddc00717 	ldw	r23,28(sp)
 800738c:	dd800617 	ldw	r22,24(sp)
 8007390:	dd400517 	ldw	r21,20(sp)
 8007394:	dd000417 	ldw	r20,16(sp)
 8007398:	dcc00317 	ldw	r19,12(sp)
 800739c:	dc800217 	ldw	r18,8(sp)
 80073a0:	dc400117 	ldw	r17,4(sp)
 80073a4:	dc000017 	ldw	r16,0(sp)
 80073a8:	dec00a04 	addi	sp,sp,40
 80073ac:	f800283a 	ret
 80073b0:	18c0004c 	andi	r3,r3,1
 80073b4:	1800391e 	bne	r3,zero,800749c <_realloc_r+0x2b8>
 80073b8:	9dfffe17 	ldw	r23,-8(r19)
 80073bc:	00bfff04 	movi	r2,-4
 80073c0:	adefc83a 	sub	r23,r21,r23
 80073c4:	b9400117 	ldw	r5,4(r23)
 80073c8:	288a703a 	and	r5,r5,r2
 80073cc:	2c2d883a 	add	r22,r5,r16
 80073d0:	b1c03216 	blt	r22,r7,800749c <_realloc_r+0x2b8>
 80073d4:	b8800317 	ldw	r2,12(r23)
 80073d8:	b8c00217 	ldw	r3,8(r23)
 80073dc:	81bfff04 	addi	r6,r16,-4
 80073e0:	01000904 	movi	r4,36
 80073e4:	18800315 	stw	r2,12(r3)
 80073e8:	10c00215 	stw	r3,8(r2)
 80073ec:	bc400204 	addi	r17,r23,8
 80073f0:	2180ac36 	bltu	r4,r6,80076a4 <_realloc_r+0x4c0>
 80073f4:	008004c4 	movi	r2,19
 80073f8:	1180972e 	bgeu	r2,r6,8007658 <_realloc_r+0x474>
 80073fc:	98800017 	ldw	r2,0(r19)
 8007400:	b8800215 	stw	r2,8(r23)
 8007404:	98800117 	ldw	r2,4(r19)
 8007408:	b8800315 	stw	r2,12(r23)
 800740c:	008006c4 	movi	r2,27
 8007410:	1180b92e 	bgeu	r2,r6,80076f8 <_realloc_r+0x514>
 8007414:	98800217 	ldw	r2,8(r19)
 8007418:	b8800415 	stw	r2,16(r23)
 800741c:	98800317 	ldw	r2,12(r19)
 8007420:	b8800515 	stw	r2,20(r23)
 8007424:	313fbe26 	beq	r6,r4,8007320 <__alt_data_end+0xfc007320>
 8007428:	b8c00604 	addi	r3,r23,24
 800742c:	9cc00404 	addi	r19,r19,16
 8007430:	98800017 	ldw	r2,0(r19)
 8007434:	b021883a 	mov	r16,r22
 8007438:	b82b883a 	mov	r21,r23
 800743c:	18800015 	stw	r2,0(r3)
 8007440:	98800117 	ldw	r2,4(r19)
 8007444:	18800115 	stw	r2,4(r3)
 8007448:	98800217 	ldw	r2,8(r19)
 800744c:	18800215 	stw	r2,8(r3)
 8007450:	b8c00117 	ldw	r3,4(r23)
 8007454:	003fbd06 	br	800734c <__alt_data_end+0xfc00734c>
 8007458:	00800304 	movi	r2,12
 800745c:	90800015 	stw	r2,0(r18)
 8007460:	0005883a 	mov	r2,zero
 8007464:	003fc606 	br	8007380 <__alt_data_end+0xfc007380>
 8007468:	1d06b03a 	or	r3,r3,r20
 800746c:	ad0b883a 	add	r5,r21,r20
 8007470:	a8c00115 	stw	r3,4(r21)
 8007474:	38800054 	ori	r2,r7,1
 8007478:	28800115 	stw	r2,4(r5)
 800747c:	29cf883a 	add	r7,r5,r7
 8007480:	38800117 	ldw	r2,4(r7)
 8007484:	9009883a 	mov	r4,r18
 8007488:	29400204 	addi	r5,r5,8
 800748c:	10800054 	ori	r2,r2,1
 8007490:	38800115 	stw	r2,4(r7)
 8007494:	80049b80 	call	80049b8 <_free_r>
 8007498:	003fb606 	br	8007374 <__alt_data_end+0xfc007374>
 800749c:	880b883a 	mov	r5,r17
 80074a0:	9009883a 	mov	r4,r18
 80074a4:	80055540 	call	8005554 <_malloc_r>
 80074a8:	1023883a 	mov	r17,r2
 80074ac:	1000aa26 	beq	r2,zero,8007758 <_realloc_r+0x574>
 80074b0:	98ffff17 	ldw	r3,-4(r19)
 80074b4:	113ffe04 	addi	r4,r2,-8
 80074b8:	00bfff84 	movi	r2,-2
 80074bc:	1884703a 	and	r2,r3,r2
 80074c0:	a885883a 	add	r2,r21,r2
 80074c4:	20808626 	beq	r4,r2,80076e0 <_realloc_r+0x4fc>
 80074c8:	81bfff04 	addi	r6,r16,-4
 80074cc:	00800904 	movi	r2,36
 80074d0:	11807036 	bltu	r2,r6,8007694 <_realloc_r+0x4b0>
 80074d4:	00c004c4 	movi	r3,19
 80074d8:	19805636 	bltu	r3,r6,8007634 <_realloc_r+0x450>
 80074dc:	8805883a 	mov	r2,r17
 80074e0:	9807883a 	mov	r3,r19
 80074e4:	19000017 	ldw	r4,0(r3)
 80074e8:	11000015 	stw	r4,0(r2)
 80074ec:	19000117 	ldw	r4,4(r3)
 80074f0:	11000115 	stw	r4,4(r2)
 80074f4:	18c00217 	ldw	r3,8(r3)
 80074f8:	10c00215 	stw	r3,8(r2)
 80074fc:	980b883a 	mov	r5,r19
 8007500:	9009883a 	mov	r4,r18
 8007504:	80049b80 	call	80049b8 <_free_r>
 8007508:	9009883a 	mov	r4,r18
 800750c:	800d4800 	call	800d480 <__malloc_unlock>
 8007510:	8805883a 	mov	r2,r17
 8007514:	003f9a06 	br	8007380 <__alt_data_end+0xfc007380>
 8007518:	300b883a 	mov	r5,r6
 800751c:	dfc00917 	ldw	ra,36(sp)
 8007520:	df000817 	ldw	fp,32(sp)
 8007524:	ddc00717 	ldw	r23,28(sp)
 8007528:	dd800617 	ldw	r22,24(sp)
 800752c:	dd400517 	ldw	r21,20(sp)
 8007530:	dd000417 	ldw	r20,16(sp)
 8007534:	dcc00317 	ldw	r19,12(sp)
 8007538:	dc800217 	ldw	r18,8(sp)
 800753c:	dc400117 	ldw	r17,4(sp)
 8007540:	dc000017 	ldw	r16,0(sp)
 8007544:	dec00a04 	addi	sp,sp,40
 8007548:	80055541 	jmpi	8005554 <_malloc_r>
 800754c:	11400317 	ldw	r5,12(r2)
 8007550:	10800217 	ldw	r2,8(r2)
 8007554:	9823883a 	mov	r17,r19
 8007558:	2021883a 	mov	r16,r4
 800755c:	11400315 	stw	r5,12(r2)
 8007560:	28800215 	stw	r2,8(r5)
 8007564:	003f7906 	br	800734c <__alt_data_end+0xfc00734c>
 8007568:	21000117 	ldw	r4,4(r4)
 800756c:	00bfff04 	movi	r2,-4
 8007570:	a1800404 	addi	r6,r20,16
 8007574:	2088703a 	and	r4,r4,r2
 8007578:	2409883a 	add	r4,r4,r16
 800757c:	2180380e 	bge	r4,r6,8007660 <_realloc_r+0x47c>
 8007580:	18c0004c 	andi	r3,r3,1
 8007584:	183fc51e 	bne	r3,zero,800749c <__alt_data_end+0xfc00749c>
 8007588:	9dfffe17 	ldw	r23,-8(r19)
 800758c:	adefc83a 	sub	r23,r21,r23
 8007590:	b9400117 	ldw	r5,4(r23)
 8007594:	288a703a 	and	r5,r5,r2
 8007598:	216d883a 	add	r22,r4,r5
 800759c:	b1bf8b16 	blt	r22,r6,80073cc <__alt_data_end+0xfc0073cc>
 80075a0:	b8800317 	ldw	r2,12(r23)
 80075a4:	b8c00217 	ldw	r3,8(r23)
 80075a8:	81bfff04 	addi	r6,r16,-4
 80075ac:	01000904 	movi	r4,36
 80075b0:	18800315 	stw	r2,12(r3)
 80075b4:	10c00215 	stw	r3,8(r2)
 80075b8:	bc400204 	addi	r17,r23,8
 80075bc:	21805a36 	bltu	r4,r6,8007728 <_realloc_r+0x544>
 80075c0:	008004c4 	movi	r2,19
 80075c4:	1180562e 	bgeu	r2,r6,8007720 <_realloc_r+0x53c>
 80075c8:	98800017 	ldw	r2,0(r19)
 80075cc:	b8800215 	stw	r2,8(r23)
 80075d0:	98800117 	ldw	r2,4(r19)
 80075d4:	b8800315 	stw	r2,12(r23)
 80075d8:	008006c4 	movi	r2,27
 80075dc:	11805636 	bltu	r2,r6,8007738 <_realloc_r+0x554>
 80075e0:	b8800404 	addi	r2,r23,16
 80075e4:	9cc00204 	addi	r19,r19,8
 80075e8:	98c00017 	ldw	r3,0(r19)
 80075ec:	10c00015 	stw	r3,0(r2)
 80075f0:	98c00117 	ldw	r3,4(r19)
 80075f4:	10c00115 	stw	r3,4(r2)
 80075f8:	98c00217 	ldw	r3,8(r19)
 80075fc:	10c00215 	stw	r3,8(r2)
 8007600:	bd07883a 	add	r3,r23,r20
 8007604:	b505c83a 	sub	r2,r22,r20
 8007608:	e0c00215 	stw	r3,8(fp)
 800760c:	10800054 	ori	r2,r2,1
 8007610:	18800115 	stw	r2,4(r3)
 8007614:	b8800117 	ldw	r2,4(r23)
 8007618:	9009883a 	mov	r4,r18
 800761c:	1080004c 	andi	r2,r2,1
 8007620:	a0a8b03a 	or	r20,r20,r2
 8007624:	bd000115 	stw	r20,4(r23)
 8007628:	800d4800 	call	800d480 <__malloc_unlock>
 800762c:	8805883a 	mov	r2,r17
 8007630:	003f5306 	br	8007380 <__alt_data_end+0xfc007380>
 8007634:	98c00017 	ldw	r3,0(r19)
 8007638:	88c00015 	stw	r3,0(r17)
 800763c:	98c00117 	ldw	r3,4(r19)
 8007640:	88c00115 	stw	r3,4(r17)
 8007644:	00c006c4 	movi	r3,27
 8007648:	19801d36 	bltu	r3,r6,80076c0 <_realloc_r+0x4dc>
 800764c:	88800204 	addi	r2,r17,8
 8007650:	98c00204 	addi	r3,r19,8
 8007654:	003fa306 	br	80074e4 <__alt_data_end+0xfc0074e4>
 8007658:	8807883a 	mov	r3,r17
 800765c:	003f7406 	br	8007430 <__alt_data_end+0xfc007430>
 8007660:	ad2b883a 	add	r21,r21,r20
 8007664:	2505c83a 	sub	r2,r4,r20
 8007668:	e5400215 	stw	r21,8(fp)
 800766c:	10800054 	ori	r2,r2,1
 8007670:	a8800115 	stw	r2,4(r21)
 8007674:	98bfff17 	ldw	r2,-4(r19)
 8007678:	9009883a 	mov	r4,r18
 800767c:	1080004c 	andi	r2,r2,1
 8007680:	a0a8b03a 	or	r20,r20,r2
 8007684:	9d3fff15 	stw	r20,-4(r19)
 8007688:	800d4800 	call	800d480 <__malloc_unlock>
 800768c:	9805883a 	mov	r2,r19
 8007690:	003f3b06 	br	8007380 <__alt_data_end+0xfc007380>
 8007694:	8809883a 	mov	r4,r17
 8007698:	980b883a 	mov	r5,r19
 800769c:	8005f1c0 	call	8005f1c <memmove>
 80076a0:	003f9606 	br	80074fc <__alt_data_end+0xfc0074fc>
 80076a4:	8809883a 	mov	r4,r17
 80076a8:	980b883a 	mov	r5,r19
 80076ac:	8005f1c0 	call	8005f1c <memmove>
 80076b0:	b8c00117 	ldw	r3,4(r23)
 80076b4:	b021883a 	mov	r16,r22
 80076b8:	b82b883a 	mov	r21,r23
 80076bc:	003f2306 	br	800734c <__alt_data_end+0xfc00734c>
 80076c0:	98c00217 	ldw	r3,8(r19)
 80076c4:	88c00215 	stw	r3,8(r17)
 80076c8:	98c00317 	ldw	r3,12(r19)
 80076cc:	88c00315 	stw	r3,12(r17)
 80076d0:	30800c26 	beq	r6,r2,8007704 <_realloc_r+0x520>
 80076d4:	88800404 	addi	r2,r17,16
 80076d8:	98c00404 	addi	r3,r19,16
 80076dc:	003f8106 	br	80074e4 <__alt_data_end+0xfc0074e4>
 80076e0:	893fff17 	ldw	r4,-4(r17)
 80076e4:	00bfff04 	movi	r2,-4
 80076e8:	9823883a 	mov	r17,r19
 80076ec:	2084703a 	and	r2,r4,r2
 80076f0:	80a1883a 	add	r16,r16,r2
 80076f4:	003f1506 	br	800734c <__alt_data_end+0xfc00734c>
 80076f8:	b8c00404 	addi	r3,r23,16
 80076fc:	9cc00204 	addi	r19,r19,8
 8007700:	003f4b06 	br	8007430 <__alt_data_end+0xfc007430>
 8007704:	99000417 	ldw	r4,16(r19)
 8007708:	88800604 	addi	r2,r17,24
 800770c:	98c00604 	addi	r3,r19,24
 8007710:	89000415 	stw	r4,16(r17)
 8007714:	99000517 	ldw	r4,20(r19)
 8007718:	89000515 	stw	r4,20(r17)
 800771c:	003f7106 	br	80074e4 <__alt_data_end+0xfc0074e4>
 8007720:	8805883a 	mov	r2,r17
 8007724:	003fb006 	br	80075e8 <__alt_data_end+0xfc0075e8>
 8007728:	8809883a 	mov	r4,r17
 800772c:	980b883a 	mov	r5,r19
 8007730:	8005f1c0 	call	8005f1c <memmove>
 8007734:	003fb206 	br	8007600 <__alt_data_end+0xfc007600>
 8007738:	98800217 	ldw	r2,8(r19)
 800773c:	b8800415 	stw	r2,16(r23)
 8007740:	98800317 	ldw	r2,12(r19)
 8007744:	b8800515 	stw	r2,20(r23)
 8007748:	31000726 	beq	r6,r4,8007768 <_realloc_r+0x584>
 800774c:	b8800604 	addi	r2,r23,24
 8007750:	9cc00404 	addi	r19,r19,16
 8007754:	003fa406 	br	80075e8 <__alt_data_end+0xfc0075e8>
 8007758:	9009883a 	mov	r4,r18
 800775c:	800d4800 	call	800d480 <__malloc_unlock>
 8007760:	0005883a 	mov	r2,zero
 8007764:	003f0606 	br	8007380 <__alt_data_end+0xfc007380>
 8007768:	98c00417 	ldw	r3,16(r19)
 800776c:	9cc00604 	addi	r19,r19,24
 8007770:	b8800804 	addi	r2,r23,32
 8007774:	b8c00615 	stw	r3,24(r23)
 8007778:	98ffff17 	ldw	r3,-4(r19)
 800777c:	b8c00715 	stw	r3,28(r23)
 8007780:	003f9906 	br	80075e8 <__alt_data_end+0xfc0075e8>

08007784 <__fpclassifyd>:
 8007784:	00a00034 	movhi	r2,32768
 8007788:	10bfffc4 	addi	r2,r2,-1
 800778c:	2884703a 	and	r2,r5,r2
 8007790:	10000726 	beq	r2,zero,80077b0 <__fpclassifyd+0x2c>
 8007794:	00fffc34 	movhi	r3,65520
 8007798:	019ff834 	movhi	r6,32736
 800779c:	28c7883a 	add	r3,r5,r3
 80077a0:	31bfffc4 	addi	r6,r6,-1
 80077a4:	30c00536 	bltu	r6,r3,80077bc <__fpclassifyd+0x38>
 80077a8:	00800104 	movi	r2,4
 80077ac:	f800283a 	ret
 80077b0:	2000021e 	bne	r4,zero,80077bc <__fpclassifyd+0x38>
 80077b4:	00800084 	movi	r2,2
 80077b8:	f800283a 	ret
 80077bc:	00dffc34 	movhi	r3,32752
 80077c0:	019ff834 	movhi	r6,32736
 80077c4:	28cb883a 	add	r5,r5,r3
 80077c8:	31bfffc4 	addi	r6,r6,-1
 80077cc:	317ff62e 	bgeu	r6,r5,80077a8 <__alt_data_end+0xfc0077a8>
 80077d0:	01400434 	movhi	r5,16
 80077d4:	297fffc4 	addi	r5,r5,-1
 80077d8:	28800236 	bltu	r5,r2,80077e4 <__fpclassifyd+0x60>
 80077dc:	008000c4 	movi	r2,3
 80077e0:	f800283a 	ret
 80077e4:	10c00226 	beq	r2,r3,80077f0 <__fpclassifyd+0x6c>
 80077e8:	0005883a 	mov	r2,zero
 80077ec:	f800283a 	ret
 80077f0:	2005003a 	cmpeq	r2,r4,zero
 80077f4:	f800283a 	ret

080077f8 <_sbrk_r>:
 80077f8:	defffd04 	addi	sp,sp,-12
 80077fc:	dc000015 	stw	r16,0(sp)
 8007800:	04020074 	movhi	r16,2049
 8007804:	dc400115 	stw	r17,4(sp)
 8007808:	840bd004 	addi	r16,r16,12096
 800780c:	2023883a 	mov	r17,r4
 8007810:	2809883a 	mov	r4,r5
 8007814:	dfc00215 	stw	ra,8(sp)
 8007818:	80000015 	stw	zero,0(r16)
 800781c:	800d6740 	call	800d674 <sbrk>
 8007820:	00ffffc4 	movi	r3,-1
 8007824:	10c00526 	beq	r2,r3,800783c <_sbrk_r+0x44>
 8007828:	dfc00217 	ldw	ra,8(sp)
 800782c:	dc400117 	ldw	r17,4(sp)
 8007830:	dc000017 	ldw	r16,0(sp)
 8007834:	dec00304 	addi	sp,sp,12
 8007838:	f800283a 	ret
 800783c:	80c00017 	ldw	r3,0(r16)
 8007840:	183ff926 	beq	r3,zero,8007828 <__alt_data_end+0xfc007828>
 8007844:	88c00015 	stw	r3,0(r17)
 8007848:	003ff706 	br	8007828 <__alt_data_end+0xfc007828>

0800784c <__sread>:
 800784c:	defffe04 	addi	sp,sp,-8
 8007850:	dc000015 	stw	r16,0(sp)
 8007854:	2821883a 	mov	r16,r5
 8007858:	2940038f 	ldh	r5,14(r5)
 800785c:	dfc00115 	stw	ra,4(sp)
 8007860:	80095080 	call	8009508 <_read_r>
 8007864:	10000716 	blt	r2,zero,8007884 <__sread+0x38>
 8007868:	80c01417 	ldw	r3,80(r16)
 800786c:	1887883a 	add	r3,r3,r2
 8007870:	80c01415 	stw	r3,80(r16)
 8007874:	dfc00117 	ldw	ra,4(sp)
 8007878:	dc000017 	ldw	r16,0(sp)
 800787c:	dec00204 	addi	sp,sp,8
 8007880:	f800283a 	ret
 8007884:	80c0030b 	ldhu	r3,12(r16)
 8007888:	18fbffcc 	andi	r3,r3,61439
 800788c:	80c0030d 	sth	r3,12(r16)
 8007890:	dfc00117 	ldw	ra,4(sp)
 8007894:	dc000017 	ldw	r16,0(sp)
 8007898:	dec00204 	addi	sp,sp,8
 800789c:	f800283a 	ret

080078a0 <__seofread>:
 80078a0:	0005883a 	mov	r2,zero
 80078a4:	f800283a 	ret

080078a8 <__swrite>:
 80078a8:	2880030b 	ldhu	r2,12(r5)
 80078ac:	defffb04 	addi	sp,sp,-20
 80078b0:	dcc00315 	stw	r19,12(sp)
 80078b4:	dc800215 	stw	r18,8(sp)
 80078b8:	dc400115 	stw	r17,4(sp)
 80078bc:	dc000015 	stw	r16,0(sp)
 80078c0:	dfc00415 	stw	ra,16(sp)
 80078c4:	10c0400c 	andi	r3,r2,256
 80078c8:	2821883a 	mov	r16,r5
 80078cc:	2027883a 	mov	r19,r4
 80078d0:	3025883a 	mov	r18,r6
 80078d4:	3823883a 	mov	r17,r7
 80078d8:	18000526 	beq	r3,zero,80078f0 <__swrite+0x48>
 80078dc:	2940038f 	ldh	r5,14(r5)
 80078e0:	000d883a 	mov	r6,zero
 80078e4:	01c00084 	movi	r7,2
 80078e8:	80094ac0 	call	80094ac <_lseek_r>
 80078ec:	8080030b 	ldhu	r2,12(r16)
 80078f0:	8140038f 	ldh	r5,14(r16)
 80078f4:	10bbffcc 	andi	r2,r2,61439
 80078f8:	9809883a 	mov	r4,r19
 80078fc:	900d883a 	mov	r6,r18
 8007900:	880f883a 	mov	r7,r17
 8007904:	8080030d 	sth	r2,12(r16)
 8007908:	dfc00417 	ldw	ra,16(sp)
 800790c:	dcc00317 	ldw	r19,12(sp)
 8007910:	dc800217 	ldw	r18,8(sp)
 8007914:	dc400117 	ldw	r17,4(sp)
 8007918:	dc000017 	ldw	r16,0(sp)
 800791c:	dec00504 	addi	sp,sp,20
 8007920:	8008f881 	jmpi	8008f88 <_write_r>

08007924 <__sseek>:
 8007924:	defffe04 	addi	sp,sp,-8
 8007928:	dc000015 	stw	r16,0(sp)
 800792c:	2821883a 	mov	r16,r5
 8007930:	2940038f 	ldh	r5,14(r5)
 8007934:	dfc00115 	stw	ra,4(sp)
 8007938:	80094ac0 	call	80094ac <_lseek_r>
 800793c:	00ffffc4 	movi	r3,-1
 8007940:	10c00826 	beq	r2,r3,8007964 <__sseek+0x40>
 8007944:	80c0030b 	ldhu	r3,12(r16)
 8007948:	80801415 	stw	r2,80(r16)
 800794c:	18c40014 	ori	r3,r3,4096
 8007950:	80c0030d 	sth	r3,12(r16)
 8007954:	dfc00117 	ldw	ra,4(sp)
 8007958:	dc000017 	ldw	r16,0(sp)
 800795c:	dec00204 	addi	sp,sp,8
 8007960:	f800283a 	ret
 8007964:	80c0030b 	ldhu	r3,12(r16)
 8007968:	18fbffcc 	andi	r3,r3,61439
 800796c:	80c0030d 	sth	r3,12(r16)
 8007970:	dfc00117 	ldw	ra,4(sp)
 8007974:	dc000017 	ldw	r16,0(sp)
 8007978:	dec00204 	addi	sp,sp,8
 800797c:	f800283a 	ret

08007980 <__sclose>:
 8007980:	2940038f 	ldh	r5,14(r5)
 8007984:	8008fe41 	jmpi	8008fe4 <_close_r>

08007988 <strcmp>:
 8007988:	2144b03a 	or	r2,r4,r5
 800798c:	108000cc 	andi	r2,r2,3
 8007990:	1000171e 	bne	r2,zero,80079f0 <strcmp+0x68>
 8007994:	20800017 	ldw	r2,0(r4)
 8007998:	28c00017 	ldw	r3,0(r5)
 800799c:	10c0141e 	bne	r2,r3,80079f0 <strcmp+0x68>
 80079a0:	027fbff4 	movhi	r9,65279
 80079a4:	4a7fbfc4 	addi	r9,r9,-257
 80079a8:	0086303a 	nor	r3,zero,r2
 80079ac:	02202074 	movhi	r8,32897
 80079b0:	1245883a 	add	r2,r2,r9
 80079b4:	42202004 	addi	r8,r8,-32640
 80079b8:	10c4703a 	and	r2,r2,r3
 80079bc:	1204703a 	and	r2,r2,r8
 80079c0:	10000226 	beq	r2,zero,80079cc <strcmp+0x44>
 80079c4:	00001706 	br	8007a24 <strcmp+0x9c>
 80079c8:	1000161e 	bne	r2,zero,8007a24 <strcmp+0x9c>
 80079cc:	21000104 	addi	r4,r4,4
 80079d0:	20c00017 	ldw	r3,0(r4)
 80079d4:	29400104 	addi	r5,r5,4
 80079d8:	29800017 	ldw	r6,0(r5)
 80079dc:	1a4f883a 	add	r7,r3,r9
 80079e0:	00c4303a 	nor	r2,zero,r3
 80079e4:	3884703a 	and	r2,r7,r2
 80079e8:	1204703a 	and	r2,r2,r8
 80079ec:	19bff626 	beq	r3,r6,80079c8 <__alt_data_end+0xfc0079c8>
 80079f0:	20800007 	ldb	r2,0(r4)
 80079f4:	1000051e 	bne	r2,zero,8007a0c <strcmp+0x84>
 80079f8:	00000606 	br	8007a14 <strcmp+0x8c>
 80079fc:	21000044 	addi	r4,r4,1
 8007a00:	20800007 	ldb	r2,0(r4)
 8007a04:	29400044 	addi	r5,r5,1
 8007a08:	10000226 	beq	r2,zero,8007a14 <strcmp+0x8c>
 8007a0c:	28c00007 	ldb	r3,0(r5)
 8007a10:	10fffa26 	beq	r2,r3,80079fc <__alt_data_end+0xfc0079fc>
 8007a14:	20800003 	ldbu	r2,0(r4)
 8007a18:	28c00003 	ldbu	r3,0(r5)
 8007a1c:	10c5c83a 	sub	r2,r2,r3
 8007a20:	f800283a 	ret
 8007a24:	0005883a 	mov	r2,zero
 8007a28:	f800283a 	ret

08007a2c <__sprint_r.part.0>:
 8007a2c:	28801917 	ldw	r2,100(r5)
 8007a30:	defff604 	addi	sp,sp,-40
 8007a34:	dd400515 	stw	r21,20(sp)
 8007a38:	dcc00315 	stw	r19,12(sp)
 8007a3c:	dfc00915 	stw	ra,36(sp)
 8007a40:	df000815 	stw	fp,32(sp)
 8007a44:	ddc00715 	stw	r23,28(sp)
 8007a48:	dd800615 	stw	r22,24(sp)
 8007a4c:	dd000415 	stw	r20,16(sp)
 8007a50:	dc800215 	stw	r18,8(sp)
 8007a54:	dc400115 	stw	r17,4(sp)
 8007a58:	dc000015 	stw	r16,0(sp)
 8007a5c:	1088000c 	andi	r2,r2,8192
 8007a60:	2827883a 	mov	r19,r5
 8007a64:	302b883a 	mov	r21,r6
 8007a68:	10002d26 	beq	r2,zero,8007b20 <__sprint_r.part.0+0xf4>
 8007a6c:	30800217 	ldw	r2,8(r6)
 8007a70:	35800017 	ldw	r22,0(r6)
 8007a74:	10002826 	beq	r2,zero,8007b18 <__sprint_r.part.0+0xec>
 8007a78:	2029883a 	mov	r20,r4
 8007a7c:	b5c00104 	addi	r23,r22,4
 8007a80:	04bfffc4 	movi	r18,-1
 8007a84:	bc400017 	ldw	r17,0(r23)
 8007a88:	b4000017 	ldw	r16,0(r22)
 8007a8c:	0039883a 	mov	fp,zero
 8007a90:	8822d0ba 	srli	r17,r17,2
 8007a94:	04400316 	blt	zero,r17,8007aa4 <__sprint_r.part.0+0x78>
 8007a98:	00001706 	br	8007af8 <__sprint_r.part.0+0xcc>
 8007a9c:	84000104 	addi	r16,r16,4
 8007aa0:	8f001526 	beq	r17,fp,8007af8 <__sprint_r.part.0+0xcc>
 8007aa4:	81400017 	ldw	r5,0(r16)
 8007aa8:	a009883a 	mov	r4,r20
 8007aac:	980d883a 	mov	r6,r19
 8007ab0:	80092240 	call	8009224 <_fputwc_r>
 8007ab4:	e7000044 	addi	fp,fp,1
 8007ab8:	14bff81e 	bne	r2,r18,8007a9c <__alt_data_end+0xfc007a9c>
 8007abc:	9005883a 	mov	r2,r18
 8007ac0:	a8000215 	stw	zero,8(r21)
 8007ac4:	a8000115 	stw	zero,4(r21)
 8007ac8:	dfc00917 	ldw	ra,36(sp)
 8007acc:	df000817 	ldw	fp,32(sp)
 8007ad0:	ddc00717 	ldw	r23,28(sp)
 8007ad4:	dd800617 	ldw	r22,24(sp)
 8007ad8:	dd400517 	ldw	r21,20(sp)
 8007adc:	dd000417 	ldw	r20,16(sp)
 8007ae0:	dcc00317 	ldw	r19,12(sp)
 8007ae4:	dc800217 	ldw	r18,8(sp)
 8007ae8:	dc400117 	ldw	r17,4(sp)
 8007aec:	dc000017 	ldw	r16,0(sp)
 8007af0:	dec00a04 	addi	sp,sp,40
 8007af4:	f800283a 	ret
 8007af8:	a8c00217 	ldw	r3,8(r21)
 8007afc:	8c63883a 	add	r17,r17,r17
 8007b00:	8c63883a 	add	r17,r17,r17
 8007b04:	1c45c83a 	sub	r2,r3,r17
 8007b08:	a8800215 	stw	r2,8(r21)
 8007b0c:	b5800204 	addi	r22,r22,8
 8007b10:	bdc00204 	addi	r23,r23,8
 8007b14:	103fdb1e 	bne	r2,zero,8007a84 <__alt_data_end+0xfc007a84>
 8007b18:	0005883a 	mov	r2,zero
 8007b1c:	003fe806 	br	8007ac0 <__alt_data_end+0xfc007ac0>
 8007b20:	8004ca80 	call	8004ca8 <__sfvwrite_r>
 8007b24:	003fe606 	br	8007ac0 <__alt_data_end+0xfc007ac0>

08007b28 <__sprint_r>:
 8007b28:	30c00217 	ldw	r3,8(r6)
 8007b2c:	18000126 	beq	r3,zero,8007b34 <__sprint_r+0xc>
 8007b30:	8007a2c1 	jmpi	8007a2c <__sprint_r.part.0>
 8007b34:	30000115 	stw	zero,4(r6)
 8007b38:	0005883a 	mov	r2,zero
 8007b3c:	f800283a 	ret

08007b40 <___vfiprintf_internal_r>:
 8007b40:	defeca04 	addi	sp,sp,-1240
 8007b44:	dcc12f15 	stw	r19,1212(sp)
 8007b48:	dfc13515 	stw	ra,1236(sp)
 8007b4c:	df013415 	stw	fp,1232(sp)
 8007b50:	ddc13315 	stw	r23,1228(sp)
 8007b54:	dd813215 	stw	r22,1224(sp)
 8007b58:	dd413115 	stw	r21,1220(sp)
 8007b5c:	dd013015 	stw	r20,1216(sp)
 8007b60:	dc812e15 	stw	r18,1208(sp)
 8007b64:	dc412d15 	stw	r17,1204(sp)
 8007b68:	dc012c15 	stw	r16,1200(sp)
 8007b6c:	d9012115 	stw	r4,1156(sp)
 8007b70:	d9412015 	stw	r5,1152(sp)
 8007b74:	d9c12315 	stw	r7,1164(sp)
 8007b78:	3027883a 	mov	r19,r6
 8007b7c:	20000226 	beq	r4,zero,8007b88 <___vfiprintf_internal_r+0x48>
 8007b80:	20800e17 	ldw	r2,56(r4)
 8007b84:	1000f726 	beq	r2,zero,8007f64 <___vfiprintf_internal_r+0x424>
 8007b88:	d8812017 	ldw	r2,1152(sp)
 8007b8c:	10c0030b 	ldhu	r3,12(r2)
 8007b90:	1908000c 	andi	r4,r3,8192
 8007b94:	1805883a 	mov	r2,r3
 8007b98:	2000081e 	bne	r4,zero,8007bbc <___vfiprintf_internal_r+0x7c>
 8007b9c:	d9412017 	ldw	r5,1152(sp)
 8007ba0:	18880014 	ori	r2,r3,8192
 8007ba4:	00f7ffc4 	movi	r3,-8193
 8007ba8:	29001917 	ldw	r4,100(r5)
 8007bac:	2880030d 	sth	r2,12(r5)
 8007bb0:	20c8703a 	and	r4,r4,r3
 8007bb4:	29001915 	stw	r4,100(r5)
 8007bb8:	1007883a 	mov	r3,r2
 8007bbc:	1100020c 	andi	r4,r2,8
 8007bc0:	2000a726 	beq	r4,zero,8007e60 <___vfiprintf_internal_r+0x320>
 8007bc4:	d9412017 	ldw	r5,1152(sp)
 8007bc8:	29000417 	ldw	r4,16(r5)
 8007bcc:	2000a426 	beq	r4,zero,8007e60 <___vfiprintf_internal_r+0x320>
 8007bd0:	1080068c 	andi	r2,r2,26
 8007bd4:	01000284 	movi	r4,10
 8007bd8:	1100ab26 	beq	r2,r4,8007e88 <___vfiprintf_internal_r+0x348>
 8007bdc:	d9010a04 	addi	r4,sp,1064
 8007be0:	d94109c4 	addi	r5,sp,1063
 8007be4:	07020074 	movhi	fp,2049
 8007be8:	04420074 	movhi	r17,2049
 8007bec:	2145c83a 	sub	r2,r4,r5
 8007bf0:	e73e0304 	addi	fp,fp,-2036
 8007bf4:	8c7dff04 	addi	r17,r17,-2052
 8007bf8:	d9011e15 	stw	r4,1144(sp)
 8007bfc:	d9411f15 	stw	r5,1148(sp)
 8007c00:	dec11a15 	stw	sp,1128(sp)
 8007c04:	d8011c15 	stw	zero,1136(sp)
 8007c08:	d8011b15 	stw	zero,1132(sp)
 8007c0c:	d8012715 	stw	zero,1180(sp)
 8007c10:	d8012515 	stw	zero,1172(sp)
 8007c14:	d811883a 	mov	r8,sp
 8007c18:	d8812815 	stw	r2,1184(sp)
 8007c1c:	982f883a 	mov	r23,r19
 8007c20:	b8800007 	ldb	r2,0(r23)
 8007c24:	1003b026 	beq	r2,zero,8008ae8 <___vfiprintf_internal_r+0xfa8>
 8007c28:	01000944 	movi	r4,37
 8007c2c:	1103ae26 	beq	r2,r4,8008ae8 <___vfiprintf_internal_r+0xfa8>
 8007c30:	b805883a 	mov	r2,r23
 8007c34:	00000106 	br	8007c3c <___vfiprintf_internal_r+0xfc>
 8007c38:	19000326 	beq	r3,r4,8007c48 <___vfiprintf_internal_r+0x108>
 8007c3c:	10800044 	addi	r2,r2,1
 8007c40:	10c00007 	ldb	r3,0(r2)
 8007c44:	183ffc1e 	bne	r3,zero,8007c38 <__alt_data_end+0xfc007c38>
 8007c48:	15e1c83a 	sub	r16,r2,r23
 8007c4c:	1029883a 	mov	r20,r2
 8007c50:	80001026 	beq	r16,zero,8007c94 <___vfiprintf_internal_r+0x154>
 8007c54:	d8c11c17 	ldw	r3,1136(sp)
 8007c58:	d8811b17 	ldw	r2,1132(sp)
 8007c5c:	45c00015 	stw	r23,0(r8)
 8007c60:	80c7883a 	add	r3,r16,r3
 8007c64:	10800044 	addi	r2,r2,1
 8007c68:	44000115 	stw	r16,4(r8)
 8007c6c:	d8c11c15 	stw	r3,1136(sp)
 8007c70:	d8811b15 	stw	r2,1132(sp)
 8007c74:	010001c4 	movi	r4,7
 8007c78:	2080740e 	bge	r4,r2,8007e4c <___vfiprintf_internal_r+0x30c>
 8007c7c:	1803a71e 	bne	r3,zero,8008b1c <___vfiprintf_internal_r+0xfdc>
 8007c80:	d8c12517 	ldw	r3,1172(sp)
 8007c84:	d8011b15 	stw	zero,1132(sp)
 8007c88:	d811883a 	mov	r8,sp
 8007c8c:	1c07883a 	add	r3,r3,r16
 8007c90:	d8c12515 	stw	r3,1172(sp)
 8007c94:	a0800007 	ldb	r2,0(r20)
 8007c98:	1002bf26 	beq	r2,zero,8008798 <___vfiprintf_internal_r+0xc58>
 8007c9c:	a5c00044 	addi	r23,r20,1
 8007ca0:	a1800047 	ldb	r6,1(r20)
 8007ca4:	d8011d85 	stb	zero,1142(sp)
 8007ca8:	d8012205 	stb	zero,1160(sp)
 8007cac:	043fffc4 	movi	r16,-1
 8007cb0:	d8012415 	stw	zero,1168(sp)
 8007cb4:	0025883a 	mov	r18,zero
 8007cb8:	05001604 	movi	r20,88
 8007cbc:	05400244 	movi	r21,9
 8007cc0:	4027883a 	mov	r19,r8
 8007cc4:	bdc00044 	addi	r23,r23,1
 8007cc8:	30bff804 	addi	r2,r6,-32
 8007ccc:	a0825636 	bltu	r20,r2,8008628 <___vfiprintf_internal_r+0xae8>
 8007cd0:	100490ba 	slli	r2,r2,2
 8007cd4:	01020034 	movhi	r4,2048
 8007cd8:	211f3a04 	addi	r4,r4,31976
 8007cdc:	1105883a 	add	r2,r2,r4
 8007ce0:	10800017 	ldw	r2,0(r2)
 8007ce4:	1000683a 	jmp	r2
 8007ce8:	080085b8 	rdprs	zero,at,534
 8007cec:	08008628 	cmpgeui	zero,at,536
 8007cf0:	08008628 	cmpgeui	zero,at,536
 8007cf4:	0800861c 	xori	zero,at,536
 8007cf8:	08008628 	cmpgeui	zero,at,536
 8007cfc:	08008628 	cmpgeui	zero,at,536
 8007d00:	08008628 	cmpgeui	zero,at,536
 8007d04:	08008628 	cmpgeui	zero,at,536
 8007d08:	08008628 	cmpgeui	zero,at,536
 8007d0c:	08008628 	cmpgeui	zero,at,536
 8007d10:	080083a8 	cmpgeui	zero,at,526
 8007d14:	080085d0 	cmplti	zero,at,535
 8007d18:	08008628 	cmpgeui	zero,at,536
 8007d1c:	08007f7c 	xorhi	zero,at,509
 8007d20:	080083cc 	andi	zero,at,527
 8007d24:	08008628 	cmpgeui	zero,at,536
 8007d28:	08007f88 	cmpgei	zero,at,510
 8007d2c:	08007f94 	ori	zero,at,510
 8007d30:	08007f94 	ori	zero,at,510
 8007d34:	08007f94 	ori	zero,at,510
 8007d38:	08007f94 	ori	zero,at,510
 8007d3c:	08007f94 	ori	zero,at,510
 8007d40:	08007f94 	ori	zero,at,510
 8007d44:	08007f94 	ori	zero,at,510
 8007d48:	08007f94 	ori	zero,at,510
 8007d4c:	08007f94 	ori	zero,at,510
 8007d50:	08008628 	cmpgeui	zero,at,536
 8007d54:	08008628 	cmpgeui	zero,at,536
 8007d58:	08008628 	cmpgeui	zero,at,536
 8007d5c:	08008628 	cmpgeui	zero,at,536
 8007d60:	08008628 	cmpgeui	zero,at,536
 8007d64:	08008628 	cmpgeui	zero,at,536
 8007d68:	08008628 	cmpgeui	zero,at,536
 8007d6c:	08008628 	cmpgeui	zero,at,536
 8007d70:	08008628 	cmpgeui	zero,at,536
 8007d74:	08008628 	cmpgeui	zero,at,536
 8007d78:	08007fd4 	ori	zero,at,511
 8007d7c:	08008628 	cmpgeui	zero,at,536
 8007d80:	08008628 	cmpgeui	zero,at,536
 8007d84:	08008628 	cmpgeui	zero,at,536
 8007d88:	08008628 	cmpgeui	zero,at,536
 8007d8c:	08008628 	cmpgeui	zero,at,536
 8007d90:	08008628 	cmpgeui	zero,at,536
 8007d94:	08008628 	cmpgeui	zero,at,536
 8007d98:	08008628 	cmpgeui	zero,at,536
 8007d9c:	08008628 	cmpgeui	zero,at,536
 8007da0:	08008628 	cmpgeui	zero,at,536
 8007da4:	080082c4 	addi	zero,at,523
 8007da8:	08008628 	cmpgeui	zero,at,536
 8007dac:	08008628 	cmpgeui	zero,at,536
 8007db0:	08008628 	cmpgeui	zero,at,536
 8007db4:	08008628 	cmpgeui	zero,at,536
 8007db8:	08008628 	cmpgeui	zero,at,536
 8007dbc:	08008304 	addi	zero,at,524
 8007dc0:	08008628 	cmpgeui	zero,at,536
 8007dc4:	08008628 	cmpgeui	zero,at,536
 8007dc8:	08008348 	cmpgei	zero,at,525
 8007dcc:	08008628 	cmpgeui	zero,at,536
 8007dd0:	08008628 	cmpgeui	zero,at,536
 8007dd4:	08008628 	cmpgeui	zero,at,536
 8007dd8:	08008628 	cmpgeui	zero,at,536
 8007ddc:	08008628 	cmpgeui	zero,at,536
 8007de0:	08008628 	cmpgeui	zero,at,536
 8007de4:	08008628 	cmpgeui	zero,at,536
 8007de8:	08008628 	cmpgeui	zero,at,536
 8007dec:	08008628 	cmpgeui	zero,at,536
 8007df0:	08008628 	cmpgeui	zero,at,536
 8007df4:	08008290 	cmplti	zero,at,522
 8007df8:	080085e0 	cmpeqi	zero,at,535
 8007dfc:	08008628 	cmpgeui	zero,at,536
 8007e00:	08008628 	cmpgeui	zero,at,536
 8007e04:	08008628 	cmpgeui	zero,at,536
 8007e08:	0800841c 	xori	zero,at,528
 8007e0c:	080085e0 	cmpeqi	zero,at,535
 8007e10:	08008628 	cmpgeui	zero,at,536
 8007e14:	08008628 	cmpgeui	zero,at,536
 8007e18:	08008334 	orhi	zero,at,524
 8007e1c:	08008628 	cmpgeui	zero,at,536
 8007e20:	08008580 	call	800858 <__alt_mem_onchip_memory2_0+0x800858>
 8007e24:	08008508 	cmpgei	zero,at,532
 8007e28:	0800853c 	xorhi	zero,at,532
 8007e2c:	08008428 	cmpgeui	zero,at,528
 8007e30:	08008628 	cmpgeui	zero,at,536
 8007e34:	08008434 	orhi	zero,at,528
 8007e38:	08008628 	cmpgeui	zero,at,536
 8007e3c:	08008490 	cmplti	zero,at,530
 8007e40:	08008628 	cmpgeui	zero,at,536
 8007e44:	08008628 	cmpgeui	zero,at,536
 8007e48:	080084c4 	addi	zero,at,531
 8007e4c:	42000204 	addi	r8,r8,8
 8007e50:	d8c12517 	ldw	r3,1172(sp)
 8007e54:	1c07883a 	add	r3,r3,r16
 8007e58:	d8c12515 	stw	r3,1172(sp)
 8007e5c:	003f8d06 	br	8007c94 <__alt_data_end+0xfc007c94>
 8007e60:	d9012117 	ldw	r4,1156(sp)
 8007e64:	d9412017 	ldw	r5,1152(sp)
 8007e68:	80028080 	call	8002808 <__swsetup_r>
 8007e6c:	1000301e 	bne	r2,zero,8007f30 <___vfiprintf_internal_r+0x3f0>
 8007e70:	d8812017 	ldw	r2,1152(sp)
 8007e74:	01000284 	movi	r4,10
 8007e78:	10c0030b 	ldhu	r3,12(r2)
 8007e7c:	1805883a 	mov	r2,r3
 8007e80:	1080068c 	andi	r2,r2,26
 8007e84:	113f551e 	bne	r2,r4,8007bdc <__alt_data_end+0xfc007bdc>
 8007e88:	d9012017 	ldw	r4,1152(sp)
 8007e8c:	2080038b 	ldhu	r2,14(r4)
 8007e90:	113fffcc 	andi	r4,r2,65535
 8007e94:	2120001c 	xori	r4,r4,32768
 8007e98:	21200004 	addi	r4,r4,-32768
 8007e9c:	203f4f16 	blt	r4,zero,8007bdc <__alt_data_end+0xfc007bdc>
 8007ea0:	d9412017 	ldw	r5,1152(sp)
 8007ea4:	d9012117 	ldw	r4,1156(sp)
 8007ea8:	d9c12317 	ldw	r7,1164(sp)
 8007eac:	2b001917 	ldw	r12,100(r5)
 8007eb0:	2ac00717 	ldw	r11,28(r5)
 8007eb4:	2a800917 	ldw	r10,36(r5)
 8007eb8:	02010004 	movi	r8,1024
 8007ebc:	18ffff4c 	andi	r3,r3,65533
 8007ec0:	da0b883a 	add	r5,sp,r8
 8007ec4:	980d883a 	mov	r6,r19
 8007ec8:	d8c1030d 	sth	r3,1036(sp)
 8007ecc:	db011915 	stw	r12,1124(sp)
 8007ed0:	d881038d 	sth	r2,1038(sp)
 8007ed4:	dac10715 	stw	r11,1052(sp)
 8007ed8:	da810915 	stw	r10,1060(sp)
 8007edc:	dec10015 	stw	sp,1024(sp)
 8007ee0:	dec10415 	stw	sp,1040(sp)
 8007ee4:	da010215 	stw	r8,1032(sp)
 8007ee8:	da010515 	stw	r8,1044(sp)
 8007eec:	d8010615 	stw	zero,1048(sp)
 8007ef0:	8007b400 	call	8007b40 <___vfiprintf_internal_r>
 8007ef4:	1021883a 	mov	r16,r2
 8007ef8:	10000416 	blt	r2,zero,8007f0c <___vfiprintf_internal_r+0x3cc>
 8007efc:	d9012117 	ldw	r4,1156(sp)
 8007f00:	d9410004 	addi	r5,sp,1024
 8007f04:	80042880 	call	8004288 <_fflush_r>
 8007f08:	10040f1e 	bne	r2,zero,8008f48 <___vfiprintf_internal_r+0x1408>
 8007f0c:	d881030b 	ldhu	r2,1036(sp)
 8007f10:	1080100c 	andi	r2,r2,64
 8007f14:	10000426 	beq	r2,zero,8007f28 <___vfiprintf_internal_r+0x3e8>
 8007f18:	d8c12017 	ldw	r3,1152(sp)
 8007f1c:	1880030b 	ldhu	r2,12(r3)
 8007f20:	10801014 	ori	r2,r2,64
 8007f24:	1880030d 	sth	r2,12(r3)
 8007f28:	8005883a 	mov	r2,r16
 8007f2c:	00000106 	br	8007f34 <___vfiprintf_internal_r+0x3f4>
 8007f30:	00bfffc4 	movi	r2,-1
 8007f34:	dfc13517 	ldw	ra,1236(sp)
 8007f38:	df013417 	ldw	fp,1232(sp)
 8007f3c:	ddc13317 	ldw	r23,1228(sp)
 8007f40:	dd813217 	ldw	r22,1224(sp)
 8007f44:	dd413117 	ldw	r21,1220(sp)
 8007f48:	dd013017 	ldw	r20,1216(sp)
 8007f4c:	dcc12f17 	ldw	r19,1212(sp)
 8007f50:	dc812e17 	ldw	r18,1208(sp)
 8007f54:	dc412d17 	ldw	r17,1204(sp)
 8007f58:	dc012c17 	ldw	r16,1200(sp)
 8007f5c:	dec13604 	addi	sp,sp,1240
 8007f60:	f800283a 	ret
 8007f64:	80048440 	call	8004844 <__sinit>
 8007f68:	003f0706 	br	8007b88 <__alt_data_end+0xfc007b88>
 8007f6c:	d8c12417 	ldw	r3,1168(sp)
 8007f70:	d8812315 	stw	r2,1164(sp)
 8007f74:	00c7c83a 	sub	r3,zero,r3
 8007f78:	d8c12415 	stw	r3,1168(sp)
 8007f7c:	94800114 	ori	r18,r18,4
 8007f80:	b9800007 	ldb	r6,0(r23)
 8007f84:	003f4f06 	br	8007cc4 <__alt_data_end+0xfc007cc4>
 8007f88:	94802014 	ori	r18,r18,128
 8007f8c:	b9800007 	ldb	r6,0(r23)
 8007f90:	003f4c06 	br	8007cc4 <__alt_data_end+0xfc007cc4>
 8007f94:	dc012615 	stw	r16,1176(sp)
 8007f98:	d8012415 	stw	zero,1168(sp)
 8007f9c:	35bff404 	addi	r22,r6,-48
 8007fa0:	0009883a 	mov	r4,zero
 8007fa4:	b821883a 	mov	r16,r23
 8007fa8:	01400284 	movi	r5,10
 8007fac:	800a65c0 	call	800a65c <__mulsi3>
 8007fb0:	81800007 	ldb	r6,0(r16)
 8007fb4:	1589883a 	add	r4,r2,r22
 8007fb8:	bdc00044 	addi	r23,r23,1
 8007fbc:	35bff404 	addi	r22,r6,-48
 8007fc0:	b821883a 	mov	r16,r23
 8007fc4:	adbff82e 	bgeu	r21,r22,8007fa8 <__alt_data_end+0xfc007fa8>
 8007fc8:	d9012415 	stw	r4,1168(sp)
 8007fcc:	dc012617 	ldw	r16,1176(sp)
 8007fd0:	003f3d06 	br	8007cc8 <__alt_data_end+0xfc007cc8>
 8007fd4:	d8c12203 	ldbu	r3,1160(sp)
 8007fd8:	94800414 	ori	r18,r18,16
 8007fdc:	9080080c 	andi	r2,r18,32
 8007fe0:	d8c11d85 	stb	r3,1142(sp)
 8007fe4:	9811883a 	mov	r8,r19
 8007fe8:	d8c12317 	ldw	r3,1164(sp)
 8007fec:	10018226 	beq	r2,zero,80085f8 <___vfiprintf_internal_r+0xab8>
 8007ff0:	d9012317 	ldw	r4,1164(sp)
 8007ff4:	18800117 	ldw	r2,4(r3)
 8007ff8:	1cc00017 	ldw	r19,0(r3)
 8007ffc:	21000204 	addi	r4,r4,8
 8008000:	d9012315 	stw	r4,1164(sp)
 8008004:	102b883a 	mov	r21,r2
 8008008:	10030016 	blt	r2,zero,8008c0c <___vfiprintf_internal_r+0x10cc>
 800800c:	dd811d83 	ldbu	r22,1142(sp)
 8008010:	8029883a 	mov	r20,r16
 8008014:	00800044 	movi	r2,1
 8008018:	9d46b03a 	or	r3,r19,r21
 800801c:	80000216 	blt	r16,zero,8008028 <___vfiprintf_internal_r+0x4e8>
 8008020:	013fdfc4 	movi	r4,-129
 8008024:	9124703a 	and	r18,r18,r4
 8008028:	1801b41e 	bne	r3,zero,80086fc <___vfiprintf_internal_r+0xbbc>
 800802c:	80028126 	beq	r16,zero,8008a34 <___vfiprintf_internal_r+0xef4>
 8008030:	10803fcc 	andi	r2,r2,255
 8008034:	00c00044 	movi	r3,1
 8008038:	10c1d126 	beq	r2,r3,8008780 <___vfiprintf_internal_r+0xc40>
 800803c:	00c00084 	movi	r3,2
 8008040:	10c28626 	beq	r2,r3,8008a5c <___vfiprintf_internal_r+0xf1c>
 8008044:	d8c10a04 	addi	r3,sp,1064
 8008048:	9808d0fa 	srli	r4,r19,3
 800804c:	a80a977a 	slli	r5,r21,29
 8008050:	a82ad0fa 	srli	r21,r21,3
 8008054:	9cc001cc 	andi	r19,r19,7
 8008058:	98800c04 	addi	r2,r19,48
 800805c:	18ffffc4 	addi	r3,r3,-1
 8008060:	2926b03a 	or	r19,r5,r4
 8008064:	18800005 	stb	r2,0(r3)
 8008068:	9d48b03a 	or	r4,r19,r21
 800806c:	203ff61e 	bne	r4,zero,8008048 <__alt_data_end+0xfc008048>
 8008070:	9100004c 	andi	r4,r18,1
 8008074:	d8c12215 	stw	r3,1160(sp)
 8008078:	2002b31e 	bne	r4,zero,8008b48 <___vfiprintf_internal_r+0x1008>
 800807c:	d9411e17 	ldw	r5,1144(sp)
 8008080:	28e9c83a 	sub	r20,r5,r3
 8008084:	a02b883a 	mov	r21,r20
 8008088:	a400010e 	bge	r20,r16,8008090 <___vfiprintf_internal_r+0x550>
 800808c:	802b883a 	mov	r21,r16
 8008090:	b5803fcc 	andi	r22,r22,255
 8008094:	b580201c 	xori	r22,r22,128
 8008098:	b5bfe004 	addi	r22,r22,-128
 800809c:	b0000126 	beq	r22,zero,80080a4 <___vfiprintf_internal_r+0x564>
 80080a0:	ad400044 	addi	r21,r21,1
 80080a4:	9280008c 	andi	r10,r18,2
 80080a8:	50000126 	beq	r10,zero,80080b0 <___vfiprintf_internal_r+0x570>
 80080ac:	ad400084 	addi	r21,r21,2
 80080b0:	9580210c 	andi	r22,r18,132
 80080b4:	b001751e 	bne	r22,zero,800868c <___vfiprintf_internal_r+0xb4c>
 80080b8:	d9012417 	ldw	r4,1168(sp)
 80080bc:	2567c83a 	sub	r19,r4,r21
 80080c0:	04c1720e 	bge	zero,r19,800868c <___vfiprintf_internal_r+0xb4c>
 80080c4:	01c00404 	movi	r7,16
 80080c8:	d8c11c17 	ldw	r3,1136(sp)
 80080cc:	3cc36b0e 	bge	r7,r19,8008e7c <___vfiprintf_internal_r+0x133c>
 80080d0:	00820074 	movhi	r2,2049
 80080d4:	10be0304 	addi	r2,r2,-2036
 80080d8:	dc012915 	stw	r16,1188(sp)
 80080dc:	d9011b17 	ldw	r4,1132(sp)
 80080e0:	9821883a 	mov	r16,r19
 80080e4:	d8812615 	stw	r2,1176(sp)
 80080e8:	030001c4 	movi	r12,7
 80080ec:	5027883a 	mov	r19,r10
 80080f0:	00000506 	br	8008108 <___vfiprintf_internal_r+0x5c8>
 80080f4:	21400084 	addi	r5,r4,2
 80080f8:	42000204 	addi	r8,r8,8
 80080fc:	1009883a 	mov	r4,r2
 8008100:	843ffc04 	addi	r16,r16,-16
 8008104:	3c000d0e 	bge	r7,r16,800813c <___vfiprintf_internal_r+0x5fc>
 8008108:	18c00404 	addi	r3,r3,16
 800810c:	20800044 	addi	r2,r4,1
 8008110:	47000015 	stw	fp,0(r8)
 8008114:	41c00115 	stw	r7,4(r8)
 8008118:	d8c11c15 	stw	r3,1136(sp)
 800811c:	d8811b15 	stw	r2,1132(sp)
 8008120:	60bff40e 	bge	r12,r2,80080f4 <__alt_data_end+0xfc0080f4>
 8008124:	18014b1e 	bne	r3,zero,8008654 <___vfiprintf_internal_r+0xb14>
 8008128:	843ffc04 	addi	r16,r16,-16
 800812c:	0009883a 	mov	r4,zero
 8008130:	01400044 	movi	r5,1
 8008134:	d811883a 	mov	r8,sp
 8008138:	3c3ff316 	blt	r7,r16,8008108 <__alt_data_end+0xfc008108>
 800813c:	9815883a 	mov	r10,r19
 8008140:	8027883a 	mov	r19,r16
 8008144:	dc012917 	ldw	r16,1188(sp)
 8008148:	d9012617 	ldw	r4,1176(sp)
 800814c:	98c7883a 	add	r3,r19,r3
 8008150:	44c00115 	stw	r19,4(r8)
 8008154:	41000015 	stw	r4,0(r8)
 8008158:	d8c11c15 	stw	r3,1136(sp)
 800815c:	d9411b15 	stw	r5,1132(sp)
 8008160:	008001c4 	movi	r2,7
 8008164:	11425116 	blt	r2,r5,8008aac <___vfiprintf_internal_r+0xf6c>
 8008168:	d9011d87 	ldb	r4,1142(sp)
 800816c:	42000204 	addi	r8,r8,8
 8008170:	28800044 	addi	r2,r5,1
 8008174:	20014a1e 	bne	r4,zero,80086a0 <___vfiprintf_internal_r+0xb60>
 8008178:	50000c26 	beq	r10,zero,80081ac <___vfiprintf_internal_r+0x66c>
 800817c:	d9011d04 	addi	r4,sp,1140
 8008180:	18c00084 	addi	r3,r3,2
 8008184:	41000015 	stw	r4,0(r8)
 8008188:	01000084 	movi	r4,2
 800818c:	41000115 	stw	r4,4(r8)
 8008190:	d8c11c15 	stw	r3,1136(sp)
 8008194:	d8811b15 	stw	r2,1132(sp)
 8008198:	010001c4 	movi	r4,7
 800819c:	20822016 	blt	r4,r2,8008a20 <___vfiprintf_internal_r+0xee0>
 80081a0:	100b883a 	mov	r5,r2
 80081a4:	42000204 	addi	r8,r8,8
 80081a8:	10800044 	addi	r2,r2,1
 80081ac:	01002004 	movi	r4,128
 80081b0:	b101de26 	beq	r22,r4,800892c <___vfiprintf_internal_r+0xdec>
 80081b4:	8521c83a 	sub	r16,r16,r20
 80081b8:	0400230e 	bge	zero,r16,8008248 <___vfiprintf_internal_r+0x708>
 80081bc:	04c00404 	movi	r19,16
 80081c0:	9c030d0e 	bge	r19,r16,8008df8 <___vfiprintf_internal_r+0x12b8>
 80081c4:	00820074 	movhi	r2,2049
 80081c8:	10bdff04 	addi	r2,r2,-2052
 80081cc:	d8812615 	stw	r2,1176(sp)
 80081d0:	058001c4 	movi	r22,7
 80081d4:	00000506 	br	80081ec <___vfiprintf_internal_r+0x6ac>
 80081d8:	28800084 	addi	r2,r5,2
 80081dc:	42000204 	addi	r8,r8,8
 80081e0:	200b883a 	mov	r5,r4
 80081e4:	843ffc04 	addi	r16,r16,-16
 80081e8:	9c000d0e 	bge	r19,r16,8008220 <___vfiprintf_internal_r+0x6e0>
 80081ec:	18c00404 	addi	r3,r3,16
 80081f0:	29000044 	addi	r4,r5,1
 80081f4:	44400015 	stw	r17,0(r8)
 80081f8:	44c00115 	stw	r19,4(r8)
 80081fc:	d8c11c15 	stw	r3,1136(sp)
 8008200:	d9011b15 	stw	r4,1132(sp)
 8008204:	b13ff40e 	bge	r22,r4,80081d8 <__alt_data_end+0xfc0081d8>
 8008208:	1801321e 	bne	r3,zero,80086d4 <___vfiprintf_internal_r+0xb94>
 800820c:	843ffc04 	addi	r16,r16,-16
 8008210:	000b883a 	mov	r5,zero
 8008214:	00800044 	movi	r2,1
 8008218:	d811883a 	mov	r8,sp
 800821c:	9c3ff316 	blt	r19,r16,80081ec <__alt_data_end+0xfc0081ec>
 8008220:	d9012617 	ldw	r4,1176(sp)
 8008224:	1c07883a 	add	r3,r3,r16
 8008228:	44000115 	stw	r16,4(r8)
 800822c:	41000015 	stw	r4,0(r8)
 8008230:	d8c11c15 	stw	r3,1136(sp)
 8008234:	d8811b15 	stw	r2,1132(sp)
 8008238:	010001c4 	movi	r4,7
 800823c:	20816216 	blt	r4,r2,80087c8 <___vfiprintf_internal_r+0xc88>
 8008240:	42000204 	addi	r8,r8,8
 8008244:	10800044 	addi	r2,r2,1
 8008248:	d9012217 	ldw	r4,1160(sp)
 800824c:	1d07883a 	add	r3,r3,r20
 8008250:	45000115 	stw	r20,4(r8)
 8008254:	41000015 	stw	r4,0(r8)
 8008258:	d8c11c15 	stw	r3,1136(sp)
 800825c:	d8811b15 	stw	r2,1132(sp)
 8008260:	010001c4 	movi	r4,7
 8008264:	2081610e 	bge	r4,r2,80087ec <___vfiprintf_internal_r+0xcac>
 8008268:	1802211e 	bne	r3,zero,8008af0 <___vfiprintf_internal_r+0xfb0>
 800826c:	d8011b15 	stw	zero,1132(sp)
 8008270:	9480010c 	andi	r18,r18,4
 8008274:	9002171e 	bne	r18,zero,8008ad4 <___vfiprintf_internal_r+0xf94>
 8008278:	d9412417 	ldw	r5,1168(sp)
 800827c:	a9433716 	blt	r21,r5,8008f5c <___vfiprintf_internal_r+0x141c>
 8008280:	d8812517 	ldw	r2,1172(sp)
 8008284:	1545883a 	add	r2,r2,r21
 8008288:	d8812515 	stw	r2,1172(sp)
 800828c:	00019a06 	br	80088f8 <___vfiprintf_internal_r+0xdb8>
 8008290:	d8c12317 	ldw	r3,1164(sp)
 8008294:	05400044 	movi	r21,1
 8008298:	9811883a 	mov	r8,r19
 800829c:	18800017 	ldw	r2,0(r3)
 80082a0:	18c00104 	addi	r3,r3,4
 80082a4:	d8c12315 	stw	r3,1164(sp)
 80082a8:	d8c10004 	addi	r3,sp,1024
 80082ac:	d8011d85 	stb	zero,1142(sp)
 80082b0:	d8810005 	stb	r2,1024(sp)
 80082b4:	a829883a 	mov	r20,r21
 80082b8:	d8c12215 	stw	r3,1160(sp)
 80082bc:	0021883a 	mov	r16,zero
 80082c0:	003f7806 	br	80080a4 <__alt_data_end+0xfc0080a4>
 80082c4:	94800414 	ori	r18,r18,16
 80082c8:	9080080c 	andi	r2,r18,32
 80082cc:	9811883a 	mov	r8,r19
 80082d0:	10009026 	beq	r2,zero,8008514 <___vfiprintf_internal_r+0x9d4>
 80082d4:	d8812317 	ldw	r2,1164(sp)
 80082d8:	d8c12317 	ldw	r3,1164(sp)
 80082dc:	14c00017 	ldw	r19,0(r2)
 80082e0:	15400117 	ldw	r21,4(r2)
 80082e4:	18c00204 	addi	r3,r3,8
 80082e8:	d8c12315 	stw	r3,1164(sp)
 80082ec:	0005883a 	mov	r2,zero
 80082f0:	9d46b03a 	or	r3,r19,r21
 80082f4:	d8011d85 	stb	zero,1142(sp)
 80082f8:	8029883a 	mov	r20,r16
 80082fc:	002d883a 	mov	r22,zero
 8008300:	003f4606 	br	800801c <__alt_data_end+0xfc00801c>
 8008304:	94800414 	ori	r18,r18,16
 8008308:	9080080c 	andi	r2,r18,32
 800830c:	9811883a 	mov	r8,r19
 8008310:	10006226 	beq	r2,zero,800849c <___vfiprintf_internal_r+0x95c>
 8008314:	d9012317 	ldw	r4,1164(sp)
 8008318:	00800044 	movi	r2,1
 800831c:	24c00017 	ldw	r19,0(r4)
 8008320:	25400117 	ldw	r21,4(r4)
 8008324:	21000204 	addi	r4,r4,8
 8008328:	d9012315 	stw	r4,1164(sp)
 800832c:	9d46b03a 	or	r3,r19,r21
 8008330:	003ff006 	br	80082f4 <__alt_data_end+0xfc0082f4>
 8008334:	b9800007 	ldb	r6,0(r23)
 8008338:	00801b04 	movi	r2,108
 800833c:	3082b226 	beq	r6,r2,8008e08 <___vfiprintf_internal_r+0x12c8>
 8008340:	94800414 	ori	r18,r18,16
 8008344:	003e5f06 	br	8007cc4 <__alt_data_end+0xfc007cc4>
 8008348:	d8c12203 	ldbu	r3,1160(sp)
 800834c:	01020074 	movhi	r4,2049
 8008350:	213d9904 	addi	r4,r4,-2460
 8008354:	d8c11d85 	stb	r3,1142(sp)
 8008358:	d9012715 	stw	r4,1180(sp)
 800835c:	90c0080c 	andi	r3,r18,32
 8008360:	9811883a 	mov	r8,r19
 8008364:	d8812317 	ldw	r2,1164(sp)
 8008368:	18005f26 	beq	r3,zero,80084e8 <___vfiprintf_internal_r+0x9a8>
 800836c:	d9012317 	ldw	r4,1164(sp)
 8008370:	14c00017 	ldw	r19,0(r2)
 8008374:	15400117 	ldw	r21,4(r2)
 8008378:	21000204 	addi	r4,r4,8
 800837c:	d9012315 	stw	r4,1164(sp)
 8008380:	9080004c 	andi	r2,r18,1
 8008384:	1001e226 	beq	r2,zero,8008b10 <___vfiprintf_internal_r+0xfd0>
 8008388:	9d46b03a 	or	r3,r19,r21
 800838c:	18024e26 	beq	r3,zero,8008cc8 <___vfiprintf_internal_r+0x1188>
 8008390:	00800c04 	movi	r2,48
 8008394:	d8811d05 	stb	r2,1140(sp)
 8008398:	d9811d45 	stb	r6,1141(sp)
 800839c:	94800094 	ori	r18,r18,2
 80083a0:	00800084 	movi	r2,2
 80083a4:	003fd306 	br	80082f4 <__alt_data_end+0xfc0082f4>
 80083a8:	d9012317 	ldw	r4,1164(sp)
 80083ac:	d9412317 	ldw	r5,1164(sp)
 80083b0:	21000017 	ldw	r4,0(r4)
 80083b4:	28800104 	addi	r2,r5,4
 80083b8:	d9012415 	stw	r4,1168(sp)
 80083bc:	203eeb16 	blt	r4,zero,8007f6c <__alt_data_end+0xfc007f6c>
 80083c0:	d8812315 	stw	r2,1164(sp)
 80083c4:	b9800007 	ldb	r6,0(r23)
 80083c8:	003e3e06 	br	8007cc4 <__alt_data_end+0xfc007cc4>
 80083cc:	b9800007 	ldb	r6,0(r23)
 80083d0:	01000a84 	movi	r4,42
 80083d4:	b8800044 	addi	r2,r23,1
 80083d8:	3102d226 	beq	r6,r4,8008f24 <___vfiprintf_internal_r+0x13e4>
 80083dc:	35bff404 	addi	r22,r6,-48
 80083e0:	102f883a 	mov	r23,r2
 80083e4:	0021883a 	mov	r16,zero
 80083e8:	adbe3736 	bltu	r21,r22,8007cc8 <__alt_data_end+0xfc007cc8>
 80083ec:	0009883a 	mov	r4,zero
 80083f0:	01400284 	movi	r5,10
 80083f4:	800a65c0 	call	800a65c <__mulsi3>
 80083f8:	b9800007 	ldb	r6,0(r23)
 80083fc:	b089883a 	add	r4,r22,r2
 8008400:	bdc00044 	addi	r23,r23,1
 8008404:	35bff404 	addi	r22,r6,-48
 8008408:	adbff92e 	bgeu	r21,r22,80083f0 <__alt_data_end+0xfc0083f0>
 800840c:	2021883a 	mov	r16,r4
 8008410:	203e2d0e 	bge	r4,zero,8007cc8 <__alt_data_end+0xfc007cc8>
 8008414:	043fffc4 	movi	r16,-1
 8008418:	003e2b06 	br	8007cc8 <__alt_data_end+0xfc007cc8>
 800841c:	94801014 	ori	r18,r18,64
 8008420:	b9800007 	ldb	r6,0(r23)
 8008424:	003e2706 	br	8007cc4 <__alt_data_end+0xfc007cc4>
 8008428:	94800814 	ori	r18,r18,32
 800842c:	b9800007 	ldb	r6,0(r23)
 8008430:	003e2406 	br	8007cc4 <__alt_data_end+0xfc007cc4>
 8008434:	d9412317 	ldw	r5,1164(sp)
 8008438:	d8812317 	ldw	r2,1164(sp)
 800843c:	d8011d85 	stb	zero,1142(sp)
 8008440:	29400017 	ldw	r5,0(r5)
 8008444:	9811883a 	mov	r8,r19
 8008448:	14c00104 	addi	r19,r2,4
 800844c:	d9412215 	stw	r5,1160(sp)
 8008450:	28029026 	beq	r5,zero,8008e94 <___vfiprintf_internal_r+0x1354>
 8008454:	d9012217 	ldw	r4,1160(sp)
 8008458:	80027616 	blt	r16,zero,8008e34 <___vfiprintf_internal_r+0x12f4>
 800845c:	000b883a 	mov	r5,zero
 8008460:	800d883a 	mov	r6,r16
 8008464:	da012a15 	stw	r8,1192(sp)
 8008468:	8005cfc0 	call	8005cfc <memchr>
 800846c:	da012a17 	ldw	r8,1192(sp)
 8008470:	1002a026 	beq	r2,zero,8008ef4 <___vfiprintf_internal_r+0x13b4>
 8008474:	d8c12217 	ldw	r3,1160(sp)
 8008478:	10e9c83a 	sub	r20,r2,r3
 800847c:	85023816 	blt	r16,r20,8008d60 <___vfiprintf_internal_r+0x1220>
 8008480:	dd811d83 	ldbu	r22,1142(sp)
 8008484:	dcc12315 	stw	r19,1164(sp)
 8008488:	0021883a 	mov	r16,zero
 800848c:	003efd06 	br	8008084 <__alt_data_end+0xfc008084>
 8008490:	9080080c 	andi	r2,r18,32
 8008494:	9811883a 	mov	r8,r19
 8008498:	103f9e1e 	bne	r2,zero,8008314 <__alt_data_end+0xfc008314>
 800849c:	9080040c 	andi	r2,r18,16
 80084a0:	10021726 	beq	r2,zero,8008d00 <___vfiprintf_internal_r+0x11c0>
 80084a4:	d9412317 	ldw	r5,1164(sp)
 80084a8:	002b883a 	mov	r21,zero
 80084ac:	00800044 	movi	r2,1
 80084b0:	2cc00017 	ldw	r19,0(r5)
 80084b4:	29400104 	addi	r5,r5,4
 80084b8:	d9412315 	stw	r5,1164(sp)
 80084bc:	9807883a 	mov	r3,r19
 80084c0:	003f8c06 	br	80082f4 <__alt_data_end+0xfc0082f4>
 80084c4:	d8c12203 	ldbu	r3,1160(sp)
 80084c8:	01020074 	movhi	r4,2049
 80084cc:	213d9e04 	addi	r4,r4,-2440
 80084d0:	d8c11d85 	stb	r3,1142(sp)
 80084d4:	d9012715 	stw	r4,1180(sp)
 80084d8:	90c0080c 	andi	r3,r18,32
 80084dc:	9811883a 	mov	r8,r19
 80084e0:	d8812317 	ldw	r2,1164(sp)
 80084e4:	183fa11e 	bne	r3,zero,800836c <__alt_data_end+0xfc00836c>
 80084e8:	90c0040c 	andi	r3,r18,16
 80084ec:	1801e526 	beq	r3,zero,8008c84 <___vfiprintf_internal_r+0x1144>
 80084f0:	d9412317 	ldw	r5,1164(sp)
 80084f4:	14c00017 	ldw	r19,0(r2)
 80084f8:	002b883a 	mov	r21,zero
 80084fc:	29400104 	addi	r5,r5,4
 8008500:	d9412315 	stw	r5,1164(sp)
 8008504:	003f9e06 	br	8008380 <__alt_data_end+0xfc008380>
 8008508:	9080080c 	andi	r2,r18,32
 800850c:	9811883a 	mov	r8,r19
 8008510:	103f701e 	bne	r2,zero,80082d4 <__alt_data_end+0xfc0082d4>
 8008514:	9080040c 	andi	r2,r18,16
 8008518:	1001ef26 	beq	r2,zero,8008cd8 <___vfiprintf_internal_r+0x1198>
 800851c:	d9012317 	ldw	r4,1164(sp)
 8008520:	002b883a 	mov	r21,zero
 8008524:	0005883a 	mov	r2,zero
 8008528:	24c00017 	ldw	r19,0(r4)
 800852c:	21000104 	addi	r4,r4,4
 8008530:	d9012315 	stw	r4,1164(sp)
 8008534:	9807883a 	mov	r3,r19
 8008538:	003f6e06 	br	80082f4 <__alt_data_end+0xfc0082f4>
 800853c:	d8c12317 	ldw	r3,1164(sp)
 8008540:	9811883a 	mov	r8,r19
 8008544:	00800c04 	movi	r2,48
 8008548:	1cc00017 	ldw	r19,0(r3)
 800854c:	01020074 	movhi	r4,2049
 8008550:	18c00104 	addi	r3,r3,4
 8008554:	d8811d05 	stb	r2,1140(sp)
 8008558:	213d9e04 	addi	r4,r4,-2440
 800855c:	00801e04 	movi	r2,120
 8008560:	d8811d45 	stb	r2,1141(sp)
 8008564:	d8c12315 	stw	r3,1164(sp)
 8008568:	002b883a 	mov	r21,zero
 800856c:	94800094 	ori	r18,r18,2
 8008570:	d9012715 	stw	r4,1180(sp)
 8008574:	00800084 	movi	r2,2
 8008578:	9807883a 	mov	r3,r19
 800857c:	003f5d06 	br	80082f4 <__alt_data_end+0xfc0082f4>
 8008580:	d8c12203 	ldbu	r3,1160(sp)
 8008584:	9080080c 	andi	r2,r18,32
 8008588:	9811883a 	mov	r8,r19
 800858c:	d8c11d85 	stb	r3,1142(sp)
 8008590:	1001b126 	beq	r2,zero,8008c58 <___vfiprintf_internal_r+0x1118>
 8008594:	d9012317 	ldw	r4,1164(sp)
 8008598:	d9412517 	ldw	r5,1172(sp)
 800859c:	20800017 	ldw	r2,0(r4)
 80085a0:	2807d7fa 	srai	r3,r5,31
 80085a4:	21000104 	addi	r4,r4,4
 80085a8:	d9012315 	stw	r4,1164(sp)
 80085ac:	11400015 	stw	r5,0(r2)
 80085b0:	10c00115 	stw	r3,4(r2)
 80085b4:	003d9a06 	br	8007c20 <__alt_data_end+0xfc007c20>
 80085b8:	d8812207 	ldb	r2,1160(sp)
 80085bc:	1001c41e 	bne	r2,zero,8008cd0 <___vfiprintf_internal_r+0x1190>
 80085c0:	00c00804 	movi	r3,32
 80085c4:	d8c12205 	stb	r3,1160(sp)
 80085c8:	b9800007 	ldb	r6,0(r23)
 80085cc:	003dbd06 	br	8007cc4 <__alt_data_end+0xfc007cc4>
 80085d0:	00c00ac4 	movi	r3,43
 80085d4:	d8c12205 	stb	r3,1160(sp)
 80085d8:	b9800007 	ldb	r6,0(r23)
 80085dc:	003db906 	br	8007cc4 <__alt_data_end+0xfc007cc4>
 80085e0:	d8c12203 	ldbu	r3,1160(sp)
 80085e4:	9080080c 	andi	r2,r18,32
 80085e8:	9811883a 	mov	r8,r19
 80085ec:	d8c11d85 	stb	r3,1142(sp)
 80085f0:	d8c12317 	ldw	r3,1164(sp)
 80085f4:	103e7e1e 	bne	r2,zero,8007ff0 <__alt_data_end+0xfc007ff0>
 80085f8:	9080040c 	andi	r2,r18,16
 80085fc:	1001a926 	beq	r2,zero,8008ca4 <___vfiprintf_internal_r+0x1164>
 8008600:	1cc00017 	ldw	r19,0(r3)
 8008604:	d9412317 	ldw	r5,1164(sp)
 8008608:	982bd7fa 	srai	r21,r19,31
 800860c:	29400104 	addi	r5,r5,4
 8008610:	d9412315 	stw	r5,1164(sp)
 8008614:	a805883a 	mov	r2,r21
 8008618:	003e7b06 	br	8008008 <__alt_data_end+0xfc008008>
 800861c:	94800054 	ori	r18,r18,1
 8008620:	b9800007 	ldb	r6,0(r23)
 8008624:	003da706 	br	8007cc4 <__alt_data_end+0xfc007cc4>
 8008628:	d8c12203 	ldbu	r3,1160(sp)
 800862c:	9811883a 	mov	r8,r19
 8008630:	d8c11d85 	stb	r3,1142(sp)
 8008634:	30005826 	beq	r6,zero,8008798 <___vfiprintf_internal_r+0xc58>
 8008638:	05400044 	movi	r21,1
 800863c:	d8c10004 	addi	r3,sp,1024
 8008640:	d9810005 	stb	r6,1024(sp)
 8008644:	d8011d85 	stb	zero,1142(sp)
 8008648:	a829883a 	mov	r20,r21
 800864c:	d8c12215 	stw	r3,1160(sp)
 8008650:	003f1a06 	br	80082bc <__alt_data_end+0xfc0082bc>
 8008654:	d9012117 	ldw	r4,1156(sp)
 8008658:	d9412017 	ldw	r5,1152(sp)
 800865c:	d9811a04 	addi	r6,sp,1128
 8008660:	d9c12a15 	stw	r7,1192(sp)
 8008664:	db012b15 	stw	r12,1196(sp)
 8008668:	8007a2c0 	call	8007a2c <__sprint_r.part.0>
 800866c:	d9c12a17 	ldw	r7,1192(sp)
 8008670:	db012b17 	ldw	r12,1196(sp)
 8008674:	10004e1e 	bne	r2,zero,80087b0 <___vfiprintf_internal_r+0xc70>
 8008678:	d9011b17 	ldw	r4,1132(sp)
 800867c:	d8c11c17 	ldw	r3,1136(sp)
 8008680:	d811883a 	mov	r8,sp
 8008684:	21400044 	addi	r5,r4,1
 8008688:	003e9d06 	br	8008100 <__alt_data_end+0xfc008100>
 800868c:	d9411b17 	ldw	r5,1132(sp)
 8008690:	d8c11c17 	ldw	r3,1136(sp)
 8008694:	28800044 	addi	r2,r5,1
 8008698:	d9011d87 	ldb	r4,1142(sp)
 800869c:	203eb626 	beq	r4,zero,8008178 <__alt_data_end+0xfc008178>
 80086a0:	01000044 	movi	r4,1
 80086a4:	d9411d84 	addi	r5,sp,1142
 80086a8:	1907883a 	add	r3,r3,r4
 80086ac:	41400015 	stw	r5,0(r8)
 80086b0:	41000115 	stw	r4,4(r8)
 80086b4:	d8c11c15 	stw	r3,1136(sp)
 80086b8:	d8811b15 	stw	r2,1132(sp)
 80086bc:	014001c4 	movi	r5,7
 80086c0:	2880ce16 	blt	r5,r2,80089fc <___vfiprintf_internal_r+0xebc>
 80086c4:	100b883a 	mov	r5,r2
 80086c8:	42000204 	addi	r8,r8,8
 80086cc:	10800044 	addi	r2,r2,1
 80086d0:	003ea906 	br	8008178 <__alt_data_end+0xfc008178>
 80086d4:	d9012117 	ldw	r4,1156(sp)
 80086d8:	d9412017 	ldw	r5,1152(sp)
 80086dc:	d9811a04 	addi	r6,sp,1128
 80086e0:	8007a2c0 	call	8007a2c <__sprint_r.part.0>
 80086e4:	1000321e 	bne	r2,zero,80087b0 <___vfiprintf_internal_r+0xc70>
 80086e8:	d9411b17 	ldw	r5,1132(sp)
 80086ec:	d8c11c17 	ldw	r3,1136(sp)
 80086f0:	d811883a 	mov	r8,sp
 80086f4:	28800044 	addi	r2,r5,1
 80086f8:	003eba06 	br	80081e4 <__alt_data_end+0xfc0081e4>
 80086fc:	10803fcc 	andi	r2,r2,255
 8008700:	00c00044 	movi	r3,1
 8008704:	10fe4d1e 	bne	r2,r3,800803c <__alt_data_end+0xfc00803c>
 8008708:	a800021e 	bne	r21,zero,8008714 <___vfiprintf_internal_r+0xbd4>
 800870c:	00800244 	movi	r2,9
 8008710:	14c01b2e 	bgeu	r2,r19,8008780 <___vfiprintf_internal_r+0xc40>
 8008714:	dc012215 	stw	r16,1160(sp)
 8008718:	dd010a04 	addi	r20,sp,1064
 800871c:	a821883a 	mov	r16,r21
 8008720:	402b883a 	mov	r21,r8
 8008724:	9809883a 	mov	r4,r19
 8008728:	800b883a 	mov	r5,r16
 800872c:	01800284 	movi	r6,10
 8008730:	000f883a 	mov	r7,zero
 8008734:	8009f140 	call	8009f14 <__umoddi3>
 8008738:	10800c04 	addi	r2,r2,48
 800873c:	a53fffc4 	addi	r20,r20,-1
 8008740:	9809883a 	mov	r4,r19
 8008744:	800b883a 	mov	r5,r16
 8008748:	01800284 	movi	r6,10
 800874c:	000f883a 	mov	r7,zero
 8008750:	a0800005 	stb	r2,0(r20)
 8008754:	80098d40 	call	80098d4 <__udivdi3>
 8008758:	1027883a 	mov	r19,r2
 800875c:	10c4b03a 	or	r2,r2,r3
 8008760:	1821883a 	mov	r16,r3
 8008764:	103fef1e 	bne	r2,zero,8008724 <__alt_data_end+0xfc008724>
 8008768:	d9011e17 	ldw	r4,1144(sp)
 800876c:	dc012217 	ldw	r16,1160(sp)
 8008770:	a811883a 	mov	r8,r21
 8008774:	dd012215 	stw	r20,1160(sp)
 8008778:	2529c83a 	sub	r20,r4,r20
 800877c:	003e4106 	br	8008084 <__alt_data_end+0xfc008084>
 8008780:	9cc00c04 	addi	r19,r19,48
 8008784:	d8c109c4 	addi	r3,sp,1063
 8008788:	dcc109c5 	stb	r19,1063(sp)
 800878c:	dd012817 	ldw	r20,1184(sp)
 8008790:	d8c12215 	stw	r3,1160(sp)
 8008794:	003e3b06 	br	8008084 <__alt_data_end+0xfc008084>
 8008798:	d8811c17 	ldw	r2,1136(sp)
 800879c:	10000426 	beq	r2,zero,80087b0 <___vfiprintf_internal_r+0xc70>
 80087a0:	d9012117 	ldw	r4,1156(sp)
 80087a4:	d9412017 	ldw	r5,1152(sp)
 80087a8:	d9811a04 	addi	r6,sp,1128
 80087ac:	8007a2c0 	call	8007a2c <__sprint_r.part.0>
 80087b0:	d9412017 	ldw	r5,1152(sp)
 80087b4:	2880030b 	ldhu	r2,12(r5)
 80087b8:	1080100c 	andi	r2,r2,64
 80087bc:	103ddc1e 	bne	r2,zero,8007f30 <__alt_data_end+0xfc007f30>
 80087c0:	d8812517 	ldw	r2,1172(sp)
 80087c4:	003ddb06 	br	8007f34 <__alt_data_end+0xfc007f34>
 80087c8:	1801061e 	bne	r3,zero,8008be4 <___vfiprintf_internal_r+0x10a4>
 80087cc:	d8c12217 	ldw	r3,1160(sp)
 80087d0:	00800044 	movi	r2,1
 80087d4:	dd000115 	stw	r20,4(sp)
 80087d8:	d8c00015 	stw	r3,0(sp)
 80087dc:	dd011c15 	stw	r20,1136(sp)
 80087e0:	d8811b15 	stw	r2,1132(sp)
 80087e4:	a007883a 	mov	r3,r20
 80087e8:	d811883a 	mov	r8,sp
 80087ec:	42000204 	addi	r8,r8,8
 80087f0:	9480010c 	andi	r18,r18,4
 80087f4:	90003426 	beq	r18,zero,80088c8 <___vfiprintf_internal_r+0xd88>
 80087f8:	d9412417 	ldw	r5,1168(sp)
 80087fc:	2d65c83a 	sub	r18,r5,r21
 8008800:	0480310e 	bge	zero,r18,80088c8 <___vfiprintf_internal_r+0xd88>
 8008804:	04000404 	movi	r16,16
 8008808:	8481ad0e 	bge	r16,r18,8008ec0 <___vfiprintf_internal_r+0x1380>
 800880c:	01420074 	movhi	r5,2049
 8008810:	297e0304 	addi	r5,r5,-2036
 8008814:	d9011b17 	ldw	r4,1132(sp)
 8008818:	d9412615 	stw	r5,1176(sp)
 800881c:	04c001c4 	movi	r19,7
 8008820:	dd012117 	ldw	r20,1156(sp)
 8008824:	dd812017 	ldw	r22,1152(sp)
 8008828:	00000506 	br	8008840 <___vfiprintf_internal_r+0xd00>
 800882c:	21400084 	addi	r5,r4,2
 8008830:	42000204 	addi	r8,r8,8
 8008834:	1009883a 	mov	r4,r2
 8008838:	94bffc04 	addi	r18,r18,-16
 800883c:	84800d0e 	bge	r16,r18,8008874 <___vfiprintf_internal_r+0xd34>
 8008840:	18c00404 	addi	r3,r3,16
 8008844:	20800044 	addi	r2,r4,1
 8008848:	47000015 	stw	fp,0(r8)
 800884c:	44000115 	stw	r16,4(r8)
 8008850:	d8c11c15 	stw	r3,1136(sp)
 8008854:	d8811b15 	stw	r2,1132(sp)
 8008858:	98bff40e 	bge	r19,r2,800882c <__alt_data_end+0xfc00882c>
 800885c:	1800291e 	bne	r3,zero,8008904 <___vfiprintf_internal_r+0xdc4>
 8008860:	94bffc04 	addi	r18,r18,-16
 8008864:	0009883a 	mov	r4,zero
 8008868:	01400044 	movi	r5,1
 800886c:	d811883a 	mov	r8,sp
 8008870:	84bff316 	blt	r16,r18,8008840 <__alt_data_end+0xfc008840>
 8008874:	d8812617 	ldw	r2,1176(sp)
 8008878:	1c87883a 	add	r3,r3,r18
 800887c:	44800115 	stw	r18,4(r8)
 8008880:	40800015 	stw	r2,0(r8)
 8008884:	d8c11c15 	stw	r3,1136(sp)
 8008888:	d9411b15 	stw	r5,1132(sp)
 800888c:	008001c4 	movi	r2,7
 8008890:	11400d0e 	bge	r2,r5,80088c8 <___vfiprintf_internal_r+0xd88>
 8008894:	1800061e 	bne	r3,zero,80088b0 <___vfiprintf_internal_r+0xd70>
 8008898:	d8c12417 	ldw	r3,1168(sp)
 800889c:	a8c12e16 	blt	r21,r3,8008d58 <___vfiprintf_internal_r+0x1218>
 80088a0:	d9012517 	ldw	r4,1172(sp)
 80088a4:	2549883a 	add	r4,r4,r21
 80088a8:	d9012515 	stw	r4,1172(sp)
 80088ac:	00001206 	br	80088f8 <___vfiprintf_internal_r+0xdb8>
 80088b0:	d9012117 	ldw	r4,1156(sp)
 80088b4:	d9412017 	ldw	r5,1152(sp)
 80088b8:	d9811a04 	addi	r6,sp,1128
 80088bc:	8007a2c0 	call	8007a2c <__sprint_r.part.0>
 80088c0:	103fbb1e 	bne	r2,zero,80087b0 <__alt_data_end+0xfc0087b0>
 80088c4:	d8c11c17 	ldw	r3,1136(sp)
 80088c8:	d8812417 	ldw	r2,1168(sp)
 80088cc:	a880010e 	bge	r21,r2,80088d4 <___vfiprintf_internal_r+0xd94>
 80088d0:	102b883a 	mov	r21,r2
 80088d4:	d9012517 	ldw	r4,1172(sp)
 80088d8:	2549883a 	add	r4,r4,r21
 80088dc:	d9012515 	stw	r4,1172(sp)
 80088e0:	18000526 	beq	r3,zero,80088f8 <___vfiprintf_internal_r+0xdb8>
 80088e4:	d9012117 	ldw	r4,1156(sp)
 80088e8:	d9412017 	ldw	r5,1152(sp)
 80088ec:	d9811a04 	addi	r6,sp,1128
 80088f0:	8007a2c0 	call	8007a2c <__sprint_r.part.0>
 80088f4:	103fae1e 	bne	r2,zero,80087b0 <__alt_data_end+0xfc0087b0>
 80088f8:	d8011b15 	stw	zero,1132(sp)
 80088fc:	d811883a 	mov	r8,sp
 8008900:	003cc706 	br	8007c20 <__alt_data_end+0xfc007c20>
 8008904:	a009883a 	mov	r4,r20
 8008908:	b00b883a 	mov	r5,r22
 800890c:	d9811a04 	addi	r6,sp,1128
 8008910:	8007a2c0 	call	8007a2c <__sprint_r.part.0>
 8008914:	103fa61e 	bne	r2,zero,80087b0 <__alt_data_end+0xfc0087b0>
 8008918:	d9011b17 	ldw	r4,1132(sp)
 800891c:	d8c11c17 	ldw	r3,1136(sp)
 8008920:	d811883a 	mov	r8,sp
 8008924:	21400044 	addi	r5,r4,1
 8008928:	003fc306 	br	8008838 <__alt_data_end+0xfc008838>
 800892c:	d9012417 	ldw	r4,1168(sp)
 8008930:	256dc83a 	sub	r22,r4,r21
 8008934:	05be1f0e 	bge	zero,r22,80081b4 <__alt_data_end+0xfc0081b4>
 8008938:	04c00404 	movi	r19,16
 800893c:	9d81720e 	bge	r19,r22,8008f08 <___vfiprintf_internal_r+0x13c8>
 8008940:	00820074 	movhi	r2,2049
 8008944:	10bdff04 	addi	r2,r2,-2052
 8008948:	d8812615 	stw	r2,1176(sp)
 800894c:	028001c4 	movi	r10,7
 8008950:	00000506 	br	8008968 <___vfiprintf_internal_r+0xe28>
 8008954:	29000084 	addi	r4,r5,2
 8008958:	42000204 	addi	r8,r8,8
 800895c:	100b883a 	mov	r5,r2
 8008960:	b5bffc04 	addi	r22,r22,-16
 8008964:	9d800d0e 	bge	r19,r22,800899c <___vfiprintf_internal_r+0xe5c>
 8008968:	18c00404 	addi	r3,r3,16
 800896c:	28800044 	addi	r2,r5,1
 8008970:	44400015 	stw	r17,0(r8)
 8008974:	44c00115 	stw	r19,4(r8)
 8008978:	d8c11c15 	stw	r3,1136(sp)
 800897c:	d8811b15 	stw	r2,1132(sp)
 8008980:	50bff40e 	bge	r10,r2,8008954 <__alt_data_end+0xfc008954>
 8008984:	1800111e 	bne	r3,zero,80089cc <___vfiprintf_internal_r+0xe8c>
 8008988:	b5bffc04 	addi	r22,r22,-16
 800898c:	000b883a 	mov	r5,zero
 8008990:	01000044 	movi	r4,1
 8008994:	d811883a 	mov	r8,sp
 8008998:	9dbff316 	blt	r19,r22,8008968 <__alt_data_end+0xfc008968>
 800899c:	d9412617 	ldw	r5,1176(sp)
 80089a0:	1d87883a 	add	r3,r3,r22
 80089a4:	45800115 	stw	r22,4(r8)
 80089a8:	41400015 	stw	r5,0(r8)
 80089ac:	d8c11c15 	stw	r3,1136(sp)
 80089b0:	d9011b15 	stw	r4,1132(sp)
 80089b4:	008001c4 	movi	r2,7
 80089b8:	11008516 	blt	r2,r4,8008bd0 <___vfiprintf_internal_r+0x1090>
 80089bc:	42000204 	addi	r8,r8,8
 80089c0:	20800044 	addi	r2,r4,1
 80089c4:	200b883a 	mov	r5,r4
 80089c8:	003dfa06 	br	80081b4 <__alt_data_end+0xfc0081b4>
 80089cc:	d9012117 	ldw	r4,1156(sp)
 80089d0:	d9412017 	ldw	r5,1152(sp)
 80089d4:	d9811a04 	addi	r6,sp,1128
 80089d8:	da812a15 	stw	r10,1192(sp)
 80089dc:	8007a2c0 	call	8007a2c <__sprint_r.part.0>
 80089e0:	da812a17 	ldw	r10,1192(sp)
 80089e4:	103f721e 	bne	r2,zero,80087b0 <__alt_data_end+0xfc0087b0>
 80089e8:	d9411b17 	ldw	r5,1132(sp)
 80089ec:	d8c11c17 	ldw	r3,1136(sp)
 80089f0:	d811883a 	mov	r8,sp
 80089f4:	29000044 	addi	r4,r5,1
 80089f8:	003fd906 	br	8008960 <__alt_data_end+0xfc008960>
 80089fc:	1800681e 	bne	r3,zero,8008ba0 <___vfiprintf_internal_r+0x1060>
 8008a00:	50004d26 	beq	r10,zero,8008b38 <___vfiprintf_internal_r+0xff8>
 8008a04:	d8811d04 	addi	r2,sp,1140
 8008a08:	00c00084 	movi	r3,2
 8008a0c:	d8800015 	stw	r2,0(sp)
 8008a10:	d8c00115 	stw	r3,4(sp)
 8008a14:	2005883a 	mov	r2,r4
 8008a18:	d811883a 	mov	r8,sp
 8008a1c:	003de006 	br	80081a0 <__alt_data_end+0xfc0081a0>
 8008a20:	1800551e 	bne	r3,zero,8008b78 <___vfiprintf_internal_r+0x1038>
 8008a24:	000b883a 	mov	r5,zero
 8008a28:	00800044 	movi	r2,1
 8008a2c:	d811883a 	mov	r8,sp
 8008a30:	003dde06 	br	80081ac <__alt_data_end+0xfc0081ac>
 8008a34:	10803fcc 	andi	r2,r2,255
 8008a38:	1000191e 	bne	r2,zero,8008aa0 <___vfiprintf_internal_r+0xf60>
 8008a3c:	9080004c 	andi	r2,r18,1
 8008a40:	10001726 	beq	r2,zero,8008aa0 <___vfiprintf_internal_r+0xf60>
 8008a44:	00800c04 	movi	r2,48
 8008a48:	d8c109c4 	addi	r3,sp,1063
 8008a4c:	d88109c5 	stb	r2,1063(sp)
 8008a50:	dd012817 	ldw	r20,1184(sp)
 8008a54:	d8c12215 	stw	r3,1160(sp)
 8008a58:	003d8a06 	br	8008084 <__alt_data_end+0xfc008084>
 8008a5c:	d9012717 	ldw	r4,1180(sp)
 8008a60:	dd010a04 	addi	r20,sp,1064
 8008a64:	988003cc 	andi	r2,r19,15
 8008a68:	a806973a 	slli	r3,r21,28
 8008a6c:	2085883a 	add	r2,r4,r2
 8008a70:	9826d13a 	srli	r19,r19,4
 8008a74:	10800003 	ldbu	r2,0(r2)
 8008a78:	a82ad13a 	srli	r21,r21,4
 8008a7c:	a53fffc4 	addi	r20,r20,-1
 8008a80:	1ce6b03a 	or	r19,r3,r19
 8008a84:	a0800005 	stb	r2,0(r20)
 8008a88:	9d44b03a 	or	r2,r19,r21
 8008a8c:	103ff51e 	bne	r2,zero,8008a64 <__alt_data_end+0xfc008a64>
 8008a90:	d9411e17 	ldw	r5,1144(sp)
 8008a94:	dd012215 	stw	r20,1160(sp)
 8008a98:	2d29c83a 	sub	r20,r5,r20
 8008a9c:	003d7906 	br	8008084 <__alt_data_end+0xfc008084>
 8008aa0:	d8c10a04 	addi	r3,sp,1064
 8008aa4:	d8c12215 	stw	r3,1160(sp)
 8008aa8:	003d7606 	br	8008084 <__alt_data_end+0xfc008084>
 8008aac:	18009e1e 	bne	r3,zero,8008d28 <___vfiprintf_internal_r+0x11e8>
 8008ab0:	d8811d87 	ldb	r2,1142(sp)
 8008ab4:	10005f26 	beq	r2,zero,8008c34 <___vfiprintf_internal_r+0x10f4>
 8008ab8:	00c00044 	movi	r3,1
 8008abc:	d9011d84 	addi	r4,sp,1142
 8008ac0:	1805883a 	mov	r2,r3
 8008ac4:	d9000015 	stw	r4,0(sp)
 8008ac8:	d8c00115 	stw	r3,4(sp)
 8008acc:	d811883a 	mov	r8,sp
 8008ad0:	003efc06 	br	80086c4 <__alt_data_end+0xfc0086c4>
 8008ad4:	d9412417 	ldw	r5,1168(sp)
 8008ad8:	d811883a 	mov	r8,sp
 8008adc:	2d65c83a 	sub	r18,r5,r21
 8008ae0:	04bf4816 	blt	zero,r18,8008804 <__alt_data_end+0xfc008804>
 8008ae4:	003f6c06 	br	8008898 <__alt_data_end+0xfc008898>
 8008ae8:	b829883a 	mov	r20,r23
 8008aec:	003c6906 	br	8007c94 <__alt_data_end+0xfc007c94>
 8008af0:	d9012117 	ldw	r4,1156(sp)
 8008af4:	d9412017 	ldw	r5,1152(sp)
 8008af8:	d9811a04 	addi	r6,sp,1128
 8008afc:	8007a2c0 	call	8007a2c <__sprint_r.part.0>
 8008b00:	103f2b1e 	bne	r2,zero,80087b0 <__alt_data_end+0xfc0087b0>
 8008b04:	d8c11c17 	ldw	r3,1136(sp)
 8008b08:	d811883a 	mov	r8,sp
 8008b0c:	003f3806 	br	80087f0 <__alt_data_end+0xfc0087f0>
 8008b10:	00800084 	movi	r2,2
 8008b14:	9d46b03a 	or	r3,r19,r21
 8008b18:	003df606 	br	80082f4 <__alt_data_end+0xfc0082f4>
 8008b1c:	d9012117 	ldw	r4,1156(sp)
 8008b20:	d9412017 	ldw	r5,1152(sp)
 8008b24:	d9811a04 	addi	r6,sp,1128
 8008b28:	8007a2c0 	call	8007a2c <__sprint_r.part.0>
 8008b2c:	103f201e 	bne	r2,zero,80087b0 <__alt_data_end+0xfc0087b0>
 8008b30:	d811883a 	mov	r8,sp
 8008b34:	003cc606 	br	8007e50 <__alt_data_end+0xfc007e50>
 8008b38:	000b883a 	mov	r5,zero
 8008b3c:	2005883a 	mov	r2,r4
 8008b40:	d811883a 	mov	r8,sp
 8008b44:	003d9906 	br	80081ac <__alt_data_end+0xfc0081ac>
 8008b48:	10803fcc 	andi	r2,r2,255
 8008b4c:	1080201c 	xori	r2,r2,128
 8008b50:	10bfe004 	addi	r2,r2,-128
 8008b54:	01000c04 	movi	r4,48
 8008b58:	1100b226 	beq	r2,r4,8008e24 <___vfiprintf_internal_r+0x12e4>
 8008b5c:	d9412217 	ldw	r5,1160(sp)
 8008b60:	d8811e17 	ldw	r2,1144(sp)
 8008b64:	193fffc5 	stb	r4,-1(r3)
 8008b68:	297fffc4 	addi	r5,r5,-1
 8008b6c:	d9412215 	stw	r5,1160(sp)
 8008b70:	1169c83a 	sub	r20,r2,r5
 8008b74:	003d4306 	br	8008084 <__alt_data_end+0xfc008084>
 8008b78:	d9012117 	ldw	r4,1156(sp)
 8008b7c:	d9412017 	ldw	r5,1152(sp)
 8008b80:	d9811a04 	addi	r6,sp,1128
 8008b84:	8007a2c0 	call	8007a2c <__sprint_r.part.0>
 8008b88:	103f091e 	bne	r2,zero,80087b0 <__alt_data_end+0xfc0087b0>
 8008b8c:	d9411b17 	ldw	r5,1132(sp)
 8008b90:	d8c11c17 	ldw	r3,1136(sp)
 8008b94:	d811883a 	mov	r8,sp
 8008b98:	28800044 	addi	r2,r5,1
 8008b9c:	003d8306 	br	80081ac <__alt_data_end+0xfc0081ac>
 8008ba0:	d9012117 	ldw	r4,1156(sp)
 8008ba4:	d9412017 	ldw	r5,1152(sp)
 8008ba8:	d9811a04 	addi	r6,sp,1128
 8008bac:	da812a15 	stw	r10,1192(sp)
 8008bb0:	8007a2c0 	call	8007a2c <__sprint_r.part.0>
 8008bb4:	da812a17 	ldw	r10,1192(sp)
 8008bb8:	103efd1e 	bne	r2,zero,80087b0 <__alt_data_end+0xfc0087b0>
 8008bbc:	d9411b17 	ldw	r5,1132(sp)
 8008bc0:	d8c11c17 	ldw	r3,1136(sp)
 8008bc4:	d811883a 	mov	r8,sp
 8008bc8:	28800044 	addi	r2,r5,1
 8008bcc:	003d6a06 	br	8008178 <__alt_data_end+0xfc008178>
 8008bd0:	1800a01e 	bne	r3,zero,8008e54 <___vfiprintf_internal_r+0x1314>
 8008bd4:	000b883a 	mov	r5,zero
 8008bd8:	00800044 	movi	r2,1
 8008bdc:	d811883a 	mov	r8,sp
 8008be0:	003d7406 	br	80081b4 <__alt_data_end+0xfc0081b4>
 8008be4:	d9012117 	ldw	r4,1156(sp)
 8008be8:	d9412017 	ldw	r5,1152(sp)
 8008bec:	d9811a04 	addi	r6,sp,1128
 8008bf0:	8007a2c0 	call	8007a2c <__sprint_r.part.0>
 8008bf4:	103eee1e 	bne	r2,zero,80087b0 <__alt_data_end+0xfc0087b0>
 8008bf8:	d8811b17 	ldw	r2,1132(sp)
 8008bfc:	d8c11c17 	ldw	r3,1136(sp)
 8008c00:	d811883a 	mov	r8,sp
 8008c04:	10800044 	addi	r2,r2,1
 8008c08:	003d8f06 	br	8008248 <__alt_data_end+0xfc008248>
 8008c0c:	04e7c83a 	sub	r19,zero,r19
 8008c10:	9804c03a 	cmpne	r2,r19,zero
 8008c14:	056bc83a 	sub	r21,zero,r21
 8008c18:	a8abc83a 	sub	r21,r21,r2
 8008c1c:	05800b44 	movi	r22,45
 8008c20:	dd811d85 	stb	r22,1142(sp)
 8008c24:	8029883a 	mov	r20,r16
 8008c28:	00800044 	movi	r2,1
 8008c2c:	9d46b03a 	or	r3,r19,r21
 8008c30:	003cfa06 	br	800801c <__alt_data_end+0xfc00801c>
 8008c34:	000b883a 	mov	r5,zero
 8008c38:	00800044 	movi	r2,1
 8008c3c:	d811883a 	mov	r8,sp
 8008c40:	503d5a26 	beq	r10,zero,80081ac <__alt_data_end+0xfc0081ac>
 8008c44:	00c00084 	movi	r3,2
 8008c48:	d9011d04 	addi	r4,sp,1140
 8008c4c:	d9000015 	stw	r4,0(sp)
 8008c50:	d8c00115 	stw	r3,4(sp)
 8008c54:	003d5206 	br	80081a0 <__alt_data_end+0xfc0081a0>
 8008c58:	9080040c 	andi	r2,r18,16
 8008c5c:	1000421e 	bne	r2,zero,8008d68 <___vfiprintf_internal_r+0x1228>
 8008c60:	9480100c 	andi	r18,r18,64
 8008c64:	90009c26 	beq	r18,zero,8008ed8 <___vfiprintf_internal_r+0x1398>
 8008c68:	d9412317 	ldw	r5,1164(sp)
 8008c6c:	d8c12517 	ldw	r3,1172(sp)
 8008c70:	28800017 	ldw	r2,0(r5)
 8008c74:	29400104 	addi	r5,r5,4
 8008c78:	d9412315 	stw	r5,1164(sp)
 8008c7c:	10c0000d 	sth	r3,0(r2)
 8008c80:	003be706 	br	8007c20 <__alt_data_end+0xfc007c20>
 8008c84:	90c0100c 	andi	r3,r18,64
 8008c88:	18003e26 	beq	r3,zero,8008d84 <___vfiprintf_internal_r+0x1244>
 8008c8c:	d8c12317 	ldw	r3,1164(sp)
 8008c90:	14c0000b 	ldhu	r19,0(r2)
 8008c94:	002b883a 	mov	r21,zero
 8008c98:	18c00104 	addi	r3,r3,4
 8008c9c:	d8c12315 	stw	r3,1164(sp)
 8008ca0:	003db706 	br	8008380 <__alt_data_end+0xfc008380>
 8008ca4:	9080100c 	andi	r2,r18,64
 8008ca8:	10004c26 	beq	r2,zero,8008ddc <___vfiprintf_internal_r+0x129c>
 8008cac:	1cc0000f 	ldh	r19,0(r3)
 8008cb0:	d8812317 	ldw	r2,1164(sp)
 8008cb4:	982bd7fa 	srai	r21,r19,31
 8008cb8:	10800104 	addi	r2,r2,4
 8008cbc:	d8812315 	stw	r2,1164(sp)
 8008cc0:	a805883a 	mov	r2,r21
 8008cc4:	003cd006 	br	8008008 <__alt_data_end+0xfc008008>
 8008cc8:	00800084 	movi	r2,2
 8008ccc:	003d8906 	br	80082f4 <__alt_data_end+0xfc0082f4>
 8008cd0:	b9800007 	ldb	r6,0(r23)
 8008cd4:	003bfb06 	br	8007cc4 <__alt_data_end+0xfc007cc4>
 8008cd8:	9080100c 	andi	r2,r18,64
 8008cdc:	10003726 	beq	r2,zero,8008dbc <___vfiprintf_internal_r+0x127c>
 8008ce0:	d9412317 	ldw	r5,1164(sp)
 8008ce4:	002b883a 	mov	r21,zero
 8008ce8:	0005883a 	mov	r2,zero
 8008cec:	2cc0000b 	ldhu	r19,0(r5)
 8008cf0:	29400104 	addi	r5,r5,4
 8008cf4:	d9412315 	stw	r5,1164(sp)
 8008cf8:	9807883a 	mov	r3,r19
 8008cfc:	003d7d06 	br	80082f4 <__alt_data_end+0xfc0082f4>
 8008d00:	9080100c 	andi	r2,r18,64
 8008d04:	10002526 	beq	r2,zero,8008d9c <___vfiprintf_internal_r+0x125c>
 8008d08:	d8812317 	ldw	r2,1164(sp)
 8008d0c:	002b883a 	mov	r21,zero
 8008d10:	14c0000b 	ldhu	r19,0(r2)
 8008d14:	10800104 	addi	r2,r2,4
 8008d18:	d8812315 	stw	r2,1164(sp)
 8008d1c:	9807883a 	mov	r3,r19
 8008d20:	00800044 	movi	r2,1
 8008d24:	003d7306 	br	80082f4 <__alt_data_end+0xfc0082f4>
 8008d28:	d9012117 	ldw	r4,1156(sp)
 8008d2c:	d9412017 	ldw	r5,1152(sp)
 8008d30:	d9811a04 	addi	r6,sp,1128
 8008d34:	da812a15 	stw	r10,1192(sp)
 8008d38:	8007a2c0 	call	8007a2c <__sprint_r.part.0>
 8008d3c:	da812a17 	ldw	r10,1192(sp)
 8008d40:	103e9b1e 	bne	r2,zero,80087b0 <__alt_data_end+0xfc0087b0>
 8008d44:	d9411b17 	ldw	r5,1132(sp)
 8008d48:	d8c11c17 	ldw	r3,1136(sp)
 8008d4c:	d811883a 	mov	r8,sp
 8008d50:	28800044 	addi	r2,r5,1
 8008d54:	003e5006 	br	8008698 <__alt_data_end+0xfc008698>
 8008d58:	182b883a 	mov	r21,r3
 8008d5c:	003ed006 	br	80088a0 <__alt_data_end+0xfc0088a0>
 8008d60:	8029883a 	mov	r20,r16
 8008d64:	003dc606 	br	8008480 <__alt_data_end+0xfc008480>
 8008d68:	d8c12317 	ldw	r3,1164(sp)
 8008d6c:	d9012517 	ldw	r4,1172(sp)
 8008d70:	18800017 	ldw	r2,0(r3)
 8008d74:	18c00104 	addi	r3,r3,4
 8008d78:	d8c12315 	stw	r3,1164(sp)
 8008d7c:	11000015 	stw	r4,0(r2)
 8008d80:	003ba706 	br	8007c20 <__alt_data_end+0xfc007c20>
 8008d84:	d9012317 	ldw	r4,1164(sp)
 8008d88:	14c00017 	ldw	r19,0(r2)
 8008d8c:	002b883a 	mov	r21,zero
 8008d90:	21000104 	addi	r4,r4,4
 8008d94:	d9012315 	stw	r4,1164(sp)
 8008d98:	003d7906 	br	8008380 <__alt_data_end+0xfc008380>
 8008d9c:	d8c12317 	ldw	r3,1164(sp)
 8008da0:	002b883a 	mov	r21,zero
 8008da4:	00800044 	movi	r2,1
 8008da8:	1cc00017 	ldw	r19,0(r3)
 8008dac:	18c00104 	addi	r3,r3,4
 8008db0:	d8c12315 	stw	r3,1164(sp)
 8008db4:	9807883a 	mov	r3,r19
 8008db8:	003d4e06 	br	80082f4 <__alt_data_end+0xfc0082f4>
 8008dbc:	d8812317 	ldw	r2,1164(sp)
 8008dc0:	002b883a 	mov	r21,zero
 8008dc4:	14c00017 	ldw	r19,0(r2)
 8008dc8:	10800104 	addi	r2,r2,4
 8008dcc:	d8812315 	stw	r2,1164(sp)
 8008dd0:	9807883a 	mov	r3,r19
 8008dd4:	0005883a 	mov	r2,zero
 8008dd8:	003d4606 	br	80082f4 <__alt_data_end+0xfc0082f4>
 8008ddc:	1cc00017 	ldw	r19,0(r3)
 8008de0:	d8c12317 	ldw	r3,1164(sp)
 8008de4:	982bd7fa 	srai	r21,r19,31
 8008de8:	18c00104 	addi	r3,r3,4
 8008dec:	d8c12315 	stw	r3,1164(sp)
 8008df0:	a805883a 	mov	r2,r21
 8008df4:	003c8406 	br	8008008 <__alt_data_end+0xfc008008>
 8008df8:	01020074 	movhi	r4,2049
 8008dfc:	213dff04 	addi	r4,r4,-2052
 8008e00:	d9012615 	stw	r4,1176(sp)
 8008e04:	003d0606 	br	8008220 <__alt_data_end+0xfc008220>
 8008e08:	b9800043 	ldbu	r6,1(r23)
 8008e0c:	94800814 	ori	r18,r18,32
 8008e10:	bdc00044 	addi	r23,r23,1
 8008e14:	31803fcc 	andi	r6,r6,255
 8008e18:	3180201c 	xori	r6,r6,128
 8008e1c:	31bfe004 	addi	r6,r6,-128
 8008e20:	003ba806 	br	8007cc4 <__alt_data_end+0xfc007cc4>
 8008e24:	d8811e17 	ldw	r2,1144(sp)
 8008e28:	d8c12217 	ldw	r3,1160(sp)
 8008e2c:	10e9c83a 	sub	r20,r2,r3
 8008e30:	003c9406 	br	8008084 <__alt_data_end+0xfc008084>
 8008e34:	da012a15 	stw	r8,1192(sp)
 8008e38:	80006500 	call	8000650 <strlen>
 8008e3c:	1029883a 	mov	r20,r2
 8008e40:	dd811d83 	ldbu	r22,1142(sp)
 8008e44:	dcc12315 	stw	r19,1164(sp)
 8008e48:	0021883a 	mov	r16,zero
 8008e4c:	da012a17 	ldw	r8,1192(sp)
 8008e50:	003c8c06 	br	8008084 <__alt_data_end+0xfc008084>
 8008e54:	d9012117 	ldw	r4,1156(sp)
 8008e58:	d9412017 	ldw	r5,1152(sp)
 8008e5c:	d9811a04 	addi	r6,sp,1128
 8008e60:	8007a2c0 	call	8007a2c <__sprint_r.part.0>
 8008e64:	103e521e 	bne	r2,zero,80087b0 <__alt_data_end+0xfc0087b0>
 8008e68:	d9411b17 	ldw	r5,1132(sp)
 8008e6c:	d8c11c17 	ldw	r3,1136(sp)
 8008e70:	d811883a 	mov	r8,sp
 8008e74:	28800044 	addi	r2,r5,1
 8008e78:	003cce06 	br	80081b4 <__alt_data_end+0xfc0081b4>
 8008e7c:	01420074 	movhi	r5,2049
 8008e80:	297e0304 	addi	r5,r5,-2036
 8008e84:	d9412615 	stw	r5,1176(sp)
 8008e88:	d9411b17 	ldw	r5,1132(sp)
 8008e8c:	29400044 	addi	r5,r5,1
 8008e90:	003cad06 	br	8008148 <__alt_data_end+0xfc008148>
 8008e94:	00800184 	movi	r2,6
 8008e98:	1400012e 	bgeu	r2,r16,8008ea0 <___vfiprintf_internal_r+0x1360>
 8008e9c:	1021883a 	mov	r16,r2
 8008ea0:	8029883a 	mov	r20,r16
 8008ea4:	802b883a 	mov	r21,r16
 8008ea8:	80001c16 	blt	r16,zero,8008f1c <___vfiprintf_internal_r+0x13dc>
 8008eac:	00c20074 	movhi	r3,2049
 8008eb0:	18fda304 	addi	r3,r3,-2420
 8008eb4:	dcc12315 	stw	r19,1164(sp)
 8008eb8:	d8c12215 	stw	r3,1160(sp)
 8008ebc:	003cff06 	br	80082bc <__alt_data_end+0xfc0082bc>
 8008ec0:	d9411b17 	ldw	r5,1132(sp)
 8008ec4:	00820074 	movhi	r2,2049
 8008ec8:	10be0304 	addi	r2,r2,-2036
 8008ecc:	d8812615 	stw	r2,1176(sp)
 8008ed0:	29400044 	addi	r5,r5,1
 8008ed4:	003e6706 	br	8008874 <__alt_data_end+0xfc008874>
 8008ed8:	d9012317 	ldw	r4,1164(sp)
 8008edc:	d9412517 	ldw	r5,1172(sp)
 8008ee0:	20800017 	ldw	r2,0(r4)
 8008ee4:	21000104 	addi	r4,r4,4
 8008ee8:	d9012315 	stw	r4,1164(sp)
 8008eec:	11400015 	stw	r5,0(r2)
 8008ef0:	003b4b06 	br	8007c20 <__alt_data_end+0xfc007c20>
 8008ef4:	8029883a 	mov	r20,r16
 8008ef8:	dd811d83 	ldbu	r22,1142(sp)
 8008efc:	dcc12315 	stw	r19,1164(sp)
 8008f00:	0021883a 	mov	r16,zero
 8008f04:	003c5f06 	br	8008084 <__alt_data_end+0xfc008084>
 8008f08:	01020074 	movhi	r4,2049
 8008f0c:	213dff04 	addi	r4,r4,-2052
 8008f10:	d9012615 	stw	r4,1176(sp)
 8008f14:	1009883a 	mov	r4,r2
 8008f18:	003ea006 	br	800899c <__alt_data_end+0xfc00899c>
 8008f1c:	002b883a 	mov	r21,zero
 8008f20:	003fe206 	br	8008eac <__alt_data_end+0xfc008eac>
 8008f24:	d9412317 	ldw	r5,1164(sp)
 8008f28:	b807883a 	mov	r3,r23
 8008f2c:	102f883a 	mov	r23,r2
 8008f30:	2c000017 	ldw	r16,0(r5)
 8008f34:	29000104 	addi	r4,r5,4
 8008f38:	d9012315 	stw	r4,1164(sp)
 8008f3c:	80000416 	blt	r16,zero,8008f50 <___vfiprintf_internal_r+0x1410>
 8008f40:	19800047 	ldb	r6,1(r3)
 8008f44:	003b5f06 	br	8007cc4 <__alt_data_end+0xfc007cc4>
 8008f48:	043fffc4 	movi	r16,-1
 8008f4c:	003bef06 	br	8007f0c <__alt_data_end+0xfc007f0c>
 8008f50:	043fffc4 	movi	r16,-1
 8008f54:	19800047 	ldb	r6,1(r3)
 8008f58:	003b5a06 	br	8007cc4 <__alt_data_end+0xfc007cc4>
 8008f5c:	282b883a 	mov	r21,r5
 8008f60:	003cc706 	br	8008280 <__alt_data_end+0xfc008280>

08008f64 <__vfiprintf_internal>:
 8008f64:	2007883a 	mov	r3,r4
 8008f68:	01020074 	movhi	r4,2049
 8008f6c:	21050004 	addi	r4,r4,5120
 8008f70:	21000017 	ldw	r4,0(r4)
 8008f74:	2805883a 	mov	r2,r5
 8008f78:	300f883a 	mov	r7,r6
 8008f7c:	180b883a 	mov	r5,r3
 8008f80:	100d883a 	mov	r6,r2
 8008f84:	8007b401 	jmpi	8007b40 <___vfiprintf_internal_r>

08008f88 <_write_r>:
 8008f88:	defffd04 	addi	sp,sp,-12
 8008f8c:	dc000015 	stw	r16,0(sp)
 8008f90:	04020074 	movhi	r16,2049
 8008f94:	dc400115 	stw	r17,4(sp)
 8008f98:	840bd004 	addi	r16,r16,12096
 8008f9c:	2023883a 	mov	r17,r4
 8008fa0:	2809883a 	mov	r4,r5
 8008fa4:	300b883a 	mov	r5,r6
 8008fa8:	380d883a 	mov	r6,r7
 8008fac:	dfc00215 	stw	ra,8(sp)
 8008fb0:	80000015 	stw	zero,0(r16)
 8008fb4:	800d7740 	call	800d774 <write>
 8008fb8:	00ffffc4 	movi	r3,-1
 8008fbc:	10c00526 	beq	r2,r3,8008fd4 <_write_r+0x4c>
 8008fc0:	dfc00217 	ldw	ra,8(sp)
 8008fc4:	dc400117 	ldw	r17,4(sp)
 8008fc8:	dc000017 	ldw	r16,0(sp)
 8008fcc:	dec00304 	addi	sp,sp,12
 8008fd0:	f800283a 	ret
 8008fd4:	80c00017 	ldw	r3,0(r16)
 8008fd8:	183ff926 	beq	r3,zero,8008fc0 <__alt_data_end+0xfc008fc0>
 8008fdc:	88c00015 	stw	r3,0(r17)
 8008fe0:	003ff706 	br	8008fc0 <__alt_data_end+0xfc008fc0>

08008fe4 <_close_r>:
 8008fe4:	defffd04 	addi	sp,sp,-12
 8008fe8:	dc000015 	stw	r16,0(sp)
 8008fec:	04020074 	movhi	r16,2049
 8008ff0:	dc400115 	stw	r17,4(sp)
 8008ff4:	840bd004 	addi	r16,r16,12096
 8008ff8:	2023883a 	mov	r17,r4
 8008ffc:	2809883a 	mov	r4,r5
 8009000:	dfc00215 	stw	ra,8(sp)
 8009004:	80000015 	stw	zero,0(r16)
 8009008:	800ced00 	call	800ced0 <close>
 800900c:	00ffffc4 	movi	r3,-1
 8009010:	10c00526 	beq	r2,r3,8009028 <_close_r+0x44>
 8009014:	dfc00217 	ldw	ra,8(sp)
 8009018:	dc400117 	ldw	r17,4(sp)
 800901c:	dc000017 	ldw	r16,0(sp)
 8009020:	dec00304 	addi	sp,sp,12
 8009024:	f800283a 	ret
 8009028:	80c00017 	ldw	r3,0(r16)
 800902c:	183ff926 	beq	r3,zero,8009014 <__alt_data_end+0xfc009014>
 8009030:	88c00015 	stw	r3,0(r17)
 8009034:	003ff706 	br	8009014 <__alt_data_end+0xfc009014>

08009038 <_calloc_r>:
 8009038:	defffe04 	addi	sp,sp,-8
 800903c:	dc000015 	stw	r16,0(sp)
 8009040:	2021883a 	mov	r16,r4
 8009044:	2809883a 	mov	r4,r5
 8009048:	300b883a 	mov	r5,r6
 800904c:	dfc00115 	stw	ra,4(sp)
 8009050:	800a65c0 	call	800a65c <__mulsi3>
 8009054:	8009883a 	mov	r4,r16
 8009058:	100b883a 	mov	r5,r2
 800905c:	80055540 	call	8005554 <_malloc_r>
 8009060:	1021883a 	mov	r16,r2
 8009064:	10002826 	beq	r2,zero,8009108 <_calloc_r+0xd0>
 8009068:	11bfff17 	ldw	r6,-4(r2)
 800906c:	00bfff04 	movi	r2,-4
 8009070:	00c00904 	movi	r3,36
 8009074:	308c703a 	and	r6,r6,r2
 8009078:	308d883a 	add	r6,r6,r2
 800907c:	19801436 	bltu	r3,r6,80090d0 <_calloc_r+0x98>
 8009080:	008004c4 	movi	r2,19
 8009084:	11800936 	bltu	r2,r6,80090ac <_calloc_r+0x74>
 8009088:	8005883a 	mov	r2,r16
 800908c:	10000015 	stw	zero,0(r2)
 8009090:	10000115 	stw	zero,4(r2)
 8009094:	10000215 	stw	zero,8(r2)
 8009098:	8005883a 	mov	r2,r16
 800909c:	dfc00117 	ldw	ra,4(sp)
 80090a0:	dc000017 	ldw	r16,0(sp)
 80090a4:	dec00204 	addi	sp,sp,8
 80090a8:	f800283a 	ret
 80090ac:	80000015 	stw	zero,0(r16)
 80090b0:	80000115 	stw	zero,4(r16)
 80090b4:	008006c4 	movi	r2,27
 80090b8:	11800d2e 	bgeu	r2,r6,80090f0 <_calloc_r+0xb8>
 80090bc:	80000215 	stw	zero,8(r16)
 80090c0:	80000315 	stw	zero,12(r16)
 80090c4:	30c00c26 	beq	r6,r3,80090f8 <_calloc_r+0xc0>
 80090c8:	80800404 	addi	r2,r16,16
 80090cc:	003fef06 	br	800908c <__alt_data_end+0xfc00908c>
 80090d0:	8009883a 	mov	r4,r16
 80090d4:	000b883a 	mov	r5,zero
 80090d8:	80060780 	call	8006078 <memset>
 80090dc:	8005883a 	mov	r2,r16
 80090e0:	dfc00117 	ldw	ra,4(sp)
 80090e4:	dc000017 	ldw	r16,0(sp)
 80090e8:	dec00204 	addi	sp,sp,8
 80090ec:	f800283a 	ret
 80090f0:	80800204 	addi	r2,r16,8
 80090f4:	003fe506 	br	800908c <__alt_data_end+0xfc00908c>
 80090f8:	80000415 	stw	zero,16(r16)
 80090fc:	80800604 	addi	r2,r16,24
 8009100:	80000515 	stw	zero,20(r16)
 8009104:	003fe106 	br	800908c <__alt_data_end+0xfc00908c>
 8009108:	0005883a 	mov	r2,zero
 800910c:	003fe306 	br	800909c <__alt_data_end+0xfc00909c>

08009110 <_fclose_r>:
 8009110:	28003226 	beq	r5,zero,80091dc <_fclose_r+0xcc>
 8009114:	defffc04 	addi	sp,sp,-16
 8009118:	dc400115 	stw	r17,4(sp)
 800911c:	2023883a 	mov	r17,r4
 8009120:	dc000015 	stw	r16,0(sp)
 8009124:	dfc00315 	stw	ra,12(sp)
 8009128:	dc800215 	stw	r18,8(sp)
 800912c:	2821883a 	mov	r16,r5
 8009130:	80048540 	call	8004854 <__sfp_lock_acquire>
 8009134:	88000226 	beq	r17,zero,8009140 <_fclose_r+0x30>
 8009138:	88800e17 	ldw	r2,56(r17)
 800913c:	10002926 	beq	r2,zero,80091e4 <_fclose_r+0xd4>
 8009140:	8080030f 	ldh	r2,12(r16)
 8009144:	10002226 	beq	r2,zero,80091d0 <_fclose_r+0xc0>
 8009148:	8809883a 	mov	r4,r17
 800914c:	800b883a 	mov	r5,r16
 8009150:	80042880 	call	8004288 <_fflush_r>
 8009154:	1025883a 	mov	r18,r2
 8009158:	80800b17 	ldw	r2,44(r16)
 800915c:	10000426 	beq	r2,zero,8009170 <_fclose_r+0x60>
 8009160:	81400717 	ldw	r5,28(r16)
 8009164:	8809883a 	mov	r4,r17
 8009168:	103ee83a 	callr	r2
 800916c:	10002616 	blt	r2,zero,8009208 <_fclose_r+0xf8>
 8009170:	8080030b 	ldhu	r2,12(r16)
 8009174:	1080200c 	andi	r2,r2,128
 8009178:	10001f1e 	bne	r2,zero,80091f8 <_fclose_r+0xe8>
 800917c:	81400c17 	ldw	r5,48(r16)
 8009180:	28000526 	beq	r5,zero,8009198 <_fclose_r+0x88>
 8009184:	80801004 	addi	r2,r16,64
 8009188:	28800226 	beq	r5,r2,8009194 <_fclose_r+0x84>
 800918c:	8809883a 	mov	r4,r17
 8009190:	80049b80 	call	80049b8 <_free_r>
 8009194:	80000c15 	stw	zero,48(r16)
 8009198:	81401117 	ldw	r5,68(r16)
 800919c:	28000326 	beq	r5,zero,80091ac <_fclose_r+0x9c>
 80091a0:	8809883a 	mov	r4,r17
 80091a4:	80049b80 	call	80049b8 <_free_r>
 80091a8:	80001115 	stw	zero,68(r16)
 80091ac:	8000030d 	sth	zero,12(r16)
 80091b0:	80048580 	call	8004858 <__sfp_lock_release>
 80091b4:	9005883a 	mov	r2,r18
 80091b8:	dfc00317 	ldw	ra,12(sp)
 80091bc:	dc800217 	ldw	r18,8(sp)
 80091c0:	dc400117 	ldw	r17,4(sp)
 80091c4:	dc000017 	ldw	r16,0(sp)
 80091c8:	dec00404 	addi	sp,sp,16
 80091cc:	f800283a 	ret
 80091d0:	80048580 	call	8004858 <__sfp_lock_release>
 80091d4:	0005883a 	mov	r2,zero
 80091d8:	003ff706 	br	80091b8 <__alt_data_end+0xfc0091b8>
 80091dc:	0005883a 	mov	r2,zero
 80091e0:	f800283a 	ret
 80091e4:	8809883a 	mov	r4,r17
 80091e8:	80048440 	call	8004844 <__sinit>
 80091ec:	8080030f 	ldh	r2,12(r16)
 80091f0:	103fd51e 	bne	r2,zero,8009148 <__alt_data_end+0xfc009148>
 80091f4:	003ff606 	br	80091d0 <__alt_data_end+0xfc0091d0>
 80091f8:	81400417 	ldw	r5,16(r16)
 80091fc:	8809883a 	mov	r4,r17
 8009200:	80049b80 	call	80049b8 <_free_r>
 8009204:	003fdd06 	br	800917c <__alt_data_end+0xfc00917c>
 8009208:	04bfffc4 	movi	r18,-1
 800920c:	003fd806 	br	8009170 <__alt_data_end+0xfc009170>

08009210 <fclose>:
 8009210:	00820074 	movhi	r2,2049
 8009214:	10850004 	addi	r2,r2,5120
 8009218:	200b883a 	mov	r5,r4
 800921c:	11000017 	ldw	r4,0(r2)
 8009220:	80091101 	jmpi	8009110 <_fclose_r>

08009224 <_fputwc_r>:
 8009224:	3080030b 	ldhu	r2,12(r6)
 8009228:	defff804 	addi	sp,sp,-32
 800922c:	dcc00415 	stw	r19,16(sp)
 8009230:	dc800315 	stw	r18,12(sp)
 8009234:	dc000115 	stw	r16,4(sp)
 8009238:	dfc00715 	stw	ra,28(sp)
 800923c:	dd400615 	stw	r21,24(sp)
 8009240:	dd000515 	stw	r20,20(sp)
 8009244:	dc400215 	stw	r17,8(sp)
 8009248:	10c8000c 	andi	r3,r2,8192
 800924c:	3021883a 	mov	r16,r6
 8009250:	2027883a 	mov	r19,r4
 8009254:	2825883a 	mov	r18,r5
 8009258:	1800051e 	bne	r3,zero,8009270 <_fputwc_r+0x4c>
 800925c:	30c01917 	ldw	r3,100(r6)
 8009260:	10880014 	ori	r2,r2,8192
 8009264:	3080030d 	sth	r2,12(r6)
 8009268:	18880014 	ori	r2,r3,8192
 800926c:	30801915 	stw	r2,100(r6)
 8009270:	80053440 	call	8005344 <__locale_mb_cur_max>
 8009274:	00c00044 	movi	r3,1
 8009278:	10c03e26 	beq	r2,r3,8009374 <_fputwc_r+0x150>
 800927c:	9809883a 	mov	r4,r19
 8009280:	d80b883a 	mov	r5,sp
 8009284:	900d883a 	mov	r6,r18
 8009288:	81c01704 	addi	r7,r16,92
 800928c:	80096d40 	call	80096d4 <_wcrtomb_r>
 8009290:	1029883a 	mov	r20,r2
 8009294:	00bfffc4 	movi	r2,-1
 8009298:	a0802026 	beq	r20,r2,800931c <_fputwc_r+0xf8>
 800929c:	d9400003 	ldbu	r5,0(sp)
 80092a0:	a0001c26 	beq	r20,zero,8009314 <_fputwc_r+0xf0>
 80092a4:	0023883a 	mov	r17,zero
 80092a8:	05400284 	movi	r21,10
 80092ac:	00000906 	br	80092d4 <_fputwc_r+0xb0>
 80092b0:	80800017 	ldw	r2,0(r16)
 80092b4:	11400005 	stb	r5,0(r2)
 80092b8:	80c00017 	ldw	r3,0(r16)
 80092bc:	18c00044 	addi	r3,r3,1
 80092c0:	80c00015 	stw	r3,0(r16)
 80092c4:	8c400044 	addi	r17,r17,1
 80092c8:	dc45883a 	add	r2,sp,r17
 80092cc:	8d00112e 	bgeu	r17,r20,8009314 <_fputwc_r+0xf0>
 80092d0:	11400003 	ldbu	r5,0(r2)
 80092d4:	80c00217 	ldw	r3,8(r16)
 80092d8:	18ffffc4 	addi	r3,r3,-1
 80092dc:	80c00215 	stw	r3,8(r16)
 80092e0:	183ff30e 	bge	r3,zero,80092b0 <__alt_data_end+0xfc0092b0>
 80092e4:	80800617 	ldw	r2,24(r16)
 80092e8:	18801916 	blt	r3,r2,8009350 <_fputwc_r+0x12c>
 80092ec:	80800017 	ldw	r2,0(r16)
 80092f0:	11400005 	stb	r5,0(r2)
 80092f4:	80800017 	ldw	r2,0(r16)
 80092f8:	10c00003 	ldbu	r3,0(r2)
 80092fc:	10800044 	addi	r2,r2,1
 8009300:	1d402326 	beq	r3,r21,8009390 <_fputwc_r+0x16c>
 8009304:	80800015 	stw	r2,0(r16)
 8009308:	8c400044 	addi	r17,r17,1
 800930c:	dc45883a 	add	r2,sp,r17
 8009310:	8d3fef36 	bltu	r17,r20,80092d0 <__alt_data_end+0xfc0092d0>
 8009314:	9005883a 	mov	r2,r18
 8009318:	00000406 	br	800932c <_fputwc_r+0x108>
 800931c:	80c0030b 	ldhu	r3,12(r16)
 8009320:	a005883a 	mov	r2,r20
 8009324:	18c01014 	ori	r3,r3,64
 8009328:	80c0030d 	sth	r3,12(r16)
 800932c:	dfc00717 	ldw	ra,28(sp)
 8009330:	dd400617 	ldw	r21,24(sp)
 8009334:	dd000517 	ldw	r20,20(sp)
 8009338:	dcc00417 	ldw	r19,16(sp)
 800933c:	dc800317 	ldw	r18,12(sp)
 8009340:	dc400217 	ldw	r17,8(sp)
 8009344:	dc000117 	ldw	r16,4(sp)
 8009348:	dec00804 	addi	sp,sp,32
 800934c:	f800283a 	ret
 8009350:	9809883a 	mov	r4,r19
 8009354:	29403fcc 	andi	r5,r5,255
 8009358:	800d883a 	mov	r6,r16
 800935c:	80095640 	call	8009564 <__swbuf_r>
 8009360:	10bfffe0 	cmpeqi	r2,r2,-1
 8009364:	10803fcc 	andi	r2,r2,255
 8009368:	103fd626 	beq	r2,zero,80092c4 <__alt_data_end+0xfc0092c4>
 800936c:	00bfffc4 	movi	r2,-1
 8009370:	003fee06 	br	800932c <__alt_data_end+0xfc00932c>
 8009374:	90ffffc4 	addi	r3,r18,-1
 8009378:	01003f84 	movi	r4,254
 800937c:	20ffbf36 	bltu	r4,r3,800927c <__alt_data_end+0xfc00927c>
 8009380:	900b883a 	mov	r5,r18
 8009384:	dc800005 	stb	r18,0(sp)
 8009388:	1029883a 	mov	r20,r2
 800938c:	003fc506 	br	80092a4 <__alt_data_end+0xfc0092a4>
 8009390:	9809883a 	mov	r4,r19
 8009394:	a80b883a 	mov	r5,r21
 8009398:	800d883a 	mov	r6,r16
 800939c:	80095640 	call	8009564 <__swbuf_r>
 80093a0:	10bfffe0 	cmpeqi	r2,r2,-1
 80093a4:	003fef06 	br	8009364 <__alt_data_end+0xfc009364>

080093a8 <fputwc>:
 80093a8:	defffc04 	addi	sp,sp,-16
 80093ac:	dc000115 	stw	r16,4(sp)
 80093b0:	04020074 	movhi	r16,2049
 80093b4:	84050004 	addi	r16,r16,5120
 80093b8:	dc400215 	stw	r17,8(sp)
 80093bc:	2023883a 	mov	r17,r4
 80093c0:	81000017 	ldw	r4,0(r16)
 80093c4:	dfc00315 	stw	ra,12(sp)
 80093c8:	280d883a 	mov	r6,r5
 80093cc:	20000626 	beq	r4,zero,80093e8 <fputwc+0x40>
 80093d0:	20800e17 	ldw	r2,56(r4)
 80093d4:	1000041e 	bne	r2,zero,80093e8 <fputwc+0x40>
 80093d8:	d9400015 	stw	r5,0(sp)
 80093dc:	80048440 	call	8004844 <__sinit>
 80093e0:	81000017 	ldw	r4,0(r16)
 80093e4:	d9800017 	ldw	r6,0(sp)
 80093e8:	880b883a 	mov	r5,r17
 80093ec:	dfc00317 	ldw	ra,12(sp)
 80093f0:	dc400217 	ldw	r17,8(sp)
 80093f4:	dc000117 	ldw	r16,4(sp)
 80093f8:	dec00404 	addi	sp,sp,16
 80093fc:	80092241 	jmpi	8009224 <_fputwc_r>

08009400 <_fstat_r>:
 8009400:	defffd04 	addi	sp,sp,-12
 8009404:	dc000015 	stw	r16,0(sp)
 8009408:	04020074 	movhi	r16,2049
 800940c:	dc400115 	stw	r17,4(sp)
 8009410:	840bd004 	addi	r16,r16,12096
 8009414:	2023883a 	mov	r17,r4
 8009418:	2809883a 	mov	r4,r5
 800941c:	300b883a 	mov	r5,r6
 8009420:	dfc00215 	stw	ra,8(sp)
 8009424:	80000015 	stw	zero,0(r16)
 8009428:	800d0240 	call	800d024 <fstat>
 800942c:	00ffffc4 	movi	r3,-1
 8009430:	10c00526 	beq	r2,r3,8009448 <_fstat_r+0x48>
 8009434:	dfc00217 	ldw	ra,8(sp)
 8009438:	dc400117 	ldw	r17,4(sp)
 800943c:	dc000017 	ldw	r16,0(sp)
 8009440:	dec00304 	addi	sp,sp,12
 8009444:	f800283a 	ret
 8009448:	80c00017 	ldw	r3,0(r16)
 800944c:	183ff926 	beq	r3,zero,8009434 <__alt_data_end+0xfc009434>
 8009450:	88c00015 	stw	r3,0(r17)
 8009454:	003ff706 	br	8009434 <__alt_data_end+0xfc009434>

08009458 <_isatty_r>:
 8009458:	defffd04 	addi	sp,sp,-12
 800945c:	dc000015 	stw	r16,0(sp)
 8009460:	04020074 	movhi	r16,2049
 8009464:	dc400115 	stw	r17,4(sp)
 8009468:	840bd004 	addi	r16,r16,12096
 800946c:	2023883a 	mov	r17,r4
 8009470:	2809883a 	mov	r4,r5
 8009474:	dfc00215 	stw	ra,8(sp)
 8009478:	80000015 	stw	zero,0(r16)
 800947c:	800d12c0 	call	800d12c <isatty>
 8009480:	00ffffc4 	movi	r3,-1
 8009484:	10c00526 	beq	r2,r3,800949c <_isatty_r+0x44>
 8009488:	dfc00217 	ldw	ra,8(sp)
 800948c:	dc400117 	ldw	r17,4(sp)
 8009490:	dc000017 	ldw	r16,0(sp)
 8009494:	dec00304 	addi	sp,sp,12
 8009498:	f800283a 	ret
 800949c:	80c00017 	ldw	r3,0(r16)
 80094a0:	183ff926 	beq	r3,zero,8009488 <__alt_data_end+0xfc009488>
 80094a4:	88c00015 	stw	r3,0(r17)
 80094a8:	003ff706 	br	8009488 <__alt_data_end+0xfc009488>

080094ac <_lseek_r>:
 80094ac:	defffd04 	addi	sp,sp,-12
 80094b0:	dc000015 	stw	r16,0(sp)
 80094b4:	04020074 	movhi	r16,2049
 80094b8:	dc400115 	stw	r17,4(sp)
 80094bc:	840bd004 	addi	r16,r16,12096
 80094c0:	2023883a 	mov	r17,r4
 80094c4:	2809883a 	mov	r4,r5
 80094c8:	300b883a 	mov	r5,r6
 80094cc:	380d883a 	mov	r6,r7
 80094d0:	dfc00215 	stw	ra,8(sp)
 80094d4:	80000015 	stw	zero,0(r16)
 80094d8:	800d30c0 	call	800d30c <lseek>
 80094dc:	00ffffc4 	movi	r3,-1
 80094e0:	10c00526 	beq	r2,r3,80094f8 <_lseek_r+0x4c>
 80094e4:	dfc00217 	ldw	ra,8(sp)
 80094e8:	dc400117 	ldw	r17,4(sp)
 80094ec:	dc000017 	ldw	r16,0(sp)
 80094f0:	dec00304 	addi	sp,sp,12
 80094f4:	f800283a 	ret
 80094f8:	80c00017 	ldw	r3,0(r16)
 80094fc:	183ff926 	beq	r3,zero,80094e4 <__alt_data_end+0xfc0094e4>
 8009500:	88c00015 	stw	r3,0(r17)
 8009504:	003ff706 	br	80094e4 <__alt_data_end+0xfc0094e4>

08009508 <_read_r>:
 8009508:	defffd04 	addi	sp,sp,-12
 800950c:	dc000015 	stw	r16,0(sp)
 8009510:	04020074 	movhi	r16,2049
 8009514:	dc400115 	stw	r17,4(sp)
 8009518:	840bd004 	addi	r16,r16,12096
 800951c:	2023883a 	mov	r17,r4
 8009520:	2809883a 	mov	r4,r5
 8009524:	300b883a 	mov	r5,r6
 8009528:	380d883a 	mov	r6,r7
 800952c:	dfc00215 	stw	ra,8(sp)
 8009530:	80000015 	stw	zero,0(r16)
 8009534:	800d4f00 	call	800d4f0 <read>
 8009538:	00ffffc4 	movi	r3,-1
 800953c:	10c00526 	beq	r2,r3,8009554 <_read_r+0x4c>
 8009540:	dfc00217 	ldw	ra,8(sp)
 8009544:	dc400117 	ldw	r17,4(sp)
 8009548:	dc000017 	ldw	r16,0(sp)
 800954c:	dec00304 	addi	sp,sp,12
 8009550:	f800283a 	ret
 8009554:	80c00017 	ldw	r3,0(r16)
 8009558:	183ff926 	beq	r3,zero,8009540 <__alt_data_end+0xfc009540>
 800955c:	88c00015 	stw	r3,0(r17)
 8009560:	003ff706 	br	8009540 <__alt_data_end+0xfc009540>

08009564 <__swbuf_r>:
 8009564:	defffc04 	addi	sp,sp,-16
 8009568:	dc800215 	stw	r18,8(sp)
 800956c:	dc400115 	stw	r17,4(sp)
 8009570:	dc000015 	stw	r16,0(sp)
 8009574:	dfc00315 	stw	ra,12(sp)
 8009578:	2025883a 	mov	r18,r4
 800957c:	2823883a 	mov	r17,r5
 8009580:	3021883a 	mov	r16,r6
 8009584:	20000226 	beq	r4,zero,8009590 <__swbuf_r+0x2c>
 8009588:	20800e17 	ldw	r2,56(r4)
 800958c:	10004126 	beq	r2,zero,8009694 <__swbuf_r+0x130>
 8009590:	80c00617 	ldw	r3,24(r16)
 8009594:	8180030b 	ldhu	r6,12(r16)
 8009598:	80c00215 	stw	r3,8(r16)
 800959c:	30c0020c 	andi	r3,r6,8
 80095a0:	18003526 	beq	r3,zero,8009678 <__swbuf_r+0x114>
 80095a4:	80c00417 	ldw	r3,16(r16)
 80095a8:	18003326 	beq	r3,zero,8009678 <__swbuf_r+0x114>
 80095ac:	3088000c 	andi	r2,r6,8192
 80095b0:	8c403fcc 	andi	r17,r17,255
 80095b4:	10001726 	beq	r2,zero,8009614 <__swbuf_r+0xb0>
 80095b8:	80800017 	ldw	r2,0(r16)
 80095bc:	81000517 	ldw	r4,20(r16)
 80095c0:	10c7c83a 	sub	r3,r2,r3
 80095c4:	19001d0e 	bge	r3,r4,800963c <__swbuf_r+0xd8>
 80095c8:	18c00044 	addi	r3,r3,1
 80095cc:	81400217 	ldw	r5,8(r16)
 80095d0:	11000044 	addi	r4,r2,1
 80095d4:	81000015 	stw	r4,0(r16)
 80095d8:	297fffc4 	addi	r5,r5,-1
 80095dc:	81400215 	stw	r5,8(r16)
 80095e0:	14400005 	stb	r17,0(r2)
 80095e4:	80800517 	ldw	r2,20(r16)
 80095e8:	10c01d26 	beq	r2,r3,8009660 <__swbuf_r+0xfc>
 80095ec:	8080030b 	ldhu	r2,12(r16)
 80095f0:	1080004c 	andi	r2,r2,1
 80095f4:	1000181e 	bne	r2,zero,8009658 <__swbuf_r+0xf4>
 80095f8:	8805883a 	mov	r2,r17
 80095fc:	dfc00317 	ldw	ra,12(sp)
 8009600:	dc800217 	ldw	r18,8(sp)
 8009604:	dc400117 	ldw	r17,4(sp)
 8009608:	dc000017 	ldw	r16,0(sp)
 800960c:	dec00404 	addi	sp,sp,16
 8009610:	f800283a 	ret
 8009614:	81001917 	ldw	r4,100(r16)
 8009618:	00b7ffc4 	movi	r2,-8193
 800961c:	31880014 	ori	r6,r6,8192
 8009620:	2084703a 	and	r2,r4,r2
 8009624:	80801915 	stw	r2,100(r16)
 8009628:	80800017 	ldw	r2,0(r16)
 800962c:	81000517 	ldw	r4,20(r16)
 8009630:	8180030d 	sth	r6,12(r16)
 8009634:	10c7c83a 	sub	r3,r2,r3
 8009638:	193fe316 	blt	r3,r4,80095c8 <__alt_data_end+0xfc0095c8>
 800963c:	9009883a 	mov	r4,r18
 8009640:	800b883a 	mov	r5,r16
 8009644:	80042880 	call	8004288 <_fflush_r>
 8009648:	1000091e 	bne	r2,zero,8009670 <__swbuf_r+0x10c>
 800964c:	80800017 	ldw	r2,0(r16)
 8009650:	00c00044 	movi	r3,1
 8009654:	003fdd06 	br	80095cc <__alt_data_end+0xfc0095cc>
 8009658:	00800284 	movi	r2,10
 800965c:	88bfe61e 	bne	r17,r2,80095f8 <__alt_data_end+0xfc0095f8>
 8009660:	9009883a 	mov	r4,r18
 8009664:	800b883a 	mov	r5,r16
 8009668:	80042880 	call	8004288 <_fflush_r>
 800966c:	103fe226 	beq	r2,zero,80095f8 <__alt_data_end+0xfc0095f8>
 8009670:	00bfffc4 	movi	r2,-1
 8009674:	003fe106 	br	80095fc <__alt_data_end+0xfc0095fc>
 8009678:	9009883a 	mov	r4,r18
 800967c:	800b883a 	mov	r5,r16
 8009680:	80028080 	call	8002808 <__swsetup_r>
 8009684:	1000051e 	bne	r2,zero,800969c <__swbuf_r+0x138>
 8009688:	8180030b 	ldhu	r6,12(r16)
 800968c:	80c00417 	ldw	r3,16(r16)
 8009690:	003fc606 	br	80095ac <__alt_data_end+0xfc0095ac>
 8009694:	80048440 	call	8004844 <__sinit>
 8009698:	003fbd06 	br	8009590 <__alt_data_end+0xfc009590>
 800969c:	80c0030b 	ldhu	r3,12(r16)
 80096a0:	00bfffc4 	movi	r2,-1
 80096a4:	18c01014 	ori	r3,r3,64
 80096a8:	80c0030d 	sth	r3,12(r16)
 80096ac:	00c00244 	movi	r3,9
 80096b0:	90c00015 	stw	r3,0(r18)
 80096b4:	003fd106 	br	80095fc <__alt_data_end+0xfc0095fc>

080096b8 <__swbuf>:
 80096b8:	00c20074 	movhi	r3,2049
 80096bc:	18c50004 	addi	r3,r3,5120
 80096c0:	2005883a 	mov	r2,r4
 80096c4:	19000017 	ldw	r4,0(r3)
 80096c8:	280d883a 	mov	r6,r5
 80096cc:	100b883a 	mov	r5,r2
 80096d0:	80095641 	jmpi	8009564 <__swbuf_r>

080096d4 <_wcrtomb_r>:
 80096d4:	defff604 	addi	sp,sp,-40
 80096d8:	00820074 	movhi	r2,2049
 80096dc:	dc800815 	stw	r18,32(sp)
 80096e0:	dc400715 	stw	r17,28(sp)
 80096e4:	dc000615 	stw	r16,24(sp)
 80096e8:	10850404 	addi	r2,r2,5136
 80096ec:	dfc00915 	stw	ra,36(sp)
 80096f0:	2021883a 	mov	r16,r4
 80096f4:	3823883a 	mov	r17,r7
 80096f8:	14800017 	ldw	r18,0(r2)
 80096fc:	28001426 	beq	r5,zero,8009750 <_wcrtomb_r+0x7c>
 8009700:	d9400415 	stw	r5,16(sp)
 8009704:	d9800515 	stw	r6,20(sp)
 8009708:	80053380 	call	8005338 <__locale_charset>
 800970c:	d9400417 	ldw	r5,16(sp)
 8009710:	d9800517 	ldw	r6,20(sp)
 8009714:	8009883a 	mov	r4,r16
 8009718:	dc400015 	stw	r17,0(sp)
 800971c:	100f883a 	mov	r7,r2
 8009720:	903ee83a 	callr	r18
 8009724:	00ffffc4 	movi	r3,-1
 8009728:	10c0031e 	bne	r2,r3,8009738 <_wcrtomb_r+0x64>
 800972c:	88000015 	stw	zero,0(r17)
 8009730:	00c02284 	movi	r3,138
 8009734:	80c00015 	stw	r3,0(r16)
 8009738:	dfc00917 	ldw	ra,36(sp)
 800973c:	dc800817 	ldw	r18,32(sp)
 8009740:	dc400717 	ldw	r17,28(sp)
 8009744:	dc000617 	ldw	r16,24(sp)
 8009748:	dec00a04 	addi	sp,sp,40
 800974c:	f800283a 	ret
 8009750:	80053380 	call	8005338 <__locale_charset>
 8009754:	8009883a 	mov	r4,r16
 8009758:	dc400015 	stw	r17,0(sp)
 800975c:	d9400104 	addi	r5,sp,4
 8009760:	000d883a 	mov	r6,zero
 8009764:	100f883a 	mov	r7,r2
 8009768:	903ee83a 	callr	r18
 800976c:	003fed06 	br	8009724 <__alt_data_end+0xfc009724>

08009770 <wcrtomb>:
 8009770:	defff504 	addi	sp,sp,-44
 8009774:	dc400515 	stw	r17,20(sp)
 8009778:	dc000415 	stw	r16,16(sp)
 800977c:	dfc00a15 	stw	ra,40(sp)
 8009780:	dd400915 	stw	r21,36(sp)
 8009784:	dd000815 	stw	r20,32(sp)
 8009788:	dcc00715 	stw	r19,28(sp)
 800978c:	dc800615 	stw	r18,24(sp)
 8009790:	2021883a 	mov	r16,r4
 8009794:	3023883a 	mov	r17,r6
 8009798:	20001d26 	beq	r4,zero,8009810 <wcrtomb+0xa0>
 800979c:	04820074 	movhi	r18,2049
 80097a0:	94850004 	addi	r18,r18,5120
 80097a4:	00820074 	movhi	r2,2049
 80097a8:	95400017 	ldw	r21,0(r18)
 80097ac:	10850404 	addi	r2,r2,5136
 80097b0:	15000017 	ldw	r20,0(r2)
 80097b4:	2827883a 	mov	r19,r5
 80097b8:	80053380 	call	8005338 <__locale_charset>
 80097bc:	a809883a 	mov	r4,r21
 80097c0:	dc400015 	stw	r17,0(sp)
 80097c4:	800b883a 	mov	r5,r16
 80097c8:	980d883a 	mov	r6,r19
 80097cc:	100f883a 	mov	r7,r2
 80097d0:	a03ee83a 	callr	r20
 80097d4:	00ffffc4 	movi	r3,-1
 80097d8:	10c0041e 	bne	r2,r3,80097ec <wcrtomb+0x7c>
 80097dc:	90c00017 	ldw	r3,0(r18)
 80097e0:	01002284 	movi	r4,138
 80097e4:	88000015 	stw	zero,0(r17)
 80097e8:	19000015 	stw	r4,0(r3)
 80097ec:	dfc00a17 	ldw	ra,40(sp)
 80097f0:	dd400917 	ldw	r21,36(sp)
 80097f4:	dd000817 	ldw	r20,32(sp)
 80097f8:	dcc00717 	ldw	r19,28(sp)
 80097fc:	dc800617 	ldw	r18,24(sp)
 8009800:	dc400517 	ldw	r17,20(sp)
 8009804:	dc000417 	ldw	r16,16(sp)
 8009808:	dec00b04 	addi	sp,sp,44
 800980c:	f800283a 	ret
 8009810:	04820074 	movhi	r18,2049
 8009814:	94850004 	addi	r18,r18,5120
 8009818:	00820074 	movhi	r2,2049
 800981c:	94c00017 	ldw	r19,0(r18)
 8009820:	10850404 	addi	r2,r2,5136
 8009824:	14000017 	ldw	r16,0(r2)
 8009828:	80053380 	call	8005338 <__locale_charset>
 800982c:	9809883a 	mov	r4,r19
 8009830:	dc400015 	stw	r17,0(sp)
 8009834:	d9400104 	addi	r5,sp,4
 8009838:	000d883a 	mov	r6,zero
 800983c:	100f883a 	mov	r7,r2
 8009840:	803ee83a 	callr	r16
 8009844:	003fe306 	br	80097d4 <__alt_data_end+0xfc0097d4>

08009848 <__ascii_wctomb>:
 8009848:	28000526 	beq	r5,zero,8009860 <__ascii_wctomb+0x18>
 800984c:	00803fc4 	movi	r2,255
 8009850:	11800536 	bltu	r2,r6,8009868 <__ascii_wctomb+0x20>
 8009854:	29800005 	stb	r6,0(r5)
 8009858:	00800044 	movi	r2,1
 800985c:	f800283a 	ret
 8009860:	0005883a 	mov	r2,zero
 8009864:	f800283a 	ret
 8009868:	00802284 	movi	r2,138
 800986c:	20800015 	stw	r2,0(r4)
 8009870:	00bfffc4 	movi	r2,-1
 8009874:	f800283a 	ret

08009878 <_wctomb_r>:
 8009878:	00820074 	movhi	r2,2049
 800987c:	defff904 	addi	sp,sp,-28
 8009880:	10850404 	addi	r2,r2,5136
 8009884:	dfc00615 	stw	ra,24(sp)
 8009888:	dc400515 	stw	r17,20(sp)
 800988c:	dc000415 	stw	r16,16(sp)
 8009890:	3823883a 	mov	r17,r7
 8009894:	14000017 	ldw	r16,0(r2)
 8009898:	d9000115 	stw	r4,4(sp)
 800989c:	d9400215 	stw	r5,8(sp)
 80098a0:	d9800315 	stw	r6,12(sp)
 80098a4:	80053380 	call	8005338 <__locale_charset>
 80098a8:	d9000117 	ldw	r4,4(sp)
 80098ac:	d9400217 	ldw	r5,8(sp)
 80098b0:	d9800317 	ldw	r6,12(sp)
 80098b4:	dc400015 	stw	r17,0(sp)
 80098b8:	100f883a 	mov	r7,r2
 80098bc:	803ee83a 	callr	r16
 80098c0:	dfc00617 	ldw	ra,24(sp)
 80098c4:	dc400517 	ldw	r17,20(sp)
 80098c8:	dc000417 	ldw	r16,16(sp)
 80098cc:	dec00704 	addi	sp,sp,28
 80098d0:	f800283a 	ret

080098d4 <__udivdi3>:
 80098d4:	defff504 	addi	sp,sp,-44
 80098d8:	dcc00415 	stw	r19,16(sp)
 80098dc:	dc000115 	stw	r16,4(sp)
 80098e0:	dfc00a15 	stw	ra,40(sp)
 80098e4:	df000915 	stw	fp,36(sp)
 80098e8:	ddc00815 	stw	r23,32(sp)
 80098ec:	dd800715 	stw	r22,28(sp)
 80098f0:	dd400615 	stw	r21,24(sp)
 80098f4:	dd000515 	stw	r20,20(sp)
 80098f8:	dc800315 	stw	r18,12(sp)
 80098fc:	dc400215 	stw	r17,8(sp)
 8009900:	2027883a 	mov	r19,r4
 8009904:	2821883a 	mov	r16,r5
 8009908:	3800471e 	bne	r7,zero,8009a28 <__udivdi3+0x154>
 800990c:	3025883a 	mov	r18,r6
 8009910:	2023883a 	mov	r17,r4
 8009914:	2980592e 	bgeu	r5,r6,8009a7c <__udivdi3+0x1a8>
 8009918:	00bfffd4 	movui	r2,65535
 800991c:	2829883a 	mov	r20,r5
 8009920:	1180b236 	bltu	r2,r6,8009bec <__udivdi3+0x318>
 8009924:	00803fc4 	movi	r2,255
 8009928:	1181622e 	bgeu	r2,r6,8009eb4 <__udivdi3+0x5e0>
 800992c:	00800204 	movi	r2,8
 8009930:	1007883a 	mov	r3,r2
 8009934:	3084d83a 	srl	r2,r6,r2
 8009938:	01020074 	movhi	r4,2049
 800993c:	213e0704 	addi	r4,r4,-2020
 8009940:	2085883a 	add	r2,r4,r2
 8009944:	11000003 	ldbu	r4,0(r2)
 8009948:	20c9883a 	add	r4,r4,r3
 800994c:	00c00804 	movi	r3,32
 8009950:	1907c83a 	sub	r3,r3,r4
 8009954:	18000526 	beq	r3,zero,800996c <__udivdi3+0x98>
 8009958:	80e0983a 	sll	r16,r16,r3
 800995c:	9908d83a 	srl	r4,r19,r4
 8009960:	30e4983a 	sll	r18,r6,r3
 8009964:	98e2983a 	sll	r17,r19,r3
 8009968:	8128b03a 	or	r20,r16,r4
 800996c:	902ad43a 	srli	r21,r18,16
 8009970:	a009883a 	mov	r4,r20
 8009974:	95bfffcc 	andi	r22,r18,65535
 8009978:	a80b883a 	mov	r5,r21
 800997c:	800a6540 	call	800a654 <__umodsi3>
 8009980:	a009883a 	mov	r4,r20
 8009984:	a80b883a 	mov	r5,r21
 8009988:	102f883a 	mov	r23,r2
 800998c:	800a64c0 	call	800a64c <__udivsi3>
 8009990:	1009883a 	mov	r4,r2
 8009994:	b00b883a 	mov	r5,r22
 8009998:	1021883a 	mov	r16,r2
 800999c:	800a65c0 	call	800a65c <__mulsi3>
 80099a0:	b82e943a 	slli	r23,r23,16
 80099a4:	8808d43a 	srli	r4,r17,16
 80099a8:	b906b03a 	or	r3,r23,r4
 80099ac:	1880052e 	bgeu	r3,r2,80099c4 <__udivdi3+0xf0>
 80099b0:	1c87883a 	add	r3,r3,r18
 80099b4:	813fffc4 	addi	r4,r16,-1
 80099b8:	1c800136 	bltu	r3,r18,80099c0 <__udivdi3+0xec>
 80099bc:	18815236 	bltu	r3,r2,8009f08 <__udivdi3+0x634>
 80099c0:	2021883a 	mov	r16,r4
 80099c4:	18a7c83a 	sub	r19,r3,r2
 80099c8:	9809883a 	mov	r4,r19
 80099cc:	a80b883a 	mov	r5,r21
 80099d0:	800a6540 	call	800a654 <__umodsi3>
 80099d4:	1029883a 	mov	r20,r2
 80099d8:	9809883a 	mov	r4,r19
 80099dc:	a80b883a 	mov	r5,r21
 80099e0:	a028943a 	slli	r20,r20,16
 80099e4:	800a64c0 	call	800a64c <__udivsi3>
 80099e8:	1009883a 	mov	r4,r2
 80099ec:	b00b883a 	mov	r5,r22
 80099f0:	8c7fffcc 	andi	r17,r17,65535
 80099f4:	1027883a 	mov	r19,r2
 80099f8:	a462b03a 	or	r17,r20,r17
 80099fc:	800a65c0 	call	800a65c <__mulsi3>
 8009a00:	8880052e 	bgeu	r17,r2,8009a18 <__udivdi3+0x144>
 8009a04:	8ca3883a 	add	r17,r17,r18
 8009a08:	98ffffc4 	addi	r3,r19,-1
 8009a0c:	8c811036 	bltu	r17,r18,8009e50 <__udivdi3+0x57c>
 8009a10:	88810f2e 	bgeu	r17,r2,8009e50 <__udivdi3+0x57c>
 8009a14:	9cffff84 	addi	r19,r19,-2
 8009a18:	8020943a 	slli	r16,r16,16
 8009a1c:	0007883a 	mov	r3,zero
 8009a20:	9c04b03a 	or	r2,r19,r16
 8009a24:	00006006 	br	8009ba8 <__udivdi3+0x2d4>
 8009a28:	29c05d36 	bltu	r5,r7,8009ba0 <__udivdi3+0x2cc>
 8009a2c:	00bfffd4 	movui	r2,65535
 8009a30:	11c0692e 	bgeu	r2,r7,8009bd8 <__udivdi3+0x304>
 8009a34:	00804034 	movhi	r2,256
 8009a38:	10bfffc4 	addi	r2,r2,-1
 8009a3c:	11c10e2e 	bgeu	r2,r7,8009e78 <__udivdi3+0x5a4>
 8009a40:	01400604 	movi	r5,24
 8009a44:	2811883a 	mov	r8,r5
 8009a48:	394ad83a 	srl	r5,r7,r5
 8009a4c:	00820074 	movhi	r2,2049
 8009a50:	10be0704 	addi	r2,r2,-2020
 8009a54:	114b883a 	add	r5,r2,r5
 8009a58:	29400003 	ldbu	r5,0(r5)
 8009a5c:	00c00804 	movi	r3,32
 8009a60:	2a0b883a 	add	r5,r5,r8
 8009a64:	196fc83a 	sub	r23,r3,r5
 8009a68:	b8006b1e 	bne	r23,zero,8009c18 <__udivdi3+0x344>
 8009a6c:	3c011436 	bltu	r7,r16,8009ec0 <__udivdi3+0x5ec>
 8009a70:	9985403a 	cmpgeu	r2,r19,r6
 8009a74:	0007883a 	mov	r3,zero
 8009a78:	00004b06 	br	8009ba8 <__udivdi3+0x2d4>
 8009a7c:	3000041e 	bne	r6,zero,8009a90 <__udivdi3+0x1bc>
 8009a80:	01000044 	movi	r4,1
 8009a84:	000b883a 	mov	r5,zero
 8009a88:	800a64c0 	call	800a64c <__udivsi3>
 8009a8c:	1025883a 	mov	r18,r2
 8009a90:	00bfffd4 	movui	r2,65535
 8009a94:	14805b2e 	bgeu	r2,r18,8009c04 <__udivdi3+0x330>
 8009a98:	00804034 	movhi	r2,256
 8009a9c:	10bfffc4 	addi	r2,r2,-1
 8009aa0:	1480fe2e 	bgeu	r2,r18,8009e9c <__udivdi3+0x5c8>
 8009aa4:	00800604 	movi	r2,24
 8009aa8:	1007883a 	mov	r3,r2
 8009aac:	9084d83a 	srl	r2,r18,r2
 8009ab0:	01020074 	movhi	r4,2049
 8009ab4:	213e0704 	addi	r4,r4,-2020
 8009ab8:	2085883a 	add	r2,r4,r2
 8009abc:	11800003 	ldbu	r6,0(r2)
 8009ac0:	01c00804 	movi	r7,32
 8009ac4:	30c7883a 	add	r3,r6,r3
 8009ac8:	38cfc83a 	sub	r7,r7,r3
 8009acc:	3800a71e 	bne	r7,zero,8009d6c <__udivdi3+0x498>
 8009ad0:	9028d43a 	srli	r20,r18,16
 8009ad4:	84a1c83a 	sub	r16,r16,r18
 8009ad8:	957fffcc 	andi	r21,r18,65535
 8009adc:	00c00044 	movi	r3,1
 8009ae0:	8009883a 	mov	r4,r16
 8009ae4:	a00b883a 	mov	r5,r20
 8009ae8:	d8c00015 	stw	r3,0(sp)
 8009aec:	800a6540 	call	800a654 <__umodsi3>
 8009af0:	8009883a 	mov	r4,r16
 8009af4:	a00b883a 	mov	r5,r20
 8009af8:	102d883a 	mov	r22,r2
 8009afc:	800a64c0 	call	800a64c <__udivsi3>
 8009b00:	1009883a 	mov	r4,r2
 8009b04:	a80b883a 	mov	r5,r21
 8009b08:	1021883a 	mov	r16,r2
 8009b0c:	800a65c0 	call	800a65c <__mulsi3>
 8009b10:	b02c943a 	slli	r22,r22,16
 8009b14:	880ed43a 	srli	r7,r17,16
 8009b18:	d8c00017 	ldw	r3,0(sp)
 8009b1c:	b1ccb03a 	or	r6,r22,r7
 8009b20:	3080052e 	bgeu	r6,r2,8009b38 <__udivdi3+0x264>
 8009b24:	348d883a 	add	r6,r6,r18
 8009b28:	813fffc4 	addi	r4,r16,-1
 8009b2c:	34800136 	bltu	r6,r18,8009b34 <__udivdi3+0x260>
 8009b30:	3080f236 	bltu	r6,r2,8009efc <__udivdi3+0x628>
 8009b34:	2021883a 	mov	r16,r4
 8009b38:	30a7c83a 	sub	r19,r6,r2
 8009b3c:	9809883a 	mov	r4,r19
 8009b40:	a00b883a 	mov	r5,r20
 8009b44:	d8c00015 	stw	r3,0(sp)
 8009b48:	800a6540 	call	800a654 <__umodsi3>
 8009b4c:	102d883a 	mov	r22,r2
 8009b50:	9809883a 	mov	r4,r19
 8009b54:	a00b883a 	mov	r5,r20
 8009b58:	b02c943a 	slli	r22,r22,16
 8009b5c:	800a64c0 	call	800a64c <__udivsi3>
 8009b60:	1009883a 	mov	r4,r2
 8009b64:	a80b883a 	mov	r5,r21
 8009b68:	8c7fffcc 	andi	r17,r17,65535
 8009b6c:	1027883a 	mov	r19,r2
 8009b70:	b462b03a 	or	r17,r22,r17
 8009b74:	800a65c0 	call	800a65c <__mulsi3>
 8009b78:	d8c00017 	ldw	r3,0(sp)
 8009b7c:	8880052e 	bgeu	r17,r2,8009b94 <__udivdi3+0x2c0>
 8009b80:	8ca3883a 	add	r17,r17,r18
 8009b84:	993fffc4 	addi	r4,r19,-1
 8009b88:	8c80af36 	bltu	r17,r18,8009e48 <__udivdi3+0x574>
 8009b8c:	8880ae2e 	bgeu	r17,r2,8009e48 <__udivdi3+0x574>
 8009b90:	9cffff84 	addi	r19,r19,-2
 8009b94:	8020943a 	slli	r16,r16,16
 8009b98:	9c04b03a 	or	r2,r19,r16
 8009b9c:	00000206 	br	8009ba8 <__udivdi3+0x2d4>
 8009ba0:	0007883a 	mov	r3,zero
 8009ba4:	0005883a 	mov	r2,zero
 8009ba8:	dfc00a17 	ldw	ra,40(sp)
 8009bac:	df000917 	ldw	fp,36(sp)
 8009bb0:	ddc00817 	ldw	r23,32(sp)
 8009bb4:	dd800717 	ldw	r22,28(sp)
 8009bb8:	dd400617 	ldw	r21,24(sp)
 8009bbc:	dd000517 	ldw	r20,20(sp)
 8009bc0:	dcc00417 	ldw	r19,16(sp)
 8009bc4:	dc800317 	ldw	r18,12(sp)
 8009bc8:	dc400217 	ldw	r17,8(sp)
 8009bcc:	dc000117 	ldw	r16,4(sp)
 8009bd0:	dec00b04 	addi	sp,sp,44
 8009bd4:	f800283a 	ret
 8009bd8:	00803fc4 	movi	r2,255
 8009bdc:	11c0a92e 	bgeu	r2,r7,8009e84 <__udivdi3+0x5b0>
 8009be0:	01400204 	movi	r5,8
 8009be4:	2811883a 	mov	r8,r5
 8009be8:	003f9706 	br	8009a48 <__alt_data_end+0xfc009a48>
 8009bec:	00804034 	movhi	r2,256
 8009bf0:	10bfffc4 	addi	r2,r2,-1
 8009bf4:	1180a62e 	bgeu	r2,r6,8009e90 <__udivdi3+0x5bc>
 8009bf8:	00800604 	movi	r2,24
 8009bfc:	1007883a 	mov	r3,r2
 8009c00:	003f4c06 	br	8009934 <__alt_data_end+0xfc009934>
 8009c04:	00803fc4 	movi	r2,255
 8009c08:	1480a72e 	bgeu	r2,r18,8009ea8 <__udivdi3+0x5d4>
 8009c0c:	00800204 	movi	r2,8
 8009c10:	1007883a 	mov	r3,r2
 8009c14:	003fa506 	br	8009aac <__alt_data_end+0xfc009aac>
 8009c18:	3178d83a 	srl	fp,r6,r5
 8009c1c:	3dce983a 	sll	r7,r7,r23
 8009c20:	8168d83a 	srl	r20,r16,r5
 8009c24:	9950d83a 	srl	r8,r19,r5
 8009c28:	3f38b03a 	or	fp,r7,fp
 8009c2c:	e024d43a 	srli	r18,fp,16
 8009c30:	85e0983a 	sll	r16,r16,r23
 8009c34:	a009883a 	mov	r4,r20
 8009c38:	900b883a 	mov	r5,r18
 8009c3c:	8220b03a 	or	r16,r16,r8
 8009c40:	35ea983a 	sll	r21,r6,r23
 8009c44:	800a6540 	call	800a654 <__umodsi3>
 8009c48:	a009883a 	mov	r4,r20
 8009c4c:	900b883a 	mov	r5,r18
 8009c50:	1023883a 	mov	r17,r2
 8009c54:	e5bfffcc 	andi	r22,fp,65535
 8009c58:	800a64c0 	call	800a64c <__udivsi3>
 8009c5c:	1009883a 	mov	r4,r2
 8009c60:	b00b883a 	mov	r5,r22
 8009c64:	1029883a 	mov	r20,r2
 8009c68:	800a65c0 	call	800a65c <__mulsi3>
 8009c6c:	8806943a 	slli	r3,r17,16
 8009c70:	8014d43a 	srli	r10,r16,16
 8009c74:	1a92b03a 	or	r9,r3,r10
 8009c78:	4880042e 	bgeu	r9,r2,8009c8c <__udivdi3+0x3b8>
 8009c7c:	4f13883a 	add	r9,r9,fp
 8009c80:	a0ffffc4 	addi	r3,r20,-1
 8009c84:	4f00952e 	bgeu	r9,fp,8009edc <__udivdi3+0x608>
 8009c88:	1829883a 	mov	r20,r3
 8009c8c:	48a3c83a 	sub	r17,r9,r2
 8009c90:	8809883a 	mov	r4,r17
 8009c94:	900b883a 	mov	r5,r18
 8009c98:	800a6540 	call	800a654 <__umodsi3>
 8009c9c:	8809883a 	mov	r4,r17
 8009ca0:	900b883a 	mov	r5,r18
 8009ca4:	d8800015 	stw	r2,0(sp)
 8009ca8:	800a64c0 	call	800a64c <__udivsi3>
 8009cac:	1009883a 	mov	r4,r2
 8009cb0:	b00b883a 	mov	r5,r22
 8009cb4:	1023883a 	mov	r17,r2
 8009cb8:	800a65c0 	call	800a65c <__mulsi3>
 8009cbc:	d8c00017 	ldw	r3,0(sp)
 8009cc0:	823fffcc 	andi	r8,r16,65535
 8009cc4:	1806943a 	slli	r3,r3,16
 8009cc8:	1a20b03a 	or	r16,r3,r8
 8009ccc:	8080042e 	bgeu	r16,r2,8009ce0 <__udivdi3+0x40c>
 8009cd0:	8721883a 	add	r16,r16,fp
 8009cd4:	88ffffc4 	addi	r3,r17,-1
 8009cd8:	87007c2e 	bgeu	r16,fp,8009ecc <__udivdi3+0x5f8>
 8009cdc:	1823883a 	mov	r17,r3
 8009ce0:	a028943a 	slli	r20,r20,16
 8009ce4:	acbfffcc 	andi	r18,r21,65535
 8009ce8:	900b883a 	mov	r5,r18
 8009cec:	8d28b03a 	or	r20,r17,r20
 8009cf0:	a022d43a 	srli	r17,r20,16
 8009cf4:	a5bfffcc 	andi	r22,r20,65535
 8009cf8:	b009883a 	mov	r4,r22
 8009cfc:	a82ad43a 	srli	r21,r21,16
 8009d00:	80a1c83a 	sub	r16,r16,r2
 8009d04:	800a65c0 	call	800a65c <__mulsi3>
 8009d08:	8809883a 	mov	r4,r17
 8009d0c:	900b883a 	mov	r5,r18
 8009d10:	1039883a 	mov	fp,r2
 8009d14:	800a65c0 	call	800a65c <__mulsi3>
 8009d18:	8809883a 	mov	r4,r17
 8009d1c:	a80b883a 	mov	r5,r21
 8009d20:	1025883a 	mov	r18,r2
 8009d24:	800a65c0 	call	800a65c <__mulsi3>
 8009d28:	b009883a 	mov	r4,r22
 8009d2c:	a80b883a 	mov	r5,r21
 8009d30:	1023883a 	mov	r17,r2
 8009d34:	800a65c0 	call	800a65c <__mulsi3>
 8009d38:	e006d43a 	srli	r3,fp,16
 8009d3c:	9085883a 	add	r2,r18,r2
 8009d40:	10c7883a 	add	r3,r2,r3
 8009d44:	1c80022e 	bgeu	r3,r18,8009d50 <__udivdi3+0x47c>
 8009d48:	00800074 	movhi	r2,1
 8009d4c:	88a3883a 	add	r17,r17,r2
 8009d50:	1808d43a 	srli	r4,r3,16
 8009d54:	8909883a 	add	r4,r17,r4
 8009d58:	81004436 	bltu	r16,r4,8009e6c <__udivdi3+0x598>
 8009d5c:	81003e26 	beq	r16,r4,8009e58 <__udivdi3+0x584>
 8009d60:	a005883a 	mov	r2,r20
 8009d64:	0007883a 	mov	r3,zero
 8009d68:	003f8f06 	br	8009ba8 <__alt_data_end+0xfc009ba8>
 8009d6c:	91e4983a 	sll	r18,r18,r7
 8009d70:	80eed83a 	srl	r23,r16,r3
 8009d74:	81cc983a 	sll	r6,r16,r7
 8009d78:	9028d43a 	srli	r20,r18,16
 8009d7c:	98c6d83a 	srl	r3,r19,r3
 8009d80:	b809883a 	mov	r4,r23
 8009d84:	a00b883a 	mov	r5,r20
 8009d88:	30ecb03a 	or	r22,r6,r3
 8009d8c:	99e2983a 	sll	r17,r19,r7
 8009d90:	800a6540 	call	800a654 <__umodsi3>
 8009d94:	b809883a 	mov	r4,r23
 8009d98:	a00b883a 	mov	r5,r20
 8009d9c:	1021883a 	mov	r16,r2
 8009da0:	957fffcc 	andi	r21,r18,65535
 8009da4:	800a64c0 	call	800a64c <__udivsi3>
 8009da8:	a80b883a 	mov	r5,r21
 8009dac:	1009883a 	mov	r4,r2
 8009db0:	102f883a 	mov	r23,r2
 8009db4:	800a65c0 	call	800a65c <__mulsi3>
 8009db8:	8020943a 	slli	r16,r16,16
 8009dbc:	b00ad43a 	srli	r5,r22,16
 8009dc0:	814cb03a 	or	r6,r16,r5
 8009dc4:	3080062e 	bgeu	r6,r2,8009de0 <__udivdi3+0x50c>
 8009dc8:	348d883a 	add	r6,r6,r18
 8009dcc:	b8ffffc4 	addi	r3,r23,-1
 8009dd0:	34804836 	bltu	r6,r18,8009ef4 <__udivdi3+0x620>
 8009dd4:	3080472e 	bgeu	r6,r2,8009ef4 <__udivdi3+0x620>
 8009dd8:	bdffff84 	addi	r23,r23,-2
 8009ddc:	348d883a 	add	r6,r6,r18
 8009de0:	30a7c83a 	sub	r19,r6,r2
 8009de4:	9809883a 	mov	r4,r19
 8009de8:	a00b883a 	mov	r5,r20
 8009dec:	800a6540 	call	800a654 <__umodsi3>
 8009df0:	9809883a 	mov	r4,r19
 8009df4:	a00b883a 	mov	r5,r20
 8009df8:	1039883a 	mov	fp,r2
 8009dfc:	800a64c0 	call	800a64c <__udivsi3>
 8009e00:	1009883a 	mov	r4,r2
 8009e04:	a80b883a 	mov	r5,r21
 8009e08:	e038943a 	slli	fp,fp,16
 8009e0c:	1027883a 	mov	r19,r2
 8009e10:	800a65c0 	call	800a65c <__mulsi3>
 8009e14:	b1bfffcc 	andi	r6,r22,65535
 8009e18:	e18cb03a 	or	r6,fp,r6
 8009e1c:	3080062e 	bgeu	r6,r2,8009e38 <__udivdi3+0x564>
 8009e20:	348d883a 	add	r6,r6,r18
 8009e24:	98ffffc4 	addi	r3,r19,-1
 8009e28:	34803036 	bltu	r6,r18,8009eec <__udivdi3+0x618>
 8009e2c:	30802f2e 	bgeu	r6,r2,8009eec <__udivdi3+0x618>
 8009e30:	9cffff84 	addi	r19,r19,-2
 8009e34:	348d883a 	add	r6,r6,r18
 8009e38:	b82e943a 	slli	r23,r23,16
 8009e3c:	30a1c83a 	sub	r16,r6,r2
 8009e40:	9dc6b03a 	or	r3,r19,r23
 8009e44:	003f2606 	br	8009ae0 <__alt_data_end+0xfc009ae0>
 8009e48:	2027883a 	mov	r19,r4
 8009e4c:	003f5106 	br	8009b94 <__alt_data_end+0xfc009b94>
 8009e50:	1827883a 	mov	r19,r3
 8009e54:	003ef006 	br	8009a18 <__alt_data_end+0xfc009a18>
 8009e58:	1808943a 	slli	r4,r3,16
 8009e5c:	9dc6983a 	sll	r3,r19,r23
 8009e60:	e73fffcc 	andi	fp,fp,65535
 8009e64:	2709883a 	add	r4,r4,fp
 8009e68:	193fbd2e 	bgeu	r3,r4,8009d60 <__alt_data_end+0xfc009d60>
 8009e6c:	a0bfffc4 	addi	r2,r20,-1
 8009e70:	0007883a 	mov	r3,zero
 8009e74:	003f4c06 	br	8009ba8 <__alt_data_end+0xfc009ba8>
 8009e78:	01400404 	movi	r5,16
 8009e7c:	2811883a 	mov	r8,r5
 8009e80:	003ef106 	br	8009a48 <__alt_data_end+0xfc009a48>
 8009e84:	000b883a 	mov	r5,zero
 8009e88:	0011883a 	mov	r8,zero
 8009e8c:	003eee06 	br	8009a48 <__alt_data_end+0xfc009a48>
 8009e90:	00800404 	movi	r2,16
 8009e94:	1007883a 	mov	r3,r2
 8009e98:	003ea606 	br	8009934 <__alt_data_end+0xfc009934>
 8009e9c:	00800404 	movi	r2,16
 8009ea0:	1007883a 	mov	r3,r2
 8009ea4:	003f0106 	br	8009aac <__alt_data_end+0xfc009aac>
 8009ea8:	0005883a 	mov	r2,zero
 8009eac:	0007883a 	mov	r3,zero
 8009eb0:	003efe06 	br	8009aac <__alt_data_end+0xfc009aac>
 8009eb4:	0005883a 	mov	r2,zero
 8009eb8:	0007883a 	mov	r3,zero
 8009ebc:	003e9d06 	br	8009934 <__alt_data_end+0xfc009934>
 8009ec0:	0007883a 	mov	r3,zero
 8009ec4:	00800044 	movi	r2,1
 8009ec8:	003f3706 	br	8009ba8 <__alt_data_end+0xfc009ba8>
 8009ecc:	80bf832e 	bgeu	r16,r2,8009cdc <__alt_data_end+0xfc009cdc>
 8009ed0:	8c7fff84 	addi	r17,r17,-2
 8009ed4:	8721883a 	add	r16,r16,fp
 8009ed8:	003f8106 	br	8009ce0 <__alt_data_end+0xfc009ce0>
 8009edc:	48bf6a2e 	bgeu	r9,r2,8009c88 <__alt_data_end+0xfc009c88>
 8009ee0:	a53fff84 	addi	r20,r20,-2
 8009ee4:	4f13883a 	add	r9,r9,fp
 8009ee8:	003f6806 	br	8009c8c <__alt_data_end+0xfc009c8c>
 8009eec:	1827883a 	mov	r19,r3
 8009ef0:	003fd106 	br	8009e38 <__alt_data_end+0xfc009e38>
 8009ef4:	182f883a 	mov	r23,r3
 8009ef8:	003fb906 	br	8009de0 <__alt_data_end+0xfc009de0>
 8009efc:	843fff84 	addi	r16,r16,-2
 8009f00:	348d883a 	add	r6,r6,r18
 8009f04:	003f0c06 	br	8009b38 <__alt_data_end+0xfc009b38>
 8009f08:	843fff84 	addi	r16,r16,-2
 8009f0c:	1c87883a 	add	r3,r3,r18
 8009f10:	003eac06 	br	80099c4 <__alt_data_end+0xfc0099c4>

08009f14 <__umoddi3>:
 8009f14:	defff404 	addi	sp,sp,-48
 8009f18:	dd800815 	stw	r22,32(sp)
 8009f1c:	dc400315 	stw	r17,12(sp)
 8009f20:	dc000215 	stw	r16,8(sp)
 8009f24:	dfc00b15 	stw	ra,44(sp)
 8009f28:	df000a15 	stw	fp,40(sp)
 8009f2c:	ddc00915 	stw	r23,36(sp)
 8009f30:	dd400715 	stw	r21,28(sp)
 8009f34:	dd000615 	stw	r20,24(sp)
 8009f38:	dcc00515 	stw	r19,20(sp)
 8009f3c:	dc800415 	stw	r18,16(sp)
 8009f40:	2021883a 	mov	r16,r4
 8009f44:	2823883a 	mov	r17,r5
 8009f48:	282d883a 	mov	r22,r5
 8009f4c:	38003c1e 	bne	r7,zero,800a040 <__umoddi3+0x12c>
 8009f50:	3027883a 	mov	r19,r6
 8009f54:	2029883a 	mov	r20,r4
 8009f58:	2980522e 	bgeu	r5,r6,800a0a4 <__umoddi3+0x190>
 8009f5c:	00bfffd4 	movui	r2,65535
 8009f60:	1180a436 	bltu	r2,r6,800a1f4 <__umoddi3+0x2e0>
 8009f64:	00803fc4 	movi	r2,255
 8009f68:	11815e2e 	bgeu	r2,r6,800a4e4 <__umoddi3+0x5d0>
 8009f6c:	01400204 	movi	r5,8
 8009f70:	2805883a 	mov	r2,r5
 8009f74:	314ad83a 	srl	r5,r6,r5
 8009f78:	00c20074 	movhi	r3,2049
 8009f7c:	18fe0704 	addi	r3,r3,-2020
 8009f80:	194b883a 	add	r5,r3,r5
 8009f84:	29000003 	ldbu	r4,0(r5)
 8009f88:	2089883a 	add	r4,r4,r2
 8009f8c:	00800804 	movi	r2,32
 8009f90:	1105c83a 	sub	r2,r2,r4
 8009f94:	10010c26 	beq	r2,zero,800a3c8 <__umoddi3+0x4b4>
 8009f98:	88a2983a 	sll	r17,r17,r2
 8009f9c:	8108d83a 	srl	r4,r16,r4
 8009fa0:	30a6983a 	sll	r19,r6,r2
 8009fa4:	80a8983a 	sll	r20,r16,r2
 8009fa8:	1025883a 	mov	r18,r2
 8009fac:	892cb03a 	or	r22,r17,r4
 8009fb0:	9822d43a 	srli	r17,r19,16
 8009fb4:	b009883a 	mov	r4,r22
 8009fb8:	9d7fffcc 	andi	r21,r19,65535
 8009fbc:	880b883a 	mov	r5,r17
 8009fc0:	800a6540 	call	800a654 <__umodsi3>
 8009fc4:	b009883a 	mov	r4,r22
 8009fc8:	880b883a 	mov	r5,r17
 8009fcc:	102f883a 	mov	r23,r2
 8009fd0:	800a64c0 	call	800a64c <__udivsi3>
 8009fd4:	1009883a 	mov	r4,r2
 8009fd8:	a80b883a 	mov	r5,r21
 8009fdc:	800a65c0 	call	800a65c <__mulsi3>
 8009fe0:	b82e943a 	slli	r23,r23,16
 8009fe4:	a008d43a 	srli	r4,r20,16
 8009fe8:	b906b03a 	or	r3,r23,r4
 8009fec:	1880042e 	bgeu	r3,r2,800a000 <__umoddi3+0xec>
 8009ff0:	1cc7883a 	add	r3,r3,r19
 8009ff4:	1cc00236 	bltu	r3,r19,800a000 <__umoddi3+0xec>
 8009ff8:	1880012e 	bgeu	r3,r2,800a000 <__umoddi3+0xec>
 8009ffc:	1cc7883a 	add	r3,r3,r19
 800a000:	18a1c83a 	sub	r16,r3,r2
 800a004:	8009883a 	mov	r4,r16
 800a008:	880b883a 	mov	r5,r17
 800a00c:	800a6540 	call	800a654 <__umodsi3>
 800a010:	8009883a 	mov	r4,r16
 800a014:	880b883a 	mov	r5,r17
 800a018:	102d883a 	mov	r22,r2
 800a01c:	800a64c0 	call	800a64c <__udivsi3>
 800a020:	1009883a 	mov	r4,r2
 800a024:	a80b883a 	mov	r5,r21
 800a028:	b02c943a 	slli	r22,r22,16
 800a02c:	800a65c0 	call	800a65c <__mulsi3>
 800a030:	a13fffcc 	andi	r4,r20,65535
 800a034:	b106b03a 	or	r3,r22,r4
 800a038:	1880572e 	bgeu	r3,r2,800a198 <__umoddi3+0x284>
 800a03c:	00005206 	br	800a188 <__umoddi3+0x274>
 800a040:	29c05936 	bltu	r5,r7,800a1a8 <__umoddi3+0x294>
 800a044:	00bfffd4 	movui	r2,65535
 800a048:	11c0652e 	bgeu	r2,r7,800a1e0 <__umoddi3+0x2cc>
 800a04c:	00804034 	movhi	r2,256
 800a050:	10bfffc4 	addi	r2,r2,-1
 800a054:	11c1172e 	bgeu	r2,r7,800a4b4 <__umoddi3+0x5a0>
 800a058:	01400604 	movi	r5,24
 800a05c:	282b883a 	mov	r21,r5
 800a060:	394ad83a 	srl	r5,r7,r5
 800a064:	00c20074 	movhi	r3,2049
 800a068:	18fe0704 	addi	r3,r3,-2020
 800a06c:	194b883a 	add	r5,r3,r5
 800a070:	28800003 	ldbu	r2,0(r5)
 800a074:	00c00804 	movi	r3,32
 800a078:	156b883a 	add	r21,r2,r21
 800a07c:	1d69c83a 	sub	r20,r3,r21
 800a080:	a000671e 	bne	r20,zero,800a220 <__umoddi3+0x30c>
 800a084:	3c400136 	bltu	r7,r17,800a08c <__umoddi3+0x178>
 800a088:	81812336 	bltu	r16,r6,800a518 <__umoddi3+0x604>
 800a08c:	8185c83a 	sub	r2,r16,r6
 800a090:	89e3c83a 	sub	r17,r17,r7
 800a094:	8087803a 	cmpltu	r3,r16,r2
 800a098:	88edc83a 	sub	r22,r17,r3
 800a09c:	b007883a 	mov	r3,r22
 800a0a0:	00004306 	br	800a1b0 <__umoddi3+0x29c>
 800a0a4:	3000041e 	bne	r6,zero,800a0b8 <__umoddi3+0x1a4>
 800a0a8:	01000044 	movi	r4,1
 800a0ac:	000b883a 	mov	r5,zero
 800a0b0:	800a64c0 	call	800a64c <__udivsi3>
 800a0b4:	1027883a 	mov	r19,r2
 800a0b8:	00bfffd4 	movui	r2,65535
 800a0bc:	14c0532e 	bgeu	r2,r19,800a20c <__umoddi3+0x2f8>
 800a0c0:	00804034 	movhi	r2,256
 800a0c4:	10bfffc4 	addi	r2,r2,-1
 800a0c8:	14c1032e 	bgeu	r2,r19,800a4d8 <__umoddi3+0x5c4>
 800a0cc:	00800604 	movi	r2,24
 800a0d0:	1007883a 	mov	r3,r2
 800a0d4:	9884d83a 	srl	r2,r19,r2
 800a0d8:	01020074 	movhi	r4,2049
 800a0dc:	213e0704 	addi	r4,r4,-2020
 800a0e0:	2085883a 	add	r2,r4,r2
 800a0e4:	11000003 	ldbu	r4,0(r2)
 800a0e8:	00800804 	movi	r2,32
 800a0ec:	20c7883a 	add	r3,r4,r3
 800a0f0:	10c5c83a 	sub	r2,r2,r3
 800a0f4:	1000b61e 	bne	r2,zero,800a3d0 <__umoddi3+0x4bc>
 800a0f8:	982ad43a 	srli	r21,r19,16
 800a0fc:	8ce3c83a 	sub	r17,r17,r19
 800a100:	9dbfffcc 	andi	r22,r19,65535
 800a104:	0025883a 	mov	r18,zero
 800a108:	8809883a 	mov	r4,r17
 800a10c:	a80b883a 	mov	r5,r21
 800a110:	800a6540 	call	800a654 <__umodsi3>
 800a114:	8809883a 	mov	r4,r17
 800a118:	a80b883a 	mov	r5,r21
 800a11c:	102f883a 	mov	r23,r2
 800a120:	800a64c0 	call	800a64c <__udivsi3>
 800a124:	1009883a 	mov	r4,r2
 800a128:	b00b883a 	mov	r5,r22
 800a12c:	800a65c0 	call	800a65c <__mulsi3>
 800a130:	b82e943a 	slli	r23,r23,16
 800a134:	a008d43a 	srli	r4,r20,16
 800a138:	b906b03a 	or	r3,r23,r4
 800a13c:	1880032e 	bgeu	r3,r2,800a14c <__umoddi3+0x238>
 800a140:	1cc7883a 	add	r3,r3,r19
 800a144:	1cc00136 	bltu	r3,r19,800a14c <__umoddi3+0x238>
 800a148:	1880f136 	bltu	r3,r2,800a510 <__umoddi3+0x5fc>
 800a14c:	18a1c83a 	sub	r16,r3,r2
 800a150:	8009883a 	mov	r4,r16
 800a154:	a80b883a 	mov	r5,r21
 800a158:	800a6540 	call	800a654 <__umodsi3>
 800a15c:	8009883a 	mov	r4,r16
 800a160:	a80b883a 	mov	r5,r21
 800a164:	1023883a 	mov	r17,r2
 800a168:	800a64c0 	call	800a64c <__udivsi3>
 800a16c:	1009883a 	mov	r4,r2
 800a170:	b00b883a 	mov	r5,r22
 800a174:	8822943a 	slli	r17,r17,16
 800a178:	800a65c0 	call	800a65c <__mulsi3>
 800a17c:	a13fffcc 	andi	r4,r20,65535
 800a180:	8906b03a 	or	r3,r17,r4
 800a184:	1880042e 	bgeu	r3,r2,800a198 <__umoddi3+0x284>
 800a188:	1cc7883a 	add	r3,r3,r19
 800a18c:	1cc00236 	bltu	r3,r19,800a198 <__umoddi3+0x284>
 800a190:	1880012e 	bgeu	r3,r2,800a198 <__umoddi3+0x284>
 800a194:	1cc7883a 	add	r3,r3,r19
 800a198:	1887c83a 	sub	r3,r3,r2
 800a19c:	1c84d83a 	srl	r2,r3,r18
 800a1a0:	0007883a 	mov	r3,zero
 800a1a4:	00000206 	br	800a1b0 <__umoddi3+0x29c>
 800a1a8:	2005883a 	mov	r2,r4
 800a1ac:	2807883a 	mov	r3,r5
 800a1b0:	dfc00b17 	ldw	ra,44(sp)
 800a1b4:	df000a17 	ldw	fp,40(sp)
 800a1b8:	ddc00917 	ldw	r23,36(sp)
 800a1bc:	dd800817 	ldw	r22,32(sp)
 800a1c0:	dd400717 	ldw	r21,28(sp)
 800a1c4:	dd000617 	ldw	r20,24(sp)
 800a1c8:	dcc00517 	ldw	r19,20(sp)
 800a1cc:	dc800417 	ldw	r18,16(sp)
 800a1d0:	dc400317 	ldw	r17,12(sp)
 800a1d4:	dc000217 	ldw	r16,8(sp)
 800a1d8:	dec00c04 	addi	sp,sp,48
 800a1dc:	f800283a 	ret
 800a1e0:	00803fc4 	movi	r2,255
 800a1e4:	11c0b02e 	bgeu	r2,r7,800a4a8 <__umoddi3+0x594>
 800a1e8:	01400204 	movi	r5,8
 800a1ec:	282b883a 	mov	r21,r5
 800a1f0:	003f9b06 	br	800a060 <__alt_data_end+0xfc00a060>
 800a1f4:	00804034 	movhi	r2,256
 800a1f8:	10bfffc4 	addi	r2,r2,-1
 800a1fc:	1180b02e 	bgeu	r2,r6,800a4c0 <__umoddi3+0x5ac>
 800a200:	01400604 	movi	r5,24
 800a204:	2805883a 	mov	r2,r5
 800a208:	003f5a06 	br	8009f74 <__alt_data_end+0xfc009f74>
 800a20c:	00803fc4 	movi	r2,255
 800a210:	14c0ae2e 	bgeu	r2,r19,800a4cc <__umoddi3+0x5b8>
 800a214:	00800204 	movi	r2,8
 800a218:	1007883a 	mov	r3,r2
 800a21c:	003fad06 	br	800a0d4 <__alt_data_end+0xfc00a0d4>
 800a220:	3d0a983a 	sll	r5,r7,r20
 800a224:	356cd83a 	srl	r22,r6,r21
 800a228:	8d78d83a 	srl	fp,r17,r21
 800a22c:	8d10983a 	sll	r8,r17,r20
 800a230:	2dacb03a 	or	r22,r5,r22
 800a234:	b02ed43a 	srli	r23,r22,16
 800a238:	8564d83a 	srl	r18,r16,r21
 800a23c:	e009883a 	mov	r4,fp
 800a240:	b80b883a 	mov	r5,r23
 800a244:	44a4b03a 	or	r18,r8,r18
 800a248:	3526983a 	sll	r19,r6,r20
 800a24c:	800a6540 	call	800a654 <__umodsi3>
 800a250:	e009883a 	mov	r4,fp
 800a254:	b80b883a 	mov	r5,r23
 800a258:	b47fffcc 	andi	r17,r22,65535
 800a25c:	d8800015 	stw	r2,0(sp)
 800a260:	800a64c0 	call	800a64c <__udivsi3>
 800a264:	1009883a 	mov	r4,r2
 800a268:	880b883a 	mov	r5,r17
 800a26c:	1039883a 	mov	fp,r2
 800a270:	800a65c0 	call	800a65c <__mulsi3>
 800a274:	d9800017 	ldw	r6,0(sp)
 800a278:	9008d43a 	srli	r4,r18,16
 800a27c:	8520983a 	sll	r16,r16,r20
 800a280:	300c943a 	slli	r6,r6,16
 800a284:	3106b03a 	or	r3,r6,r4
 800a288:	1880042e 	bgeu	r3,r2,800a29c <__umoddi3+0x388>
 800a28c:	1d87883a 	add	r3,r3,r22
 800a290:	e13fffc4 	addi	r4,fp,-1
 800a294:	1d809a2e 	bgeu	r3,r22,800a500 <__umoddi3+0x5ec>
 800a298:	2039883a 	mov	fp,r4
 800a29c:	1887c83a 	sub	r3,r3,r2
 800a2a0:	1809883a 	mov	r4,r3
 800a2a4:	b80b883a 	mov	r5,r23
 800a2a8:	d8c00115 	stw	r3,4(sp)
 800a2ac:	800a6540 	call	800a654 <__umodsi3>
 800a2b0:	d8c00117 	ldw	r3,4(sp)
 800a2b4:	b80b883a 	mov	r5,r23
 800a2b8:	d8800015 	stw	r2,0(sp)
 800a2bc:	1809883a 	mov	r4,r3
 800a2c0:	800a64c0 	call	800a64c <__udivsi3>
 800a2c4:	880b883a 	mov	r5,r17
 800a2c8:	1009883a 	mov	r4,r2
 800a2cc:	102f883a 	mov	r23,r2
 800a2d0:	800a65c0 	call	800a65c <__mulsi3>
 800a2d4:	d9800017 	ldw	r6,0(sp)
 800a2d8:	947fffcc 	andi	r17,r18,65535
 800a2dc:	300c943a 	slli	r6,r6,16
 800a2e0:	3464b03a 	or	r18,r6,r17
 800a2e4:	9080042e 	bgeu	r18,r2,800a2f8 <__umoddi3+0x3e4>
 800a2e8:	95a5883a 	add	r18,r18,r22
 800a2ec:	b8ffffc4 	addi	r3,r23,-1
 800a2f0:	95807f2e 	bgeu	r18,r22,800a4f0 <__umoddi3+0x5dc>
 800a2f4:	182f883a 	mov	r23,r3
 800a2f8:	e038943a 	slli	fp,fp,16
 800a2fc:	980cd43a 	srli	r6,r19,16
 800a300:	98ffffcc 	andi	r3,r19,65535
 800a304:	bf38b03a 	or	fp,r23,fp
 800a308:	e02ed43a 	srli	r23,fp,16
 800a30c:	e73fffcc 	andi	fp,fp,65535
 800a310:	180b883a 	mov	r5,r3
 800a314:	e009883a 	mov	r4,fp
 800a318:	d9800015 	stw	r6,0(sp)
 800a31c:	d8c00115 	stw	r3,4(sp)
 800a320:	90a5c83a 	sub	r18,r18,r2
 800a324:	800a65c0 	call	800a65c <__mulsi3>
 800a328:	d8c00117 	ldw	r3,4(sp)
 800a32c:	b809883a 	mov	r4,r23
 800a330:	1023883a 	mov	r17,r2
 800a334:	180b883a 	mov	r5,r3
 800a338:	800a65c0 	call	800a65c <__mulsi3>
 800a33c:	d9800017 	ldw	r6,0(sp)
 800a340:	b809883a 	mov	r4,r23
 800a344:	d8800115 	stw	r2,4(sp)
 800a348:	300b883a 	mov	r5,r6
 800a34c:	302f883a 	mov	r23,r6
 800a350:	800a65c0 	call	800a65c <__mulsi3>
 800a354:	e009883a 	mov	r4,fp
 800a358:	b80b883a 	mov	r5,r23
 800a35c:	d8800015 	stw	r2,0(sp)
 800a360:	800a65c0 	call	800a65c <__mulsi3>
 800a364:	d8c00117 	ldw	r3,4(sp)
 800a368:	880cd43a 	srli	r6,r17,16
 800a36c:	d9c00017 	ldw	r7,0(sp)
 800a370:	1885883a 	add	r2,r3,r2
 800a374:	118d883a 	add	r6,r2,r6
 800a378:	30c0022e 	bgeu	r6,r3,800a384 <__umoddi3+0x470>
 800a37c:	00800074 	movhi	r2,1
 800a380:	388f883a 	add	r7,r7,r2
 800a384:	3006d43a 	srli	r3,r6,16
 800a388:	300c943a 	slli	r6,r6,16
 800a38c:	8c7fffcc 	andi	r17,r17,65535
 800a390:	38c7883a 	add	r3,r7,r3
 800a394:	3463883a 	add	r17,r6,r17
 800a398:	90c03d36 	bltu	r18,r3,800a490 <__umoddi3+0x57c>
 800a39c:	90c06026 	beq	r18,r3,800a520 <__umoddi3+0x60c>
 800a3a0:	90c9c83a 	sub	r4,r18,r3
 800a3a4:	880f883a 	mov	r7,r17
 800a3a8:	81cfc83a 	sub	r7,r16,r7
 800a3ac:	81c7803a 	cmpltu	r3,r16,r7
 800a3b0:	20c7c83a 	sub	r3,r4,r3
 800a3b4:	1d44983a 	sll	r2,r3,r21
 800a3b8:	3d0ed83a 	srl	r7,r7,r20
 800a3bc:	1d06d83a 	srl	r3,r3,r20
 800a3c0:	11c4b03a 	or	r2,r2,r7
 800a3c4:	003f7a06 	br	800a1b0 <__alt_data_end+0xfc00a1b0>
 800a3c8:	0025883a 	mov	r18,zero
 800a3cc:	003ef806 	br	8009fb0 <__alt_data_end+0xfc009fb0>
 800a3d0:	98a6983a 	sll	r19,r19,r2
 800a3d4:	88e8d83a 	srl	r20,r17,r3
 800a3d8:	80c6d83a 	srl	r3,r16,r3
 800a3dc:	982ad43a 	srli	r21,r19,16
 800a3e0:	88a2983a 	sll	r17,r17,r2
 800a3e4:	a009883a 	mov	r4,r20
 800a3e8:	a80b883a 	mov	r5,r21
 800a3ec:	88eeb03a 	or	r23,r17,r3
 800a3f0:	1025883a 	mov	r18,r2
 800a3f4:	800a6540 	call	800a654 <__umodsi3>
 800a3f8:	a009883a 	mov	r4,r20
 800a3fc:	a80b883a 	mov	r5,r21
 800a400:	1023883a 	mov	r17,r2
 800a404:	9dbfffcc 	andi	r22,r19,65535
 800a408:	800a64c0 	call	800a64c <__udivsi3>
 800a40c:	1009883a 	mov	r4,r2
 800a410:	b00b883a 	mov	r5,r22
 800a414:	800a65c0 	call	800a65c <__mulsi3>
 800a418:	8822943a 	slli	r17,r17,16
 800a41c:	b808d43a 	srli	r4,r23,16
 800a420:	84a8983a 	sll	r20,r16,r18
 800a424:	8906b03a 	or	r3,r17,r4
 800a428:	1880042e 	bgeu	r3,r2,800a43c <__umoddi3+0x528>
 800a42c:	1cc7883a 	add	r3,r3,r19
 800a430:	1cc00236 	bltu	r3,r19,800a43c <__umoddi3+0x528>
 800a434:	1880012e 	bgeu	r3,r2,800a43c <__umoddi3+0x528>
 800a438:	1cc7883a 	add	r3,r3,r19
 800a43c:	18a1c83a 	sub	r16,r3,r2
 800a440:	8009883a 	mov	r4,r16
 800a444:	a80b883a 	mov	r5,r21
 800a448:	800a6540 	call	800a654 <__umodsi3>
 800a44c:	8009883a 	mov	r4,r16
 800a450:	a80b883a 	mov	r5,r21
 800a454:	1039883a 	mov	fp,r2
 800a458:	800a64c0 	call	800a64c <__udivsi3>
 800a45c:	1009883a 	mov	r4,r2
 800a460:	b00b883a 	mov	r5,r22
 800a464:	800a65c0 	call	800a65c <__mulsi3>
 800a468:	e006943a 	slli	r3,fp,16
 800a46c:	b93fffcc 	andi	r4,r23,65535
 800a470:	1906b03a 	or	r3,r3,r4
 800a474:	1880042e 	bgeu	r3,r2,800a488 <__umoddi3+0x574>
 800a478:	1cc7883a 	add	r3,r3,r19
 800a47c:	1cc00236 	bltu	r3,r19,800a488 <__umoddi3+0x574>
 800a480:	1880012e 	bgeu	r3,r2,800a488 <__umoddi3+0x574>
 800a484:	1cc7883a 	add	r3,r3,r19
 800a488:	18a3c83a 	sub	r17,r3,r2
 800a48c:	003f1e06 	br	800a108 <__alt_data_end+0xfc00a108>
 800a490:	8ccfc83a 	sub	r7,r17,r19
 800a494:	1d89c83a 	sub	r4,r3,r22
 800a498:	89e3803a 	cmpltu	r17,r17,r7
 800a49c:	2463c83a 	sub	r17,r4,r17
 800a4a0:	9449c83a 	sub	r4,r18,r17
 800a4a4:	003fc006 	br	800a3a8 <__alt_data_end+0xfc00a3a8>
 800a4a8:	000b883a 	mov	r5,zero
 800a4ac:	002b883a 	mov	r21,zero
 800a4b0:	003eeb06 	br	800a060 <__alt_data_end+0xfc00a060>
 800a4b4:	01400404 	movi	r5,16
 800a4b8:	282b883a 	mov	r21,r5
 800a4bc:	003ee806 	br	800a060 <__alt_data_end+0xfc00a060>
 800a4c0:	01400404 	movi	r5,16
 800a4c4:	2805883a 	mov	r2,r5
 800a4c8:	003eaa06 	br	8009f74 <__alt_data_end+0xfc009f74>
 800a4cc:	0005883a 	mov	r2,zero
 800a4d0:	0007883a 	mov	r3,zero
 800a4d4:	003eff06 	br	800a0d4 <__alt_data_end+0xfc00a0d4>
 800a4d8:	00800404 	movi	r2,16
 800a4dc:	1007883a 	mov	r3,r2
 800a4e0:	003efc06 	br	800a0d4 <__alt_data_end+0xfc00a0d4>
 800a4e4:	000b883a 	mov	r5,zero
 800a4e8:	0005883a 	mov	r2,zero
 800a4ec:	003ea106 	br	8009f74 <__alt_data_end+0xfc009f74>
 800a4f0:	90bf802e 	bgeu	r18,r2,800a2f4 <__alt_data_end+0xfc00a2f4>
 800a4f4:	bdffff84 	addi	r23,r23,-2
 800a4f8:	95a5883a 	add	r18,r18,r22
 800a4fc:	003f7e06 	br	800a2f8 <__alt_data_end+0xfc00a2f8>
 800a500:	18bf652e 	bgeu	r3,r2,800a298 <__alt_data_end+0xfc00a298>
 800a504:	e73fff84 	addi	fp,fp,-2
 800a508:	1d87883a 	add	r3,r3,r22
 800a50c:	003f6306 	br	800a29c <__alt_data_end+0xfc00a29c>
 800a510:	1cc7883a 	add	r3,r3,r19
 800a514:	003f0d06 	br	800a14c <__alt_data_end+0xfc00a14c>
 800a518:	8005883a 	mov	r2,r16
 800a51c:	003edf06 	br	800a09c <__alt_data_end+0xfc00a09c>
 800a520:	847fdb36 	bltu	r16,r17,800a490 <__alt_data_end+0xfc00a490>
 800a524:	880f883a 	mov	r7,r17
 800a528:	0009883a 	mov	r4,zero
 800a52c:	003f9e06 	br	800a3a8 <__alt_data_end+0xfc00a3a8>

0800a530 <udivmodsi4>:
 800a530:	2900182e 	bgeu	r5,r4,800a594 <udivmodsi4+0x64>
 800a534:	28001716 	blt	r5,zero,800a594 <udivmodsi4+0x64>
 800a538:	00800804 	movi	r2,32
 800a53c:	00c00044 	movi	r3,1
 800a540:	00000206 	br	800a54c <udivmodsi4+0x1c>
 800a544:	10001126 	beq	r2,zero,800a58c <udivmodsi4+0x5c>
 800a548:	28000516 	blt	r5,zero,800a560 <udivmodsi4+0x30>
 800a54c:	294b883a 	add	r5,r5,r5
 800a550:	10bfffc4 	addi	r2,r2,-1
 800a554:	18c7883a 	add	r3,r3,r3
 800a558:	293ffa36 	bltu	r5,r4,800a544 <__alt_data_end+0xfc00a544>
 800a55c:	18000b26 	beq	r3,zero,800a58c <udivmodsi4+0x5c>
 800a560:	0005883a 	mov	r2,zero
 800a564:	21400236 	bltu	r4,r5,800a570 <udivmodsi4+0x40>
 800a568:	2149c83a 	sub	r4,r4,r5
 800a56c:	10c4b03a 	or	r2,r2,r3
 800a570:	1806d07a 	srli	r3,r3,1
 800a574:	280ad07a 	srli	r5,r5,1
 800a578:	183ffa1e 	bne	r3,zero,800a564 <__alt_data_end+0xfc00a564>
 800a57c:	3000011e 	bne	r6,zero,800a584 <udivmodsi4+0x54>
 800a580:	f800283a 	ret
 800a584:	2005883a 	mov	r2,r4
 800a588:	f800283a 	ret
 800a58c:	0005883a 	mov	r2,zero
 800a590:	003ffa06 	br	800a57c <__alt_data_end+0xfc00a57c>
 800a594:	00c00044 	movi	r3,1
 800a598:	003ff106 	br	800a560 <__alt_data_end+0xfc00a560>

0800a59c <__divsi3>:
 800a59c:	defffe04 	addi	sp,sp,-8
 800a5a0:	dfc00115 	stw	ra,4(sp)
 800a5a4:	dc000015 	stw	r16,0(sp)
 800a5a8:	20000b16 	blt	r4,zero,800a5d8 <__divsi3+0x3c>
 800a5ac:	0021883a 	mov	r16,zero
 800a5b0:	28000c16 	blt	r5,zero,800a5e4 <__divsi3+0x48>
 800a5b4:	000d883a 	mov	r6,zero
 800a5b8:	800a5300 	call	800a530 <udivmodsi4>
 800a5bc:	0407c83a 	sub	r3,zero,r16
 800a5c0:	1884f03a 	xor	r2,r3,r2
 800a5c4:	1405883a 	add	r2,r2,r16
 800a5c8:	dfc00117 	ldw	ra,4(sp)
 800a5cc:	dc000017 	ldw	r16,0(sp)
 800a5d0:	dec00204 	addi	sp,sp,8
 800a5d4:	f800283a 	ret
 800a5d8:	0109c83a 	sub	r4,zero,r4
 800a5dc:	04000044 	movi	r16,1
 800a5e0:	283ff40e 	bge	r5,zero,800a5b4 <__alt_data_end+0xfc00a5b4>
 800a5e4:	014bc83a 	sub	r5,zero,r5
 800a5e8:	8400005c 	xori	r16,r16,1
 800a5ec:	003ff106 	br	800a5b4 <__alt_data_end+0xfc00a5b4>

0800a5f0 <__modsi3>:
 800a5f0:	defffd04 	addi	sp,sp,-12
 800a5f4:	dfc00215 	stw	ra,8(sp)
 800a5f8:	dc400115 	stw	r17,4(sp)
 800a5fc:	dc000015 	stw	r16,0(sp)
 800a600:	20000c16 	blt	r4,zero,800a634 <__modsi3+0x44>
 800a604:	0023883a 	mov	r17,zero
 800a608:	0021883a 	mov	r16,zero
 800a60c:	28000d16 	blt	r5,zero,800a644 <__modsi3+0x54>
 800a610:	01800044 	movi	r6,1
 800a614:	800a5300 	call	800a530 <udivmodsi4>
 800a618:	1404f03a 	xor	r2,r2,r16
 800a61c:	8885883a 	add	r2,r17,r2
 800a620:	dfc00217 	ldw	ra,8(sp)
 800a624:	dc400117 	ldw	r17,4(sp)
 800a628:	dc000017 	ldw	r16,0(sp)
 800a62c:	dec00304 	addi	sp,sp,12
 800a630:	f800283a 	ret
 800a634:	0109c83a 	sub	r4,zero,r4
 800a638:	04400044 	movi	r17,1
 800a63c:	043fffc4 	movi	r16,-1
 800a640:	283ff30e 	bge	r5,zero,800a610 <__alt_data_end+0xfc00a610>
 800a644:	014bc83a 	sub	r5,zero,r5
 800a648:	003ff106 	br	800a610 <__alt_data_end+0xfc00a610>

0800a64c <__udivsi3>:
 800a64c:	000d883a 	mov	r6,zero
 800a650:	800a5301 	jmpi	800a530 <udivmodsi4>

0800a654 <__umodsi3>:
 800a654:	01800044 	movi	r6,1
 800a658:	800a5301 	jmpi	800a530 <udivmodsi4>

0800a65c <__mulsi3>:
 800a65c:	0005883a 	mov	r2,zero
 800a660:	20000726 	beq	r4,zero,800a680 <__mulsi3+0x24>
 800a664:	20c0004c 	andi	r3,r4,1
 800a668:	2008d07a 	srli	r4,r4,1
 800a66c:	18000126 	beq	r3,zero,800a674 <__mulsi3+0x18>
 800a670:	1145883a 	add	r2,r2,r5
 800a674:	294b883a 	add	r5,r5,r5
 800a678:	203ffa1e 	bne	r4,zero,800a664 <__alt_data_end+0xfc00a664>
 800a67c:	f800283a 	ret
 800a680:	f800283a 	ret

0800a684 <__adddf3>:
 800a684:	02000434 	movhi	r8,16
 800a688:	423fffc4 	addi	r8,r8,-1
 800a68c:	defffb04 	addi	sp,sp,-20
 800a690:	2a12703a 	and	r9,r5,r8
 800a694:	2806d7fa 	srli	r3,r5,31
 800a698:	3a10703a 	and	r8,r7,r8
 800a69c:	3804d53a 	srli	r2,r7,20
 800a6a0:	3014d77a 	srli	r10,r6,29
 800a6a4:	dc000015 	stw	r16,0(sp)
 800a6a8:	481290fa 	slli	r9,r9,3
 800a6ac:	2820d53a 	srli	r16,r5,20
 800a6b0:	401090fa 	slli	r8,r8,3
 800a6b4:	200ad77a 	srli	r5,r4,29
 800a6b8:	380ed7fa 	srli	r7,r7,31
 800a6bc:	dc800215 	stw	r18,8(sp)
 800a6c0:	dc400115 	stw	r17,4(sp)
 800a6c4:	dfc00415 	stw	ra,16(sp)
 800a6c8:	dcc00315 	stw	r19,12(sp)
 800a6cc:	1c803fcc 	andi	r18,r3,255
 800a6d0:	8401ffcc 	andi	r16,r16,2047
 800a6d4:	494ab03a 	or	r5,r9,r5
 800a6d8:	202290fa 	slli	r17,r4,3
 800a6dc:	1081ffcc 	andi	r2,r2,2047
 800a6e0:	4290b03a 	or	r8,r8,r10
 800a6e4:	300c90fa 	slli	r6,r6,3
 800a6e8:	91c07026 	beq	r18,r7,800a8ac <__adddf3+0x228>
 800a6ec:	8087c83a 	sub	r3,r16,r2
 800a6f0:	00c0b30e 	bge	zero,r3,800a9c0 <__adddf3+0x33c>
 800a6f4:	10002a1e 	bne	r2,zero,800a7a0 <__adddf3+0x11c>
 800a6f8:	4184b03a 	or	r2,r8,r6
 800a6fc:	1000991e 	bne	r2,zero,800a964 <__adddf3+0x2e0>
 800a700:	888001cc 	andi	r2,r17,7
 800a704:	10005b26 	beq	r2,zero,800a874 <__adddf3+0x1f0>
 800a708:	88c003cc 	andi	r3,r17,15
 800a70c:	00800104 	movi	r2,4
 800a710:	18805826 	beq	r3,r2,800a874 <__adddf3+0x1f0>
 800a714:	89800104 	addi	r6,r17,4
 800a718:	3463803a 	cmpltu	r17,r6,r17
 800a71c:	2c4b883a 	add	r5,r5,r17
 800a720:	2880202c 	andhi	r2,r5,128
 800a724:	9007883a 	mov	r3,r18
 800a728:	3023883a 	mov	r17,r6
 800a72c:	10005426 	beq	r2,zero,800a880 <__adddf3+0x1fc>
 800a730:	84000044 	addi	r16,r16,1
 800a734:	0081ffc4 	movi	r2,2047
 800a738:	8080c126 	beq	r16,r2,800aa40 <__adddf3+0x3bc>
 800a73c:	013fe034 	movhi	r4,65408
 800a740:	213fffc4 	addi	r4,r4,-1
 800a744:	290a703a 	and	r5,r5,r4
 800a748:	2804977a 	slli	r2,r5,29
 800a74c:	280a927a 	slli	r5,r5,9
 800a750:	8822d0fa 	srli	r17,r17,3
 800a754:	8401ffcc 	andi	r16,r16,2047
 800a758:	2808d33a 	srli	r4,r5,12
 800a75c:	1444b03a 	or	r2,r2,r17
 800a760:	8401ffcc 	andi	r16,r16,2047
 800a764:	800a953a 	slli	r5,r16,20
 800a768:	18c03fcc 	andi	r3,r3,255
 800a76c:	04000434 	movhi	r16,16
 800a770:	180697fa 	slli	r3,r3,31
 800a774:	843fffc4 	addi	r16,r16,-1
 800a778:	2420703a 	and	r16,r4,r16
 800a77c:	8160b03a 	or	r16,r16,r5
 800a780:	80c6b03a 	or	r3,r16,r3
 800a784:	dfc00417 	ldw	ra,16(sp)
 800a788:	dcc00317 	ldw	r19,12(sp)
 800a78c:	dc800217 	ldw	r18,8(sp)
 800a790:	dc400117 	ldw	r17,4(sp)
 800a794:	dc000017 	ldw	r16,0(sp)
 800a798:	dec00504 	addi	sp,sp,20
 800a79c:	f800283a 	ret
 800a7a0:	0081ffc4 	movi	r2,2047
 800a7a4:	80bfd626 	beq	r16,r2,800a700 <__alt_data_end+0xfc00a700>
 800a7a8:	42002034 	orhi	r8,r8,128
 800a7ac:	00800e04 	movi	r2,56
 800a7b0:	10c0a616 	blt	r2,r3,800aa4c <__adddf3+0x3c8>
 800a7b4:	008007c4 	movi	r2,31
 800a7b8:	10c0c916 	blt	r2,r3,800aae0 <__adddf3+0x45c>
 800a7bc:	00800804 	movi	r2,32
 800a7c0:	10c5c83a 	sub	r2,r2,r3
 800a7c4:	408e983a 	sll	r7,r8,r2
 800a7c8:	30c8d83a 	srl	r4,r6,r3
 800a7cc:	3084983a 	sll	r2,r6,r2
 800a7d0:	40c6d83a 	srl	r3,r8,r3
 800a7d4:	390cb03a 	or	r6,r7,r4
 800a7d8:	1004c03a 	cmpne	r2,r2,zero
 800a7dc:	308cb03a 	or	r6,r6,r2
 800a7e0:	898dc83a 	sub	r6,r17,r6
 800a7e4:	89a3803a 	cmpltu	r17,r17,r6
 800a7e8:	28cbc83a 	sub	r5,r5,r3
 800a7ec:	2c4bc83a 	sub	r5,r5,r17
 800a7f0:	3023883a 	mov	r17,r6
 800a7f4:	2880202c 	andhi	r2,r5,128
 800a7f8:	10006d26 	beq	r2,zero,800a9b0 <__adddf3+0x32c>
 800a7fc:	04c02034 	movhi	r19,128
 800a800:	9cffffc4 	addi	r19,r19,-1
 800a804:	2ce6703a 	and	r19,r5,r19
 800a808:	98007e26 	beq	r19,zero,800aa04 <__adddf3+0x380>
 800a80c:	9809883a 	mov	r4,r19
 800a810:	800ce1c0 	call	800ce1c <__clzsi2>
 800a814:	10fffe04 	addi	r3,r2,-8
 800a818:	010007c4 	movi	r4,31
 800a81c:	20c07f16 	blt	r4,r3,800aa1c <__adddf3+0x398>
 800a820:	01400a04 	movi	r5,40
 800a824:	2885c83a 	sub	r2,r5,r2
 800a828:	888ad83a 	srl	r5,r17,r2
 800a82c:	98e6983a 	sll	r19,r19,r3
 800a830:	88e2983a 	sll	r17,r17,r3
 800a834:	2ce6b03a 	or	r19,r5,r19
 800a838:	1c007c16 	blt	r3,r16,800aa2c <__adddf3+0x3a8>
 800a83c:	1c21c83a 	sub	r16,r3,r16
 800a840:	81400044 	addi	r5,r16,1
 800a844:	00c007c4 	movi	r3,31
 800a848:	19409816 	blt	r3,r5,800aaac <__adddf3+0x428>
 800a84c:	1c21c83a 	sub	r16,r3,r16
 800a850:	8c08983a 	sll	r4,r17,r16
 800a854:	8946d83a 	srl	r3,r17,r5
 800a858:	9c20983a 	sll	r16,r19,r16
 800a85c:	2008c03a 	cmpne	r4,r4,zero
 800a860:	994ad83a 	srl	r5,r19,r5
 800a864:	1c06b03a 	or	r3,r3,r16
 800a868:	1922b03a 	or	r17,r3,r4
 800a86c:	0021883a 	mov	r16,zero
 800a870:	003fa306 	br	800a700 <__alt_data_end+0xfc00a700>
 800a874:	2880202c 	andhi	r2,r5,128
 800a878:	9007883a 	mov	r3,r18
 800a87c:	103fac1e 	bne	r2,zero,800a730 <__alt_data_end+0xfc00a730>
 800a880:	2804977a 	slli	r2,r5,29
 800a884:	8822d0fa 	srli	r17,r17,3
 800a888:	0101ffc4 	movi	r4,2047
 800a88c:	280ad0fa 	srli	r5,r5,3
 800a890:	1444b03a 	or	r2,r2,r17
 800a894:	81002c26 	beq	r16,r4,800a948 <__adddf3+0x2c4>
 800a898:	8120703a 	and	r16,r16,r4
 800a89c:	01000434 	movhi	r4,16
 800a8a0:	213fffc4 	addi	r4,r4,-1
 800a8a4:	2908703a 	and	r4,r5,r4
 800a8a8:	003fad06 	br	800a760 <__alt_data_end+0xfc00a760>
 800a8ac:	8089c83a 	sub	r4,r16,r2
 800a8b0:	01006a0e 	bge	zero,r4,800aa5c <__adddf3+0x3d8>
 800a8b4:	10003326 	beq	r2,zero,800a984 <__adddf3+0x300>
 800a8b8:	0081ffc4 	movi	r2,2047
 800a8bc:	80bf9026 	beq	r16,r2,800a700 <__alt_data_end+0xfc00a700>
 800a8c0:	42002034 	orhi	r8,r8,128
 800a8c4:	00800e04 	movi	r2,56
 800a8c8:	1100b116 	blt	r2,r4,800ab90 <__adddf3+0x50c>
 800a8cc:	008007c4 	movi	r2,31
 800a8d0:	1100e216 	blt	r2,r4,800ac5c <__adddf3+0x5d8>
 800a8d4:	00800804 	movi	r2,32
 800a8d8:	1105c83a 	sub	r2,r2,r4
 800a8dc:	4092983a 	sll	r9,r8,r2
 800a8e0:	310ed83a 	srl	r7,r6,r4
 800a8e4:	3084983a 	sll	r2,r6,r2
 800a8e8:	4110d83a 	srl	r8,r8,r4
 800a8ec:	49ccb03a 	or	r6,r9,r7
 800a8f0:	1004c03a 	cmpne	r2,r2,zero
 800a8f4:	308cb03a 	or	r6,r6,r2
 800a8f8:	344d883a 	add	r6,r6,r17
 800a8fc:	3463803a 	cmpltu	r17,r6,r17
 800a900:	414b883a 	add	r5,r8,r5
 800a904:	2c4b883a 	add	r5,r5,r17
 800a908:	3023883a 	mov	r17,r6
 800a90c:	2880202c 	andhi	r2,r5,128
 800a910:	10002726 	beq	r2,zero,800a9b0 <__adddf3+0x32c>
 800a914:	84000044 	addi	r16,r16,1
 800a918:	0081ffc4 	movi	r2,2047
 800a91c:	8080ae26 	beq	r16,r2,800abd8 <__adddf3+0x554>
 800a920:	00bfe034 	movhi	r2,65408
 800a924:	10bfffc4 	addi	r2,r2,-1
 800a928:	288a703a 	and	r5,r5,r2
 800a92c:	880cd07a 	srli	r6,r17,1
 800a930:	280897fa 	slli	r4,r5,31
 800a934:	88c0004c 	andi	r3,r17,1
 800a938:	30e2b03a 	or	r17,r6,r3
 800a93c:	280ad07a 	srli	r5,r5,1
 800a940:	8922b03a 	or	r17,r17,r4
 800a944:	003f6e06 	br	800a700 <__alt_data_end+0xfc00a700>
 800a948:	1148b03a 	or	r4,r2,r5
 800a94c:	20003c26 	beq	r4,zero,800aa40 <__adddf3+0x3bc>
 800a950:	29000234 	orhi	r4,r5,8
 800a954:	01400434 	movhi	r5,16
 800a958:	297fffc4 	addi	r5,r5,-1
 800a95c:	2148703a 	and	r4,r4,r5
 800a960:	003f7f06 	br	800a760 <__alt_data_end+0xfc00a760>
 800a964:	18ffffc4 	addi	r3,r3,-1
 800a968:	18004d1e 	bne	r3,zero,800aaa0 <__adddf3+0x41c>
 800a96c:	898dc83a 	sub	r6,r17,r6
 800a970:	89a3803a 	cmpltu	r17,r17,r6
 800a974:	2a0bc83a 	sub	r5,r5,r8
 800a978:	2c4bc83a 	sub	r5,r5,r17
 800a97c:	3023883a 	mov	r17,r6
 800a980:	003f9c06 	br	800a7f4 <__alt_data_end+0xfc00a7f4>
 800a984:	4184b03a 	or	r2,r8,r6
 800a988:	103f5d26 	beq	r2,zero,800a700 <__alt_data_end+0xfc00a700>
 800a98c:	213fffc4 	addi	r4,r4,-1
 800a990:	203fd926 	beq	r4,zero,800a8f8 <__alt_data_end+0xfc00a8f8>
 800a994:	0081ffc4 	movi	r2,2047
 800a998:	80bfca1e 	bne	r16,r2,800a8c4 <__alt_data_end+0xfc00a8c4>
 800a99c:	003f5806 	br	800a700 <__alt_data_end+0xfc00a700>
 800a9a0:	10c8b03a 	or	r4,r2,r3
 800a9a4:	20008b26 	beq	r4,zero,800abd4 <__adddf3+0x550>
 800a9a8:	100b883a 	mov	r5,r2
 800a9ac:	1823883a 	mov	r17,r3
 800a9b0:	888001cc 	andi	r2,r17,7
 800a9b4:	103f541e 	bne	r2,zero,800a708 <__alt_data_end+0xfc00a708>
 800a9b8:	9007883a 	mov	r3,r18
 800a9bc:	003fb006 	br	800a880 <__alt_data_end+0xfc00a880>
 800a9c0:	1800531e 	bne	r3,zero,800ab10 <__adddf3+0x48c>
 800a9c4:	80800044 	addi	r2,r16,1
 800a9c8:	1081ffcc 	andi	r2,r2,2047
 800a9cc:	00c00044 	movi	r3,1
 800a9d0:	1880990e 	bge	r3,r2,800ac38 <__adddf3+0x5b4>
 800a9d4:	8985c83a 	sub	r2,r17,r6
 800a9d8:	8887803a 	cmpltu	r3,r17,r2
 800a9dc:	2a27c83a 	sub	r19,r5,r8
 800a9e0:	98e7c83a 	sub	r19,r19,r3
 800a9e4:	98c0202c 	andhi	r3,r19,128
 800a9e8:	18006226 	beq	r3,zero,800ab74 <__adddf3+0x4f0>
 800a9ec:	3463c83a 	sub	r17,r6,r17
 800a9f0:	4151c83a 	sub	r8,r8,r5
 800a9f4:	344d803a 	cmpltu	r6,r6,r17
 800a9f8:	41a7c83a 	sub	r19,r8,r6
 800a9fc:	3825883a 	mov	r18,r7
 800aa00:	983f821e 	bne	r19,zero,800a80c <__alt_data_end+0xfc00a80c>
 800aa04:	8809883a 	mov	r4,r17
 800aa08:	800ce1c0 	call	800ce1c <__clzsi2>
 800aa0c:	10800804 	addi	r2,r2,32
 800aa10:	10fffe04 	addi	r3,r2,-8
 800aa14:	010007c4 	movi	r4,31
 800aa18:	20ff810e 	bge	r4,r3,800a820 <__alt_data_end+0xfc00a820>
 800aa1c:	14fff604 	addi	r19,r2,-40
 800aa20:	8ce6983a 	sll	r19,r17,r19
 800aa24:	0023883a 	mov	r17,zero
 800aa28:	1c3f840e 	bge	r3,r16,800a83c <__alt_data_end+0xfc00a83c>
 800aa2c:	017fe034 	movhi	r5,65408
 800aa30:	297fffc4 	addi	r5,r5,-1
 800aa34:	80e1c83a 	sub	r16,r16,r3
 800aa38:	994a703a 	and	r5,r19,r5
 800aa3c:	003f3006 	br	800a700 <__alt_data_end+0xfc00a700>
 800aa40:	0009883a 	mov	r4,zero
 800aa44:	0005883a 	mov	r2,zero
 800aa48:	003f4506 	br	800a760 <__alt_data_end+0xfc00a760>
 800aa4c:	418cb03a 	or	r6,r8,r6
 800aa50:	300cc03a 	cmpne	r6,r6,zero
 800aa54:	0007883a 	mov	r3,zero
 800aa58:	003f6106 	br	800a7e0 <__alt_data_end+0xfc00a7e0>
 800aa5c:	2000921e 	bne	r4,zero,800aca8 <__adddf3+0x624>
 800aa60:	80800044 	addi	r2,r16,1
 800aa64:	11c1ffcc 	andi	r7,r2,2047
 800aa68:	01000044 	movi	r4,1
 800aa6c:	21c0610e 	bge	r4,r7,800abf4 <__adddf3+0x570>
 800aa70:	0101ffc4 	movi	r4,2047
 800aa74:	1100a326 	beq	r2,r4,800ad04 <__adddf3+0x680>
 800aa78:	344d883a 	add	r6,r6,r17
 800aa7c:	3463803a 	cmpltu	r17,r6,r17
 800aa80:	414b883a 	add	r5,r8,r5
 800aa84:	2c4b883a 	add	r5,r5,r17
 800aa88:	282297fa 	slli	r17,r5,31
 800aa8c:	300cd07a 	srli	r6,r6,1
 800aa90:	280ad07a 	srli	r5,r5,1
 800aa94:	1021883a 	mov	r16,r2
 800aa98:	89a2b03a 	or	r17,r17,r6
 800aa9c:	003f1806 	br	800a700 <__alt_data_end+0xfc00a700>
 800aaa0:	0081ffc4 	movi	r2,2047
 800aaa4:	80bf411e 	bne	r16,r2,800a7ac <__alt_data_end+0xfc00a7ac>
 800aaa8:	003f1506 	br	800a700 <__alt_data_end+0xfc00a700>
 800aaac:	80bff844 	addi	r2,r16,-31
 800aab0:	00c00804 	movi	r3,32
 800aab4:	9884d83a 	srl	r2,r19,r2
 800aab8:	28c04a26 	beq	r5,r3,800abe4 <__adddf3+0x560>
 800aabc:	00c00fc4 	movi	r3,63
 800aac0:	1c21c83a 	sub	r16,r3,r16
 800aac4:	9c26983a 	sll	r19,r19,r16
 800aac8:	9c62b03a 	or	r17,r19,r17
 800aacc:	8822c03a 	cmpne	r17,r17,zero
 800aad0:	88a2b03a 	or	r17,r17,r2
 800aad4:	000b883a 	mov	r5,zero
 800aad8:	0021883a 	mov	r16,zero
 800aadc:	003fb406 	br	800a9b0 <__alt_data_end+0xfc00a9b0>
 800aae0:	18bff804 	addi	r2,r3,-32
 800aae4:	01000804 	movi	r4,32
 800aae8:	4084d83a 	srl	r2,r8,r2
 800aaec:	19003f26 	beq	r3,r4,800abec <__adddf3+0x568>
 800aaf0:	01001004 	movi	r4,64
 800aaf4:	20c7c83a 	sub	r3,r4,r3
 800aaf8:	40d0983a 	sll	r8,r8,r3
 800aafc:	418cb03a 	or	r6,r8,r6
 800ab00:	300cc03a 	cmpne	r6,r6,zero
 800ab04:	308cb03a 	or	r6,r6,r2
 800ab08:	0007883a 	mov	r3,zero
 800ab0c:	003f3406 	br	800a7e0 <__alt_data_end+0xfc00a7e0>
 800ab10:	80002326 	beq	r16,zero,800aba0 <__adddf3+0x51c>
 800ab14:	0101ffc4 	movi	r4,2047
 800ab18:	11005e26 	beq	r2,r4,800ac94 <__adddf3+0x610>
 800ab1c:	00c7c83a 	sub	r3,zero,r3
 800ab20:	29402034 	orhi	r5,r5,128
 800ab24:	01000e04 	movi	r4,56
 800ab28:	20c07216 	blt	r4,r3,800acf4 <__adddf3+0x670>
 800ab2c:	010007c4 	movi	r4,31
 800ab30:	20c0ce16 	blt	r4,r3,800ae6c <__adddf3+0x7e8>
 800ab34:	01000804 	movi	r4,32
 800ab38:	20c9c83a 	sub	r4,r4,r3
 800ab3c:	2914983a 	sll	r10,r5,r4
 800ab40:	88d2d83a 	srl	r9,r17,r3
 800ab44:	8908983a 	sll	r4,r17,r4
 800ab48:	28c6d83a 	srl	r3,r5,r3
 800ab4c:	5262b03a 	or	r17,r10,r9
 800ab50:	2008c03a 	cmpne	r4,r4,zero
 800ab54:	8922b03a 	or	r17,r17,r4
 800ab58:	3463c83a 	sub	r17,r6,r17
 800ab5c:	40c7c83a 	sub	r3,r8,r3
 800ab60:	344d803a 	cmpltu	r6,r6,r17
 800ab64:	198bc83a 	sub	r5,r3,r6
 800ab68:	1021883a 	mov	r16,r2
 800ab6c:	3825883a 	mov	r18,r7
 800ab70:	003f2006 	br	800a7f4 <__alt_data_end+0xfc00a7f4>
 800ab74:	9886b03a 	or	r3,r19,r2
 800ab78:	1800141e 	bne	r3,zero,800abcc <__adddf3+0x548>
 800ab7c:	0007883a 	mov	r3,zero
 800ab80:	000b883a 	mov	r5,zero
 800ab84:	0023883a 	mov	r17,zero
 800ab88:	0021883a 	mov	r16,zero
 800ab8c:	003f3c06 	br	800a880 <__alt_data_end+0xfc00a880>
 800ab90:	418cb03a 	or	r6,r8,r6
 800ab94:	300cc03a 	cmpne	r6,r6,zero
 800ab98:	0011883a 	mov	r8,zero
 800ab9c:	003f5606 	br	800a8f8 <__alt_data_end+0xfc00a8f8>
 800aba0:	2c48b03a 	or	r4,r5,r17
 800aba4:	20003b26 	beq	r4,zero,800ac94 <__adddf3+0x610>
 800aba8:	00c6303a 	nor	r3,zero,r3
 800abac:	1800371e 	bne	r3,zero,800ac8c <__adddf3+0x608>
 800abb0:	3463c83a 	sub	r17,r6,r17
 800abb4:	414bc83a 	sub	r5,r8,r5
 800abb8:	344d803a 	cmpltu	r6,r6,r17
 800abbc:	298bc83a 	sub	r5,r5,r6
 800abc0:	1021883a 	mov	r16,r2
 800abc4:	3825883a 	mov	r18,r7
 800abc8:	003f0a06 	br	800a7f4 <__alt_data_end+0xfc00a7f4>
 800abcc:	1023883a 	mov	r17,r2
 800abd0:	003f0d06 	br	800a808 <__alt_data_end+0xfc00a808>
 800abd4:	0007883a 	mov	r3,zero
 800abd8:	000b883a 	mov	r5,zero
 800abdc:	0023883a 	mov	r17,zero
 800abe0:	003f2706 	br	800a880 <__alt_data_end+0xfc00a880>
 800abe4:	0027883a 	mov	r19,zero
 800abe8:	003fb706 	br	800aac8 <__alt_data_end+0xfc00aac8>
 800abec:	0011883a 	mov	r8,zero
 800abf0:	003fc206 	br	800aafc <__alt_data_end+0xfc00aafc>
 800abf4:	2c44b03a 	or	r2,r5,r17
 800abf8:	8000871e 	bne	r16,zero,800ae18 <__adddf3+0x794>
 800abfc:	1000b126 	beq	r2,zero,800aec4 <__adddf3+0x840>
 800ac00:	4184b03a 	or	r2,r8,r6
 800ac04:	103ebe26 	beq	r2,zero,800a700 <__alt_data_end+0xfc00a700>
 800ac08:	3445883a 	add	r2,r6,r17
 800ac0c:	1463803a 	cmpltu	r17,r2,r17
 800ac10:	414b883a 	add	r5,r8,r5
 800ac14:	2c4b883a 	add	r5,r5,r17
 800ac18:	28c0202c 	andhi	r3,r5,128
 800ac1c:	1023883a 	mov	r17,r2
 800ac20:	183f6326 	beq	r3,zero,800a9b0 <__alt_data_end+0xfc00a9b0>
 800ac24:	00bfe034 	movhi	r2,65408
 800ac28:	10bfffc4 	addi	r2,r2,-1
 800ac2c:	2021883a 	mov	r16,r4
 800ac30:	288a703a 	and	r5,r5,r2
 800ac34:	003eb206 	br	800a700 <__alt_data_end+0xfc00a700>
 800ac38:	2c44b03a 	or	r2,r5,r17
 800ac3c:	8000251e 	bne	r16,zero,800acd4 <__adddf3+0x650>
 800ac40:	10004b1e 	bne	r2,zero,800ad70 <__adddf3+0x6ec>
 800ac44:	4184b03a 	or	r2,r8,r6
 800ac48:	103fe226 	beq	r2,zero,800abd4 <__alt_data_end+0xfc00abd4>
 800ac4c:	400b883a 	mov	r5,r8
 800ac50:	3023883a 	mov	r17,r6
 800ac54:	3825883a 	mov	r18,r7
 800ac58:	003ea906 	br	800a700 <__alt_data_end+0xfc00a700>
 800ac5c:	20bff804 	addi	r2,r4,-32
 800ac60:	01c00804 	movi	r7,32
 800ac64:	4084d83a 	srl	r2,r8,r2
 800ac68:	21c07e26 	beq	r4,r7,800ae64 <__adddf3+0x7e0>
 800ac6c:	01c01004 	movi	r7,64
 800ac70:	3909c83a 	sub	r4,r7,r4
 800ac74:	4110983a 	sll	r8,r8,r4
 800ac78:	418cb03a 	or	r6,r8,r6
 800ac7c:	300cc03a 	cmpne	r6,r6,zero
 800ac80:	308cb03a 	or	r6,r6,r2
 800ac84:	0011883a 	mov	r8,zero
 800ac88:	003f1b06 	br	800a8f8 <__alt_data_end+0xfc00a8f8>
 800ac8c:	0101ffc4 	movi	r4,2047
 800ac90:	113fa41e 	bne	r2,r4,800ab24 <__alt_data_end+0xfc00ab24>
 800ac94:	400b883a 	mov	r5,r8
 800ac98:	3023883a 	mov	r17,r6
 800ac9c:	1021883a 	mov	r16,r2
 800aca0:	3825883a 	mov	r18,r7
 800aca4:	003e9606 	br	800a700 <__alt_data_end+0xfc00a700>
 800aca8:	80001a1e 	bne	r16,zero,800ad14 <__adddf3+0x690>
 800acac:	2c4eb03a 	or	r7,r5,r17
 800acb0:	38005526 	beq	r7,zero,800ae08 <__adddf3+0x784>
 800acb4:	0108303a 	nor	r4,zero,r4
 800acb8:	2000511e 	bne	r4,zero,800ae00 <__adddf3+0x77c>
 800acbc:	89a3883a 	add	r17,r17,r6
 800acc0:	414b883a 	add	r5,r8,r5
 800acc4:	898d803a 	cmpltu	r6,r17,r6
 800acc8:	298b883a 	add	r5,r5,r6
 800accc:	1021883a 	mov	r16,r2
 800acd0:	003f0e06 	br	800a90c <__alt_data_end+0xfc00a90c>
 800acd4:	1000341e 	bne	r2,zero,800ada8 <__adddf3+0x724>
 800acd8:	4184b03a 	or	r2,r8,r6
 800acdc:	10006f26 	beq	r2,zero,800ae9c <__adddf3+0x818>
 800ace0:	400b883a 	mov	r5,r8
 800ace4:	3023883a 	mov	r17,r6
 800ace8:	3825883a 	mov	r18,r7
 800acec:	0401ffc4 	movi	r16,2047
 800acf0:	003e8306 	br	800a700 <__alt_data_end+0xfc00a700>
 800acf4:	2c62b03a 	or	r17,r5,r17
 800acf8:	8822c03a 	cmpne	r17,r17,zero
 800acfc:	0007883a 	mov	r3,zero
 800ad00:	003f9506 	br	800ab58 <__alt_data_end+0xfc00ab58>
 800ad04:	1021883a 	mov	r16,r2
 800ad08:	000b883a 	mov	r5,zero
 800ad0c:	0023883a 	mov	r17,zero
 800ad10:	003edb06 	br	800a880 <__alt_data_end+0xfc00a880>
 800ad14:	01c1ffc4 	movi	r7,2047
 800ad18:	11c03b26 	beq	r2,r7,800ae08 <__adddf3+0x784>
 800ad1c:	0109c83a 	sub	r4,zero,r4
 800ad20:	29402034 	orhi	r5,r5,128
 800ad24:	01c00e04 	movi	r7,56
 800ad28:	39006216 	blt	r7,r4,800aeb4 <__adddf3+0x830>
 800ad2c:	01c007c4 	movi	r7,31
 800ad30:	39006b16 	blt	r7,r4,800aee0 <__adddf3+0x85c>
 800ad34:	01c00804 	movi	r7,32
 800ad38:	390fc83a 	sub	r7,r7,r4
 800ad3c:	29d4983a 	sll	r10,r5,r7
 800ad40:	8912d83a 	srl	r9,r17,r4
 800ad44:	89ce983a 	sll	r7,r17,r7
 800ad48:	2908d83a 	srl	r4,r5,r4
 800ad4c:	5262b03a 	or	r17,r10,r9
 800ad50:	380ac03a 	cmpne	r5,r7,zero
 800ad54:	8962b03a 	or	r17,r17,r5
 800ad58:	89a3883a 	add	r17,r17,r6
 800ad5c:	2211883a 	add	r8,r4,r8
 800ad60:	898d803a 	cmpltu	r6,r17,r6
 800ad64:	418b883a 	add	r5,r8,r6
 800ad68:	1021883a 	mov	r16,r2
 800ad6c:	003ee706 	br	800a90c <__alt_data_end+0xfc00a90c>
 800ad70:	4184b03a 	or	r2,r8,r6
 800ad74:	103e6226 	beq	r2,zero,800a700 <__alt_data_end+0xfc00a700>
 800ad78:	8987c83a 	sub	r3,r17,r6
 800ad7c:	88c9803a 	cmpltu	r4,r17,r3
 800ad80:	2a05c83a 	sub	r2,r5,r8
 800ad84:	1105c83a 	sub	r2,r2,r4
 800ad88:	1100202c 	andhi	r4,r2,128
 800ad8c:	203f0426 	beq	r4,zero,800a9a0 <__alt_data_end+0xfc00a9a0>
 800ad90:	3463c83a 	sub	r17,r6,r17
 800ad94:	414bc83a 	sub	r5,r8,r5
 800ad98:	344d803a 	cmpltu	r6,r6,r17
 800ad9c:	298bc83a 	sub	r5,r5,r6
 800ada0:	3825883a 	mov	r18,r7
 800ada4:	003e5606 	br	800a700 <__alt_data_end+0xfc00a700>
 800ada8:	4184b03a 	or	r2,r8,r6
 800adac:	10002b26 	beq	r2,zero,800ae5c <__adddf3+0x7d8>
 800adb0:	2804d0fa 	srli	r2,r5,3
 800adb4:	8822d0fa 	srli	r17,r17,3
 800adb8:	280a977a 	slli	r5,r5,29
 800adbc:	10c0022c 	andhi	r3,r2,8
 800adc0:	2c62b03a 	or	r17,r5,r17
 800adc4:	18000826 	beq	r3,zero,800ade8 <__adddf3+0x764>
 800adc8:	4008d0fa 	srli	r4,r8,3
 800adcc:	20c0022c 	andhi	r3,r4,8
 800add0:	1800051e 	bne	r3,zero,800ade8 <__adddf3+0x764>
 800add4:	300cd0fa 	srli	r6,r6,3
 800add8:	4010977a 	slli	r8,r8,29
 800addc:	2005883a 	mov	r2,r4
 800ade0:	3825883a 	mov	r18,r7
 800ade4:	41a2b03a 	or	r17,r8,r6
 800ade8:	880ad77a 	srli	r5,r17,29
 800adec:	100490fa 	slli	r2,r2,3
 800adf0:	882290fa 	slli	r17,r17,3
 800adf4:	0401ffc4 	movi	r16,2047
 800adf8:	288ab03a 	or	r5,r5,r2
 800adfc:	003e4006 	br	800a700 <__alt_data_end+0xfc00a700>
 800ae00:	01c1ffc4 	movi	r7,2047
 800ae04:	11ffc71e 	bne	r2,r7,800ad24 <__alt_data_end+0xfc00ad24>
 800ae08:	400b883a 	mov	r5,r8
 800ae0c:	3023883a 	mov	r17,r6
 800ae10:	1021883a 	mov	r16,r2
 800ae14:	003e3a06 	br	800a700 <__alt_data_end+0xfc00a700>
 800ae18:	10002d26 	beq	r2,zero,800aed0 <__adddf3+0x84c>
 800ae1c:	4184b03a 	or	r2,r8,r6
 800ae20:	10000e26 	beq	r2,zero,800ae5c <__adddf3+0x7d8>
 800ae24:	2804d0fa 	srli	r2,r5,3
 800ae28:	8822d0fa 	srli	r17,r17,3
 800ae2c:	280a977a 	slli	r5,r5,29
 800ae30:	10c0022c 	andhi	r3,r2,8
 800ae34:	2c62b03a 	or	r17,r5,r17
 800ae38:	183feb26 	beq	r3,zero,800ade8 <__alt_data_end+0xfc00ade8>
 800ae3c:	4008d0fa 	srli	r4,r8,3
 800ae40:	20c0022c 	andhi	r3,r4,8
 800ae44:	183fe81e 	bne	r3,zero,800ade8 <__alt_data_end+0xfc00ade8>
 800ae48:	300cd0fa 	srli	r6,r6,3
 800ae4c:	4010977a 	slli	r8,r8,29
 800ae50:	2005883a 	mov	r2,r4
 800ae54:	41a2b03a 	or	r17,r8,r6
 800ae58:	003fe306 	br	800ade8 <__alt_data_end+0xfc00ade8>
 800ae5c:	0401ffc4 	movi	r16,2047
 800ae60:	003e2706 	br	800a700 <__alt_data_end+0xfc00a700>
 800ae64:	0011883a 	mov	r8,zero
 800ae68:	003f8306 	br	800ac78 <__alt_data_end+0xfc00ac78>
 800ae6c:	193ff804 	addi	r4,r3,-32
 800ae70:	02400804 	movi	r9,32
 800ae74:	2908d83a 	srl	r4,r5,r4
 800ae78:	1a402526 	beq	r3,r9,800af10 <__adddf3+0x88c>
 800ae7c:	02401004 	movi	r9,64
 800ae80:	48c7c83a 	sub	r3,r9,r3
 800ae84:	28ca983a 	sll	r5,r5,r3
 800ae88:	2c62b03a 	or	r17,r5,r17
 800ae8c:	8822c03a 	cmpne	r17,r17,zero
 800ae90:	8922b03a 	or	r17,r17,r4
 800ae94:	0007883a 	mov	r3,zero
 800ae98:	003f2f06 	br	800ab58 <__alt_data_end+0xfc00ab58>
 800ae9c:	01402034 	movhi	r5,128
 800aea0:	0007883a 	mov	r3,zero
 800aea4:	297fffc4 	addi	r5,r5,-1
 800aea8:	047ffe04 	movi	r17,-8
 800aeac:	0401ffc4 	movi	r16,2047
 800aeb0:	003e7306 	br	800a880 <__alt_data_end+0xfc00a880>
 800aeb4:	2c62b03a 	or	r17,r5,r17
 800aeb8:	8822c03a 	cmpne	r17,r17,zero
 800aebc:	0009883a 	mov	r4,zero
 800aec0:	003fa506 	br	800ad58 <__alt_data_end+0xfc00ad58>
 800aec4:	400b883a 	mov	r5,r8
 800aec8:	3023883a 	mov	r17,r6
 800aecc:	003e0c06 	br	800a700 <__alt_data_end+0xfc00a700>
 800aed0:	400b883a 	mov	r5,r8
 800aed4:	3023883a 	mov	r17,r6
 800aed8:	0401ffc4 	movi	r16,2047
 800aedc:	003e0806 	br	800a700 <__alt_data_end+0xfc00a700>
 800aee0:	21fff804 	addi	r7,r4,-32
 800aee4:	02400804 	movi	r9,32
 800aee8:	29ced83a 	srl	r7,r5,r7
 800aeec:	22400a26 	beq	r4,r9,800af18 <__adddf3+0x894>
 800aef0:	02401004 	movi	r9,64
 800aef4:	4909c83a 	sub	r4,r9,r4
 800aef8:	290a983a 	sll	r5,r5,r4
 800aefc:	2c62b03a 	or	r17,r5,r17
 800af00:	8822c03a 	cmpne	r17,r17,zero
 800af04:	89e2b03a 	or	r17,r17,r7
 800af08:	0009883a 	mov	r4,zero
 800af0c:	003f9206 	br	800ad58 <__alt_data_end+0xfc00ad58>
 800af10:	000b883a 	mov	r5,zero
 800af14:	003fdc06 	br	800ae88 <__alt_data_end+0xfc00ae88>
 800af18:	000b883a 	mov	r5,zero
 800af1c:	003ff706 	br	800aefc <__alt_data_end+0xfc00aefc>

0800af20 <__divdf3>:
 800af20:	defff004 	addi	sp,sp,-64
 800af24:	dc800815 	stw	r18,32(sp)
 800af28:	2824d53a 	srli	r18,r5,20
 800af2c:	dd800c15 	stw	r22,48(sp)
 800af30:	282cd7fa 	srli	r22,r5,31
 800af34:	dc000615 	stw	r16,24(sp)
 800af38:	04000434 	movhi	r16,16
 800af3c:	df000e15 	stw	fp,56(sp)
 800af40:	dd000a15 	stw	r20,40(sp)
 800af44:	dcc00915 	stw	r19,36(sp)
 800af48:	dc400715 	stw	r17,28(sp)
 800af4c:	843fffc4 	addi	r16,r16,-1
 800af50:	dfc00f15 	stw	ra,60(sp)
 800af54:	ddc00d15 	stw	r23,52(sp)
 800af58:	dd400b15 	stw	r21,44(sp)
 800af5c:	9481ffcc 	andi	r18,r18,2047
 800af60:	2029883a 	mov	r20,r4
 800af64:	2027883a 	mov	r19,r4
 800af68:	2c22703a 	and	r17,r5,r16
 800af6c:	b7003fcc 	andi	fp,r22,255
 800af70:	90005e26 	beq	r18,zero,800b0ec <__divdf3+0x1cc>
 800af74:	0081ffc4 	movi	r2,2047
 800af78:	90803526 	beq	r18,r2,800b050 <__divdf3+0x130>
 800af7c:	8c000434 	orhi	r16,r17,16
 800af80:	2004d77a 	srli	r2,r4,29
 800af84:	802090fa 	slli	r16,r16,3
 800af88:	202690fa 	slli	r19,r4,3
 800af8c:	94bf0044 	addi	r18,r18,-1023
 800af90:	80a2b03a 	or	r17,r16,r2
 800af94:	0029883a 	mov	r20,zero
 800af98:	0011883a 	mov	r8,zero
 800af9c:	380ad53a 	srli	r5,r7,20
 800afa0:	382ed7fa 	srli	r23,r7,31
 800afa4:	04000434 	movhi	r16,16
 800afa8:	843fffc4 	addi	r16,r16,-1
 800afac:	2941ffcc 	andi	r5,r5,2047
 800afb0:	302b883a 	mov	r21,r6
 800afb4:	3c20703a 	and	r16,r7,r16
 800afb8:	ba403fcc 	andi	r9,r23,255
 800afbc:	28006726 	beq	r5,zero,800b15c <__divdf3+0x23c>
 800afc0:	0081ffc4 	movi	r2,2047
 800afc4:	28805f26 	beq	r5,r2,800b144 <__divdf3+0x224>
 800afc8:	84000434 	orhi	r16,r16,16
 800afcc:	3004d77a 	srli	r2,r6,29
 800afd0:	802090fa 	slli	r16,r16,3
 800afd4:	302a90fa 	slli	r21,r6,3
 800afd8:	297f0044 	addi	r5,r5,-1023
 800afdc:	80a0b03a 	or	r16,r16,r2
 800afe0:	000f883a 	mov	r7,zero
 800afe4:	3d06b03a 	or	r3,r7,r20
 800afe8:	180690ba 	slli	r3,r3,2
 800afec:	00820074 	movhi	r2,2049
 800aff0:	10ac0404 	addi	r2,r2,-20464
 800aff4:	1885883a 	add	r2,r3,r2
 800aff8:	10800017 	ldw	r2,0(r2)
 800affc:	b5c8f03a 	xor	r4,r22,r23
 800b000:	200d883a 	mov	r6,r4
 800b004:	25003fcc 	andi	r20,r4,255
 800b008:	9165c83a 	sub	r18,r18,r5
 800b00c:	1000683a 	jmp	r2
 800b010:	0800b258 	cmpnei	zero,at,713
 800b014:	0800b088 	cmpgei	zero,at,706
 800b018:	0800b21c 	xori	zero,at,712
 800b01c:	0800b06c 	andhi	zero,at,705
 800b020:	0800b21c 	xori	zero,at,712
 800b024:	0800b1f0 	cmpltui	zero,at,711
 800b028:	0800b21c 	xori	zero,at,712
 800b02c:	0800b06c 	andhi	zero,at,705
 800b030:	0800b088 	cmpgei	zero,at,706
 800b034:	0800b088 	cmpgei	zero,at,706
 800b038:	0800b1f0 	cmpltui	zero,at,711
 800b03c:	0800b06c 	andhi	zero,at,705
 800b040:	0800b07c 	xorhi	zero,at,705
 800b044:	0800b07c 	xorhi	zero,at,705
 800b048:	0800b07c 	xorhi	zero,at,705
 800b04c:	0800b22c 	andhi	zero,at,712
 800b050:	8904b03a 	or	r2,r17,r4
 800b054:	1000631e 	bne	r2,zero,800b1e4 <__divdf3+0x2c4>
 800b058:	05000204 	movi	r20,8
 800b05c:	0023883a 	mov	r17,zero
 800b060:	0027883a 	mov	r19,zero
 800b064:	02000084 	movi	r8,2
 800b068:	003fcc06 	br	800af9c <__alt_data_end+0xfc00af9c>
 800b06c:	8023883a 	mov	r17,r16
 800b070:	a827883a 	mov	r19,r21
 800b074:	4839883a 	mov	fp,r9
 800b078:	3811883a 	mov	r8,r7
 800b07c:	00800084 	movi	r2,2
 800b080:	4081531e 	bne	r8,r2,800b5d0 <__divdf3+0x6b0>
 800b084:	e029883a 	mov	r20,fp
 800b088:	a180004c 	andi	r6,r20,1
 800b08c:	0201ffc4 	movi	r8,2047
 800b090:	000b883a 	mov	r5,zero
 800b094:	0027883a 	mov	r19,zero
 800b098:	4010953a 	slli	r8,r8,20
 800b09c:	30c03fcc 	andi	r3,r6,255
 800b0a0:	04000434 	movhi	r16,16
 800b0a4:	180697fa 	slli	r3,r3,31
 800b0a8:	843fffc4 	addi	r16,r16,-1
 800b0ac:	2c20703a 	and	r16,r5,r16
 800b0b0:	8220b03a 	or	r16,r16,r8
 800b0b4:	80c6b03a 	or	r3,r16,r3
 800b0b8:	9805883a 	mov	r2,r19
 800b0bc:	dfc00f17 	ldw	ra,60(sp)
 800b0c0:	df000e17 	ldw	fp,56(sp)
 800b0c4:	ddc00d17 	ldw	r23,52(sp)
 800b0c8:	dd800c17 	ldw	r22,48(sp)
 800b0cc:	dd400b17 	ldw	r21,44(sp)
 800b0d0:	dd000a17 	ldw	r20,40(sp)
 800b0d4:	dcc00917 	ldw	r19,36(sp)
 800b0d8:	dc800817 	ldw	r18,32(sp)
 800b0dc:	dc400717 	ldw	r17,28(sp)
 800b0e0:	dc000617 	ldw	r16,24(sp)
 800b0e4:	dec01004 	addi	sp,sp,64
 800b0e8:	f800283a 	ret
 800b0ec:	8904b03a 	or	r2,r17,r4
 800b0f0:	10003726 	beq	r2,zero,800b1d0 <__divdf3+0x2b0>
 800b0f4:	88014d26 	beq	r17,zero,800b62c <__divdf3+0x70c>
 800b0f8:	8809883a 	mov	r4,r17
 800b0fc:	d9800215 	stw	r6,8(sp)
 800b100:	d9c00515 	stw	r7,20(sp)
 800b104:	800ce1c0 	call	800ce1c <__clzsi2>
 800b108:	d9800217 	ldw	r6,8(sp)
 800b10c:	d9c00517 	ldw	r7,20(sp)
 800b110:	1007883a 	mov	r3,r2
 800b114:	01000a04 	movi	r4,40
 800b118:	1cfffe04 	addi	r19,r3,-8
 800b11c:	20c9c83a 	sub	r4,r4,r3
 800b120:	8cca983a 	sll	r5,r17,r19
 800b124:	a108d83a 	srl	r4,r20,r4
 800b128:	a4e6983a 	sll	r19,r20,r19
 800b12c:	2162b03a 	or	r17,r4,r5
 800b130:	04bf0344 	movi	r18,-1011
 800b134:	90e5c83a 	sub	r18,r18,r3
 800b138:	0029883a 	mov	r20,zero
 800b13c:	0011883a 	mov	r8,zero
 800b140:	003f9606 	br	800af9c <__alt_data_end+0xfc00af9c>
 800b144:	8184b03a 	or	r2,r16,r6
 800b148:	10001f1e 	bne	r2,zero,800b1c8 <__divdf3+0x2a8>
 800b14c:	0021883a 	mov	r16,zero
 800b150:	002b883a 	mov	r21,zero
 800b154:	01c00084 	movi	r7,2
 800b158:	003fa206 	br	800afe4 <__alt_data_end+0xfc00afe4>
 800b15c:	8184b03a 	or	r2,r16,r6
 800b160:	10001526 	beq	r2,zero,800b1b8 <__divdf3+0x298>
 800b164:	80013d26 	beq	r16,zero,800b65c <__divdf3+0x73c>
 800b168:	8009883a 	mov	r4,r16
 800b16c:	d9800215 	stw	r6,8(sp)
 800b170:	da000315 	stw	r8,12(sp)
 800b174:	da400415 	stw	r9,16(sp)
 800b178:	800ce1c0 	call	800ce1c <__clzsi2>
 800b17c:	d9800217 	ldw	r6,8(sp)
 800b180:	da000317 	ldw	r8,12(sp)
 800b184:	da400417 	ldw	r9,16(sp)
 800b188:	1007883a 	mov	r3,r2
 800b18c:	01000a04 	movi	r4,40
 800b190:	1d7ffe04 	addi	r21,r3,-8
 800b194:	20c9c83a 	sub	r4,r4,r3
 800b198:	8560983a 	sll	r16,r16,r21
 800b19c:	3108d83a 	srl	r4,r6,r4
 800b1a0:	356a983a 	sll	r21,r6,r21
 800b1a4:	2420b03a 	or	r16,r4,r16
 800b1a8:	017f0344 	movi	r5,-1011
 800b1ac:	28cbc83a 	sub	r5,r5,r3
 800b1b0:	000f883a 	mov	r7,zero
 800b1b4:	003f8b06 	br	800afe4 <__alt_data_end+0xfc00afe4>
 800b1b8:	0021883a 	mov	r16,zero
 800b1bc:	002b883a 	mov	r21,zero
 800b1c0:	01c00044 	movi	r7,1
 800b1c4:	003f8706 	br	800afe4 <__alt_data_end+0xfc00afe4>
 800b1c8:	01c000c4 	movi	r7,3
 800b1cc:	003f8506 	br	800afe4 <__alt_data_end+0xfc00afe4>
 800b1d0:	05000104 	movi	r20,4
 800b1d4:	0023883a 	mov	r17,zero
 800b1d8:	0027883a 	mov	r19,zero
 800b1dc:	02000044 	movi	r8,1
 800b1e0:	003f6e06 	br	800af9c <__alt_data_end+0xfc00af9c>
 800b1e4:	05000304 	movi	r20,12
 800b1e8:	020000c4 	movi	r8,3
 800b1ec:	003f6b06 	br	800af9c <__alt_data_end+0xfc00af9c>
 800b1f0:	01400434 	movhi	r5,16
 800b1f4:	000d883a 	mov	r6,zero
 800b1f8:	297fffc4 	addi	r5,r5,-1
 800b1fc:	04ffffc4 	movi	r19,-1
 800b200:	0201ffc4 	movi	r8,2047
 800b204:	003fa406 	br	800b098 <__alt_data_end+0xfc00b098>
 800b208:	043f0084 	movi	r16,-1022
 800b20c:	84a1c83a 	sub	r16,r16,r18
 800b210:	00800e04 	movi	r2,56
 800b214:	14014d0e 	bge	r2,r16,800b74c <__divdf3+0x82c>
 800b218:	a180004c 	andi	r6,r20,1
 800b21c:	0011883a 	mov	r8,zero
 800b220:	000b883a 	mov	r5,zero
 800b224:	0027883a 	mov	r19,zero
 800b228:	003f9b06 	br	800b098 <__alt_data_end+0xfc00b098>
 800b22c:	8880022c 	andhi	r2,r17,8
 800b230:	1000f026 	beq	r2,zero,800b5f4 <__divdf3+0x6d4>
 800b234:	8080022c 	andhi	r2,r16,8
 800b238:	1000ee1e 	bne	r2,zero,800b5f4 <__divdf3+0x6d4>
 800b23c:	00800434 	movhi	r2,16
 800b240:	81400234 	orhi	r5,r16,8
 800b244:	10bfffc4 	addi	r2,r2,-1
 800b248:	b80d883a 	mov	r6,r23
 800b24c:	288a703a 	and	r5,r5,r2
 800b250:	a827883a 	mov	r19,r21
 800b254:	003fea06 	br	800b200 <__alt_data_end+0xfc00b200>
 800b258:	84411c36 	bltu	r16,r17,800b6cc <__divdf3+0x7ac>
 800b25c:	8c011a26 	beq	r17,r16,800b6c8 <__divdf3+0x7a8>
 800b260:	94bfffc4 	addi	r18,r18,-1
 800b264:	dcc00015 	stw	r19,0(sp)
 800b268:	8811883a 	mov	r8,r17
 800b26c:	002d883a 	mov	r22,zero
 800b270:	a80cd63a 	srli	r6,r21,24
 800b274:	8020923a 	slli	r16,r16,8
 800b278:	a82a923a 	slli	r21,r21,8
 800b27c:	4009883a 	mov	r4,r8
 800b280:	342eb03a 	or	r23,r6,r16
 800b284:	dd400115 	stw	r21,4(sp)
 800b288:	b82ad43a 	srli	r21,r23,16
 800b28c:	da000315 	stw	r8,12(sp)
 800b290:	bcffffcc 	andi	r19,r23,65535
 800b294:	a80b883a 	mov	r5,r21
 800b298:	800a64c0 	call	800a64c <__udivsi3>
 800b29c:	1009883a 	mov	r4,r2
 800b2a0:	980b883a 	mov	r5,r19
 800b2a4:	1023883a 	mov	r17,r2
 800b2a8:	800a65c0 	call	800a65c <__mulsi3>
 800b2ac:	da000317 	ldw	r8,12(sp)
 800b2b0:	a80b883a 	mov	r5,r21
 800b2b4:	1039883a 	mov	fp,r2
 800b2b8:	4009883a 	mov	r4,r8
 800b2bc:	800a6540 	call	800a654 <__umodsi3>
 800b2c0:	d8c00017 	ldw	r3,0(sp)
 800b2c4:	1004943a 	slli	r2,r2,16
 800b2c8:	1810d43a 	srli	r8,r3,16
 800b2cc:	120eb03a 	or	r7,r2,r8
 800b2d0:	3f00062e 	bgeu	r7,fp,800b2ec <__divdf3+0x3cc>
 800b2d4:	3dcf883a 	add	r7,r7,r23
 800b2d8:	88bfffc4 	addi	r2,r17,-1
 800b2dc:	3dc10a36 	bltu	r7,r23,800b708 <__divdf3+0x7e8>
 800b2e0:	3f01092e 	bgeu	r7,fp,800b708 <__divdf3+0x7e8>
 800b2e4:	8c7fff84 	addi	r17,r17,-2
 800b2e8:	3dcf883a 	add	r7,r7,r23
 800b2ec:	3f39c83a 	sub	fp,r7,fp
 800b2f0:	e009883a 	mov	r4,fp
 800b2f4:	a80b883a 	mov	r5,r21
 800b2f8:	800a64c0 	call	800a64c <__udivsi3>
 800b2fc:	1009883a 	mov	r4,r2
 800b300:	980b883a 	mov	r5,r19
 800b304:	1021883a 	mov	r16,r2
 800b308:	800a65c0 	call	800a65c <__mulsi3>
 800b30c:	e009883a 	mov	r4,fp
 800b310:	a80b883a 	mov	r5,r21
 800b314:	d8800315 	stw	r2,12(sp)
 800b318:	800a6540 	call	800a654 <__umodsi3>
 800b31c:	d9000017 	ldw	r4,0(sp)
 800b320:	1004943a 	slli	r2,r2,16
 800b324:	da000317 	ldw	r8,12(sp)
 800b328:	20ffffcc 	andi	r3,r4,65535
 800b32c:	10ceb03a 	or	r7,r2,r3
 800b330:	3a00062e 	bgeu	r7,r8,800b34c <__divdf3+0x42c>
 800b334:	3dcf883a 	add	r7,r7,r23
 800b338:	80bfffc4 	addi	r2,r16,-1
 800b33c:	3dc0f036 	bltu	r7,r23,800b700 <__divdf3+0x7e0>
 800b340:	3a00ef2e 	bgeu	r7,r8,800b700 <__divdf3+0x7e0>
 800b344:	843fff84 	addi	r16,r16,-2
 800b348:	3dcf883a 	add	r7,r7,r23
 800b34c:	d8c00117 	ldw	r3,4(sp)
 800b350:	8822943a 	slli	r17,r17,16
 800b354:	3a0fc83a 	sub	r7,r7,r8
 800b358:	1806d43a 	srli	r3,r3,16
 800b35c:	8462b03a 	or	r17,r16,r17
 800b360:	8affffcc 	andi	r11,r17,65535
 800b364:	d8c00015 	stw	r3,0(sp)
 800b368:	d8c00117 	ldw	r3,4(sp)
 800b36c:	8820d43a 	srli	r16,r17,16
 800b370:	5809883a 	mov	r4,r11
 800b374:	1f3fffcc 	andi	fp,r3,65535
 800b378:	e00b883a 	mov	r5,fp
 800b37c:	d9c00515 	stw	r7,20(sp)
 800b380:	dac00215 	stw	r11,8(sp)
 800b384:	800a65c0 	call	800a65c <__mulsi3>
 800b388:	8009883a 	mov	r4,r16
 800b38c:	e00b883a 	mov	r5,fp
 800b390:	d8800415 	stw	r2,16(sp)
 800b394:	800a65c0 	call	800a65c <__mulsi3>
 800b398:	d9400017 	ldw	r5,0(sp)
 800b39c:	8009883a 	mov	r4,r16
 800b3a0:	d8800315 	stw	r2,12(sp)
 800b3a4:	800a65c0 	call	800a65c <__mulsi3>
 800b3a8:	dac00217 	ldw	r11,8(sp)
 800b3ac:	d9400017 	ldw	r5,0(sp)
 800b3b0:	d8800215 	stw	r2,8(sp)
 800b3b4:	5809883a 	mov	r4,r11
 800b3b8:	800a65c0 	call	800a65c <__mulsi3>
 800b3bc:	da400417 	ldw	r9,16(sp)
 800b3c0:	da800317 	ldw	r10,12(sp)
 800b3c4:	d9c00517 	ldw	r7,20(sp)
 800b3c8:	480ad43a 	srli	r5,r9,16
 800b3cc:	5085883a 	add	r2,r10,r2
 800b3d0:	db000217 	ldw	r12,8(sp)
 800b3d4:	1151883a 	add	r8,r2,r5
 800b3d8:	4280022e 	bgeu	r8,r10,800b3e4 <__divdf3+0x4c4>
 800b3dc:	00800074 	movhi	r2,1
 800b3e0:	6099883a 	add	r12,r12,r2
 800b3e4:	400ad43a 	srli	r5,r8,16
 800b3e8:	4010943a 	slli	r8,r8,16
 800b3ec:	4c3fffcc 	andi	r16,r9,65535
 800b3f0:	6149883a 	add	r4,r12,r5
 800b3f4:	4411883a 	add	r8,r8,r16
 800b3f8:	3900a736 	bltu	r7,r4,800b698 <__divdf3+0x778>
 800b3fc:	3900c426 	beq	r7,r4,800b710 <__divdf3+0x7f0>
 800b400:	3909c83a 	sub	r4,r7,r4
 800b404:	b221c83a 	sub	r16,r22,r8
 800b408:	b42d803a 	cmpltu	r22,r22,r16
 800b40c:	25adc83a 	sub	r22,r4,r22
 800b410:	b5c0c626 	beq	r22,r23,800b72c <__divdf3+0x80c>
 800b414:	b009883a 	mov	r4,r22
 800b418:	a80b883a 	mov	r5,r21
 800b41c:	800a64c0 	call	800a64c <__udivsi3>
 800b420:	1009883a 	mov	r4,r2
 800b424:	980b883a 	mov	r5,r19
 800b428:	d8800315 	stw	r2,12(sp)
 800b42c:	800a65c0 	call	800a65c <__mulsi3>
 800b430:	a80b883a 	mov	r5,r21
 800b434:	b009883a 	mov	r4,r22
 800b438:	d8800415 	stw	r2,16(sp)
 800b43c:	800a6540 	call	800a654 <__umodsi3>
 800b440:	1004943a 	slli	r2,r2,16
 800b444:	800ed43a 	srli	r7,r16,16
 800b448:	da400417 	ldw	r9,16(sp)
 800b44c:	da000317 	ldw	r8,12(sp)
 800b450:	11cab03a 	or	r5,r2,r7
 800b454:	2a40062e 	bgeu	r5,r9,800b470 <__divdf3+0x550>
 800b458:	2dcb883a 	add	r5,r5,r23
 800b45c:	40bfffc4 	addi	r2,r8,-1
 800b460:	2dc0b436 	bltu	r5,r23,800b734 <__divdf3+0x814>
 800b464:	2a40b32e 	bgeu	r5,r9,800b734 <__divdf3+0x814>
 800b468:	423fff84 	addi	r8,r8,-2
 800b46c:	2dcb883a 	add	r5,r5,r23
 800b470:	2a6dc83a 	sub	r22,r5,r9
 800b474:	b009883a 	mov	r4,r22
 800b478:	a80b883a 	mov	r5,r21
 800b47c:	da000315 	stw	r8,12(sp)
 800b480:	800a64c0 	call	800a64c <__udivsi3>
 800b484:	980b883a 	mov	r5,r19
 800b488:	1009883a 	mov	r4,r2
 800b48c:	d8800415 	stw	r2,16(sp)
 800b490:	800a65c0 	call	800a65c <__mulsi3>
 800b494:	b009883a 	mov	r4,r22
 800b498:	a80b883a 	mov	r5,r21
 800b49c:	1027883a 	mov	r19,r2
 800b4a0:	800a6540 	call	800a654 <__umodsi3>
 800b4a4:	1004943a 	slli	r2,r2,16
 800b4a8:	843fffcc 	andi	r16,r16,65535
 800b4ac:	da000317 	ldw	r8,12(sp)
 800b4b0:	140eb03a 	or	r7,r2,r16
 800b4b4:	da400417 	ldw	r9,16(sp)
 800b4b8:	3cc0062e 	bgeu	r7,r19,800b4d4 <__divdf3+0x5b4>
 800b4bc:	3dcf883a 	add	r7,r7,r23
 800b4c0:	48bfffc4 	addi	r2,r9,-1
 800b4c4:	3dc09d36 	bltu	r7,r23,800b73c <__divdf3+0x81c>
 800b4c8:	3cc09c2e 	bgeu	r7,r19,800b73c <__divdf3+0x81c>
 800b4cc:	4a7fff84 	addi	r9,r9,-2
 800b4d0:	3dcf883a 	add	r7,r7,r23
 800b4d4:	4010943a 	slli	r8,r8,16
 800b4d8:	3cebc83a 	sub	r21,r7,r19
 800b4dc:	e00b883a 	mov	r5,fp
 800b4e0:	4a26b03a 	or	r19,r9,r8
 800b4e4:	99ffffcc 	andi	r7,r19,65535
 800b4e8:	9820d43a 	srli	r16,r19,16
 800b4ec:	3809883a 	mov	r4,r7
 800b4f0:	d9c00515 	stw	r7,20(sp)
 800b4f4:	800a65c0 	call	800a65c <__mulsi3>
 800b4f8:	8009883a 	mov	r4,r16
 800b4fc:	e00b883a 	mov	r5,fp
 800b500:	102d883a 	mov	r22,r2
 800b504:	800a65c0 	call	800a65c <__mulsi3>
 800b508:	d9400017 	ldw	r5,0(sp)
 800b50c:	8009883a 	mov	r4,r16
 800b510:	1039883a 	mov	fp,r2
 800b514:	800a65c0 	call	800a65c <__mulsi3>
 800b518:	d9c00517 	ldw	r7,20(sp)
 800b51c:	d9400017 	ldw	r5,0(sp)
 800b520:	1021883a 	mov	r16,r2
 800b524:	3809883a 	mov	r4,r7
 800b528:	800a65c0 	call	800a65c <__mulsi3>
 800b52c:	b008d43a 	srli	r4,r22,16
 800b530:	e085883a 	add	r2,fp,r2
 800b534:	1109883a 	add	r4,r2,r4
 800b538:	2700022e 	bgeu	r4,fp,800b544 <__divdf3+0x624>
 800b53c:	00800074 	movhi	r2,1
 800b540:	80a1883a 	add	r16,r16,r2
 800b544:	200ad43a 	srli	r5,r4,16
 800b548:	2008943a 	slli	r4,r4,16
 800b54c:	b5bfffcc 	andi	r22,r22,65535
 800b550:	8145883a 	add	r2,r16,r5
 800b554:	2589883a 	add	r4,r4,r22
 800b558:	a8802c36 	bltu	r21,r2,800b60c <__divdf3+0x6ec>
 800b55c:	a880a426 	beq	r21,r2,800b7f0 <__divdf3+0x8d0>
 800b560:	9cc00054 	ori	r19,r19,1
 800b564:	9200ffc4 	addi	r8,r18,1023
 800b568:	023f270e 	bge	zero,r8,800b208 <__alt_data_end+0xfc00b208>
 800b56c:	988001cc 	andi	r2,r19,7
 800b570:	10000726 	beq	r2,zero,800b590 <__divdf3+0x670>
 800b574:	990003cc 	andi	r4,r19,15
 800b578:	00800104 	movi	r2,4
 800b57c:	20800426 	beq	r4,r2,800b590 <__divdf3+0x670>
 800b580:	9885883a 	add	r2,r19,r2
 800b584:	14e7803a 	cmpltu	r19,r2,r19
 800b588:	8ce3883a 	add	r17,r17,r19
 800b58c:	1027883a 	mov	r19,r2
 800b590:	8880402c 	andhi	r2,r17,256
 800b594:	10000426 	beq	r2,zero,800b5a8 <__divdf3+0x688>
 800b598:	00bfc034 	movhi	r2,65280
 800b59c:	10bfffc4 	addi	r2,r2,-1
 800b5a0:	92010004 	addi	r8,r18,1024
 800b5a4:	88a2703a 	and	r17,r17,r2
 800b5a8:	0081ff84 	movi	r2,2046
 800b5ac:	123eb616 	blt	r2,r8,800b088 <__alt_data_end+0xfc00b088>
 800b5b0:	9826d0fa 	srli	r19,r19,3
 800b5b4:	8804977a 	slli	r2,r17,29
 800b5b8:	8820927a 	slli	r16,r17,9
 800b5bc:	4201ffcc 	andi	r8,r8,2047
 800b5c0:	14e6b03a 	or	r19,r2,r19
 800b5c4:	800ad33a 	srli	r5,r16,12
 800b5c8:	a180004c 	andi	r6,r20,1
 800b5cc:	003eb206 	br	800b098 <__alt_data_end+0xfc00b098>
 800b5d0:	008000c4 	movi	r2,3
 800b5d4:	4080ac26 	beq	r8,r2,800b888 <__divdf3+0x968>
 800b5d8:	00800044 	movi	r2,1
 800b5dc:	4080591e 	bne	r8,r2,800b744 <__divdf3+0x824>
 800b5e0:	e00d883a 	mov	r6,fp
 800b5e4:	0011883a 	mov	r8,zero
 800b5e8:	000b883a 	mov	r5,zero
 800b5ec:	0027883a 	mov	r19,zero
 800b5f0:	003ea906 	br	800b098 <__alt_data_end+0xfc00b098>
 800b5f4:	00800434 	movhi	r2,16
 800b5f8:	89400234 	orhi	r5,r17,8
 800b5fc:	10bfffc4 	addi	r2,r2,-1
 800b600:	b00d883a 	mov	r6,r22
 800b604:	288a703a 	and	r5,r5,r2
 800b608:	003efd06 	br	800b200 <__alt_data_end+0xfc00b200>
 800b60c:	adcf883a 	add	r7,r21,r23
 800b610:	997fffc4 	addi	r5,r19,-1
 800b614:	3dc0412e 	bgeu	r7,r23,800b71c <__divdf3+0x7fc>
 800b618:	2827883a 	mov	r19,r5
 800b61c:	38bfd01e 	bne	r7,r2,800b560 <__alt_data_end+0xfc00b560>
 800b620:	d8c00117 	ldw	r3,4(sp)
 800b624:	193fce1e 	bne	r3,r4,800b560 <__alt_data_end+0xfc00b560>
 800b628:	003fce06 	br	800b564 <__alt_data_end+0xfc00b564>
 800b62c:	d9800215 	stw	r6,8(sp)
 800b630:	d9c00515 	stw	r7,20(sp)
 800b634:	800ce1c0 	call	800ce1c <__clzsi2>
 800b638:	10c00804 	addi	r3,r2,32
 800b63c:	010009c4 	movi	r4,39
 800b640:	d9800217 	ldw	r6,8(sp)
 800b644:	d9c00517 	ldw	r7,20(sp)
 800b648:	20feb20e 	bge	r4,r3,800b114 <__alt_data_end+0xfc00b114>
 800b64c:	117ffe04 	addi	r5,r2,-8
 800b650:	a162983a 	sll	r17,r20,r5
 800b654:	0027883a 	mov	r19,zero
 800b658:	003eb506 	br	800b130 <__alt_data_end+0xfc00b130>
 800b65c:	3009883a 	mov	r4,r6
 800b660:	d9800215 	stw	r6,8(sp)
 800b664:	da000315 	stw	r8,12(sp)
 800b668:	da400415 	stw	r9,16(sp)
 800b66c:	800ce1c0 	call	800ce1c <__clzsi2>
 800b670:	10c00804 	addi	r3,r2,32
 800b674:	010009c4 	movi	r4,39
 800b678:	d9800217 	ldw	r6,8(sp)
 800b67c:	da000317 	ldw	r8,12(sp)
 800b680:	da400417 	ldw	r9,16(sp)
 800b684:	20fec10e 	bge	r4,r3,800b18c <__alt_data_end+0xfc00b18c>
 800b688:	10bffe04 	addi	r2,r2,-8
 800b68c:	a8a0983a 	sll	r16,r21,r2
 800b690:	002b883a 	mov	r21,zero
 800b694:	003ec406 	br	800b1a8 <__alt_data_end+0xfc00b1a8>
 800b698:	d8c00117 	ldw	r3,4(sp)
 800b69c:	b0ed883a 	add	r22,r22,r3
 800b6a0:	b0c5803a 	cmpltu	r2,r22,r3
 800b6a4:	15c5883a 	add	r2,r2,r23
 800b6a8:	11cf883a 	add	r7,r2,r7
 800b6ac:	88bfffc4 	addi	r2,r17,-1
 800b6b0:	b9c00d2e 	bgeu	r23,r7,800b6e8 <__divdf3+0x7c8>
 800b6b4:	39003f36 	bltu	r7,r4,800b7b4 <__divdf3+0x894>
 800b6b8:	21c06a26 	beq	r4,r7,800b864 <__divdf3+0x944>
 800b6bc:	3909c83a 	sub	r4,r7,r4
 800b6c0:	1023883a 	mov	r17,r2
 800b6c4:	003f4f06 	br	800b404 <__alt_data_end+0xfc00b404>
 800b6c8:	9d7ee536 	bltu	r19,r21,800b260 <__alt_data_end+0xfc00b260>
 800b6cc:	982ed07a 	srli	r23,r19,1
 800b6d0:	880497fa 	slli	r2,r17,31
 800b6d4:	8810d07a 	srli	r8,r17,1
 800b6d8:	982c97fa 	slli	r22,r19,31
 800b6dc:	b884b03a 	or	r2,r23,r2
 800b6e0:	d8800015 	stw	r2,0(sp)
 800b6e4:	003ee206 	br	800b270 <__alt_data_end+0xfc00b270>
 800b6e8:	3dfff41e 	bne	r7,r23,800b6bc <__alt_data_end+0xfc00b6bc>
 800b6ec:	d8c00117 	ldw	r3,4(sp)
 800b6f0:	b0fff02e 	bgeu	r22,r3,800b6b4 <__alt_data_end+0xfc00b6b4>
 800b6f4:	b909c83a 	sub	r4,r23,r4
 800b6f8:	1023883a 	mov	r17,r2
 800b6fc:	003f4106 	br	800b404 <__alt_data_end+0xfc00b404>
 800b700:	1021883a 	mov	r16,r2
 800b704:	003f1106 	br	800b34c <__alt_data_end+0xfc00b34c>
 800b708:	1023883a 	mov	r17,r2
 800b70c:	003ef706 	br	800b2ec <__alt_data_end+0xfc00b2ec>
 800b710:	b23fe136 	bltu	r22,r8,800b698 <__alt_data_end+0xfc00b698>
 800b714:	0009883a 	mov	r4,zero
 800b718:	003f3a06 	br	800b404 <__alt_data_end+0xfc00b404>
 800b71c:	38802c36 	bltu	r7,r2,800b7d0 <__divdf3+0x8b0>
 800b720:	11c05326 	beq	r2,r7,800b870 <__divdf3+0x950>
 800b724:	2827883a 	mov	r19,r5
 800b728:	003f8d06 	br	800b560 <__alt_data_end+0xfc00b560>
 800b72c:	04ffffc4 	movi	r19,-1
 800b730:	003f8c06 	br	800b564 <__alt_data_end+0xfc00b564>
 800b734:	1011883a 	mov	r8,r2
 800b738:	003f4d06 	br	800b470 <__alt_data_end+0xfc00b470>
 800b73c:	1013883a 	mov	r9,r2
 800b740:	003f6406 	br	800b4d4 <__alt_data_end+0xfc00b4d4>
 800b744:	e029883a 	mov	r20,fp
 800b748:	003f8606 	br	800b564 <__alt_data_end+0xfc00b564>
 800b74c:	008007c4 	movi	r2,31
 800b750:	14002a16 	blt	r2,r16,800b7fc <__divdf3+0x8dc>
 800b754:	91410784 	addi	r5,r18,1054
 800b758:	9c0cd83a 	srl	r6,r19,r16
 800b75c:	8948983a 	sll	r4,r17,r5
 800b760:	9944983a 	sll	r2,r19,r5
 800b764:	8c20d83a 	srl	r16,r17,r16
 800b768:	3108b03a 	or	r4,r6,r4
 800b76c:	1004c03a 	cmpne	r2,r2,zero
 800b770:	2084b03a 	or	r2,r4,r2
 800b774:	110001cc 	andi	r4,r2,7
 800b778:	20000726 	beq	r4,zero,800b798 <__divdf3+0x878>
 800b77c:	114003cc 	andi	r5,r2,15
 800b780:	01000104 	movi	r4,4
 800b784:	29000426 	beq	r5,r4,800b798 <__divdf3+0x878>
 800b788:	11000104 	addi	r4,r2,4
 800b78c:	2085803a 	cmpltu	r2,r4,r2
 800b790:	80a1883a 	add	r16,r16,r2
 800b794:	2005883a 	mov	r2,r4
 800b798:	8100202c 	andhi	r4,r16,128
 800b79c:	20002d26 	beq	r4,zero,800b854 <__divdf3+0x934>
 800b7a0:	a180004c 	andi	r6,r20,1
 800b7a4:	02000044 	movi	r8,1
 800b7a8:	000b883a 	mov	r5,zero
 800b7ac:	0027883a 	mov	r19,zero
 800b7b0:	003e3906 	br	800b098 <__alt_data_end+0xfc00b098>
 800b7b4:	d8c00117 	ldw	r3,4(sp)
 800b7b8:	8c7fff84 	addi	r17,r17,-2
 800b7bc:	b0ed883a 	add	r22,r22,r3
 800b7c0:	b0c5803a 	cmpltu	r2,r22,r3
 800b7c4:	15c5883a 	add	r2,r2,r23
 800b7c8:	11cf883a 	add	r7,r2,r7
 800b7cc:	003f0c06 	br	800b400 <__alt_data_end+0xfc00b400>
 800b7d0:	d8c00117 	ldw	r3,4(sp)
 800b7d4:	997fff84 	addi	r5,r19,-2
 800b7d8:	18d1883a 	add	r8,r3,r3
 800b7dc:	40c7803a 	cmpltu	r3,r8,r3
 800b7e0:	1dcd883a 	add	r6,r3,r23
 800b7e4:	398f883a 	add	r7,r7,r6
 800b7e8:	da000115 	stw	r8,4(sp)
 800b7ec:	003f8a06 	br	800b618 <__alt_data_end+0xfc00b618>
 800b7f0:	203f861e 	bne	r4,zero,800b60c <__alt_data_end+0xfc00b60c>
 800b7f4:	d8000115 	stw	zero,4(sp)
 800b7f8:	003f8906 	br	800b620 <__alt_data_end+0xfc00b620>
 800b7fc:	00bef884 	movi	r2,-1054
 800b800:	1485c83a 	sub	r2,r2,r18
 800b804:	01000804 	movi	r4,32
 800b808:	8884d83a 	srl	r2,r17,r2
 800b80c:	81001c26 	beq	r16,r4,800b880 <__divdf3+0x960>
 800b810:	91010f84 	addi	r4,r18,1086
 800b814:	8908983a 	sll	r4,r17,r4
 800b818:	24c8b03a 	or	r4,r4,r19
 800b81c:	2008c03a 	cmpne	r4,r4,zero
 800b820:	2084b03a 	or	r2,r4,r2
 800b824:	140001cc 	andi	r16,r2,7
 800b828:	8000061e 	bne	r16,zero,800b844 <__divdf3+0x924>
 800b82c:	000b883a 	mov	r5,zero
 800b830:	1004d0fa 	srli	r2,r2,3
 800b834:	a180004c 	andi	r6,r20,1
 800b838:	0011883a 	mov	r8,zero
 800b83c:	1426b03a 	or	r19,r2,r16
 800b840:	003e1506 	br	800b098 <__alt_data_end+0xfc00b098>
 800b844:	114003cc 	andi	r5,r2,15
 800b848:	01000104 	movi	r4,4
 800b84c:	0021883a 	mov	r16,zero
 800b850:	293fcd1e 	bne	r5,r4,800b788 <__alt_data_end+0xfc00b788>
 800b854:	800a927a 	slli	r5,r16,9
 800b858:	8020977a 	slli	r16,r16,29
 800b85c:	280ad33a 	srli	r5,r5,12
 800b860:	003ff306 	br	800b830 <__alt_data_end+0xfc00b830>
 800b864:	b23fd336 	bltu	r22,r8,800b7b4 <__alt_data_end+0xfc00b7b4>
 800b868:	1023883a 	mov	r17,r2
 800b86c:	003fa906 	br	800b714 <__alt_data_end+0xfc00b714>
 800b870:	d8c00117 	ldw	r3,4(sp)
 800b874:	193fd636 	bltu	r3,r4,800b7d0 <__alt_data_end+0xfc00b7d0>
 800b878:	2827883a 	mov	r19,r5
 800b87c:	003f6806 	br	800b620 <__alt_data_end+0xfc00b620>
 800b880:	0009883a 	mov	r4,zero
 800b884:	003fe406 	br	800b818 <__alt_data_end+0xfc00b818>
 800b888:	00800434 	movhi	r2,16
 800b88c:	89400234 	orhi	r5,r17,8
 800b890:	10bfffc4 	addi	r2,r2,-1
 800b894:	e00d883a 	mov	r6,fp
 800b898:	288a703a 	and	r5,r5,r2
 800b89c:	003e5806 	br	800b200 <__alt_data_end+0xfc00b200>

0800b8a0 <__eqdf2>:
 800b8a0:	2804d53a 	srli	r2,r5,20
 800b8a4:	3806d53a 	srli	r3,r7,20
 800b8a8:	02000434 	movhi	r8,16
 800b8ac:	423fffc4 	addi	r8,r8,-1
 800b8b0:	1081ffcc 	andi	r2,r2,2047
 800b8b4:	0241ffc4 	movi	r9,2047
 800b8b8:	2a14703a 	and	r10,r5,r8
 800b8bc:	18c1ffcc 	andi	r3,r3,2047
 800b8c0:	3a10703a 	and	r8,r7,r8
 800b8c4:	280ad7fa 	srli	r5,r5,31
 800b8c8:	380ed7fa 	srli	r7,r7,31
 800b8cc:	12400f26 	beq	r2,r9,800b90c <__eqdf2+0x6c>
 800b8d0:	0241ffc4 	movi	r9,2047
 800b8d4:	1a400326 	beq	r3,r9,800b8e4 <__eqdf2+0x44>
 800b8d8:	10c00526 	beq	r2,r3,800b8f0 <__eqdf2+0x50>
 800b8dc:	00800044 	movi	r2,1
 800b8e0:	f800283a 	ret
 800b8e4:	4192b03a 	or	r9,r8,r6
 800b8e8:	483ffc1e 	bne	r9,zero,800b8dc <__alt_data_end+0xfc00b8dc>
 800b8ec:	10fffb1e 	bne	r2,r3,800b8dc <__alt_data_end+0xfc00b8dc>
 800b8f0:	523ffa1e 	bne	r10,r8,800b8dc <__alt_data_end+0xfc00b8dc>
 800b8f4:	21bff91e 	bne	r4,r6,800b8dc <__alt_data_end+0xfc00b8dc>
 800b8f8:	29c00826 	beq	r5,r7,800b91c <__eqdf2+0x7c>
 800b8fc:	103ff71e 	bne	r2,zero,800b8dc <__alt_data_end+0xfc00b8dc>
 800b900:	5104b03a 	or	r2,r10,r4
 800b904:	1004c03a 	cmpne	r2,r2,zero
 800b908:	f800283a 	ret
 800b90c:	5112b03a 	or	r9,r10,r4
 800b910:	483fef26 	beq	r9,zero,800b8d0 <__alt_data_end+0xfc00b8d0>
 800b914:	00800044 	movi	r2,1
 800b918:	f800283a 	ret
 800b91c:	0005883a 	mov	r2,zero
 800b920:	f800283a 	ret

0800b924 <__gedf2>:
 800b924:	2804d53a 	srli	r2,r5,20
 800b928:	3806d53a 	srli	r3,r7,20
 800b92c:	02000434 	movhi	r8,16
 800b930:	423fffc4 	addi	r8,r8,-1
 800b934:	0241ffc4 	movi	r9,2047
 800b938:	1081ffcc 	andi	r2,r2,2047
 800b93c:	2a14703a 	and	r10,r5,r8
 800b940:	1a46703a 	and	r3,r3,r9
 800b944:	3a10703a 	and	r8,r7,r8
 800b948:	280ad7fa 	srli	r5,r5,31
 800b94c:	380ed7fa 	srli	r7,r7,31
 800b950:	12400b26 	beq	r2,r9,800b980 <__gedf2+0x5c>
 800b954:	1a401626 	beq	r3,r9,800b9b0 <__gedf2+0x8c>
 800b958:	10000c1e 	bne	r2,zero,800b98c <__gedf2+0x68>
 800b95c:	5112b03a 	or	r9,r10,r4
 800b960:	4813003a 	cmpeq	r9,r9,zero
 800b964:	4817883a 	mov	r11,r9
 800b968:	18000c1e 	bne	r3,zero,800b99c <__gedf2+0x78>
 800b96c:	4198b03a 	or	r12,r8,r6
 800b970:	60000a1e 	bne	r12,zero,800b99c <__gedf2+0x78>
 800b974:	48001326 	beq	r9,zero,800b9c4 <__gedf2+0xa0>
 800b978:	0005883a 	mov	r2,zero
 800b97c:	f800283a 	ret
 800b980:	5112b03a 	or	r9,r10,r4
 800b984:	4800191e 	bne	r9,zero,800b9ec <__gedf2+0xc8>
 800b988:	18800926 	beq	r3,r2,800b9b0 <__gedf2+0x8c>
 800b98c:	18000b1e 	bne	r3,zero,800b9bc <__gedf2+0x98>
 800b990:	4192b03a 	or	r9,r8,r6
 800b994:	0017883a 	mov	r11,zero
 800b998:	48000a26 	beq	r9,zero,800b9c4 <__gedf2+0xa0>
 800b99c:	39c03fcc 	andi	r7,r7,255
 800b9a0:	58000726 	beq	r11,zero,800b9c0 <__gedf2+0x9c>
 800b9a4:	3800081e 	bne	r7,zero,800b9c8 <__gedf2+0xa4>
 800b9a8:	00bfffc4 	movi	r2,-1
 800b9ac:	f800283a 	ret
 800b9b0:	4192b03a 	or	r9,r8,r6
 800b9b4:	48000d1e 	bne	r9,zero,800b9ec <__gedf2+0xc8>
 800b9b8:	103fe826 	beq	r2,zero,800b95c <__alt_data_end+0xfc00b95c>
 800b9bc:	39c03fcc 	andi	r7,r7,255
 800b9c0:	29c00326 	beq	r5,r7,800b9d0 <__gedf2+0xac>
 800b9c4:	283ff81e 	bne	r5,zero,800b9a8 <__alt_data_end+0xfc00b9a8>
 800b9c8:	00800044 	movi	r2,1
 800b9cc:	f800283a 	ret
 800b9d0:	18bffc16 	blt	r3,r2,800b9c4 <__alt_data_end+0xfc00b9c4>
 800b9d4:	10c00316 	blt	r2,r3,800b9e4 <__gedf2+0xc0>
 800b9d8:	42bffa36 	bltu	r8,r10,800b9c4 <__alt_data_end+0xfc00b9c4>
 800b9dc:	52000526 	beq	r10,r8,800b9f4 <__gedf2+0xd0>
 800b9e0:	523fe52e 	bgeu	r10,r8,800b978 <__alt_data_end+0xfc00b978>
 800b9e4:	283ff026 	beq	r5,zero,800b9a8 <__alt_data_end+0xfc00b9a8>
 800b9e8:	003ff706 	br	800b9c8 <__alt_data_end+0xfc00b9c8>
 800b9ec:	00bfff84 	movi	r2,-2
 800b9f0:	f800283a 	ret
 800b9f4:	313ff336 	bltu	r6,r4,800b9c4 <__alt_data_end+0xfc00b9c4>
 800b9f8:	21bfdf2e 	bgeu	r4,r6,800b978 <__alt_data_end+0xfc00b978>
 800b9fc:	283fea26 	beq	r5,zero,800b9a8 <__alt_data_end+0xfc00b9a8>
 800ba00:	003ff106 	br	800b9c8 <__alt_data_end+0xfc00b9c8>

0800ba04 <__ledf2>:
 800ba04:	2804d53a 	srli	r2,r5,20
 800ba08:	3810d53a 	srli	r8,r7,20
 800ba0c:	00c00434 	movhi	r3,16
 800ba10:	18ffffc4 	addi	r3,r3,-1
 800ba14:	0241ffc4 	movi	r9,2047
 800ba18:	1081ffcc 	andi	r2,r2,2047
 800ba1c:	28d4703a 	and	r10,r5,r3
 800ba20:	4250703a 	and	r8,r8,r9
 800ba24:	38c6703a 	and	r3,r7,r3
 800ba28:	280ad7fa 	srli	r5,r5,31
 800ba2c:	380ed7fa 	srli	r7,r7,31
 800ba30:	12400b26 	beq	r2,r9,800ba60 <__ledf2+0x5c>
 800ba34:	42401926 	beq	r8,r9,800ba9c <__ledf2+0x98>
 800ba38:	10000c1e 	bne	r2,zero,800ba6c <__ledf2+0x68>
 800ba3c:	5112b03a 	or	r9,r10,r4
 800ba40:	4813003a 	cmpeq	r9,r9,zero
 800ba44:	4817883a 	mov	r11,r9
 800ba48:	40000f26 	beq	r8,zero,800ba88 <__ledf2+0x84>
 800ba4c:	39c03fcc 	andi	r7,r7,255
 800ba50:	58001826 	beq	r11,zero,800bab4 <__ledf2+0xb0>
 800ba54:	38000a1e 	bne	r7,zero,800ba80 <__ledf2+0x7c>
 800ba58:	00bfffc4 	movi	r2,-1
 800ba5c:	f800283a 	ret
 800ba60:	5112b03a 	or	r9,r10,r4
 800ba64:	48000f1e 	bne	r9,zero,800baa4 <__ledf2+0xa0>
 800ba68:	40800c26 	beq	r8,r2,800ba9c <__ledf2+0x98>
 800ba6c:	4000101e 	bne	r8,zero,800bab0 <__ledf2+0xac>
 800ba70:	1992b03a 	or	r9,r3,r6
 800ba74:	0017883a 	mov	r11,zero
 800ba78:	483ff41e 	bne	r9,zero,800ba4c <__alt_data_end+0xfc00ba4c>
 800ba7c:	283ff61e 	bne	r5,zero,800ba58 <__alt_data_end+0xfc00ba58>
 800ba80:	00800044 	movi	r2,1
 800ba84:	f800283a 	ret
 800ba88:	1998b03a 	or	r12,r3,r6
 800ba8c:	603fef1e 	bne	r12,zero,800ba4c <__alt_data_end+0xfc00ba4c>
 800ba90:	483ffa26 	beq	r9,zero,800ba7c <__alt_data_end+0xfc00ba7c>
 800ba94:	0005883a 	mov	r2,zero
 800ba98:	f800283a 	ret
 800ba9c:	1992b03a 	or	r9,r3,r6
 800baa0:	48000226 	beq	r9,zero,800baac <__ledf2+0xa8>
 800baa4:	00800084 	movi	r2,2
 800baa8:	f800283a 	ret
 800baac:	103fe326 	beq	r2,zero,800ba3c <__alt_data_end+0xfc00ba3c>
 800bab0:	39c03fcc 	andi	r7,r7,255
 800bab4:	29fff11e 	bne	r5,r7,800ba7c <__alt_data_end+0xfc00ba7c>
 800bab8:	40bff016 	blt	r8,r2,800ba7c <__alt_data_end+0xfc00ba7c>
 800babc:	12000316 	blt	r2,r8,800bacc <__ledf2+0xc8>
 800bac0:	1abfee36 	bltu	r3,r10,800ba7c <__alt_data_end+0xfc00ba7c>
 800bac4:	50c00326 	beq	r10,r3,800bad4 <__ledf2+0xd0>
 800bac8:	50fff22e 	bgeu	r10,r3,800ba94 <__alt_data_end+0xfc00ba94>
 800bacc:	283fe226 	beq	r5,zero,800ba58 <__alt_data_end+0xfc00ba58>
 800bad0:	003feb06 	br	800ba80 <__alt_data_end+0xfc00ba80>
 800bad4:	313fe936 	bltu	r6,r4,800ba7c <__alt_data_end+0xfc00ba7c>
 800bad8:	21bfee2e 	bgeu	r4,r6,800ba94 <__alt_data_end+0xfc00ba94>
 800badc:	283fde26 	beq	r5,zero,800ba58 <__alt_data_end+0xfc00ba58>
 800bae0:	003fe706 	br	800ba80 <__alt_data_end+0xfc00ba80>

0800bae4 <__muldf3>:
 800bae4:	deffee04 	addi	sp,sp,-72
 800bae8:	dd000c15 	stw	r20,48(sp)
 800baec:	2828d53a 	srli	r20,r5,20
 800baf0:	dd400d15 	stw	r21,52(sp)
 800baf4:	282ad7fa 	srli	r21,r5,31
 800baf8:	dc000815 	stw	r16,32(sp)
 800bafc:	04000434 	movhi	r16,16
 800bb00:	ddc00f15 	stw	r23,60(sp)
 800bb04:	dcc00b15 	stw	r19,44(sp)
 800bb08:	dc800a15 	stw	r18,40(sp)
 800bb0c:	843fffc4 	addi	r16,r16,-1
 800bb10:	dfc01115 	stw	ra,68(sp)
 800bb14:	df001015 	stw	fp,64(sp)
 800bb18:	dd800e15 	stw	r22,56(sp)
 800bb1c:	dc400915 	stw	r17,36(sp)
 800bb20:	a501ffcc 	andi	r20,r20,2047
 800bb24:	2025883a 	mov	r18,r4
 800bb28:	202f883a 	mov	r23,r4
 800bb2c:	2c20703a 	and	r16,r5,r16
 800bb30:	a827883a 	mov	r19,r21
 800bb34:	aa403fcc 	andi	r9,r21,255
 800bb38:	a0005926 	beq	r20,zero,800bca0 <__muldf3+0x1bc>
 800bb3c:	0081ffc4 	movi	r2,2047
 800bb40:	a0803426 	beq	r20,r2,800bc14 <__muldf3+0x130>
 800bb44:	84000434 	orhi	r16,r16,16
 800bb48:	2004d77a 	srli	r2,r4,29
 800bb4c:	802090fa 	slli	r16,r16,3
 800bb50:	202e90fa 	slli	r23,r4,3
 800bb54:	a53f0044 	addi	r20,r20,-1023
 800bb58:	80a0b03a 	or	r16,r16,r2
 800bb5c:	000b883a 	mov	r5,zero
 800bb60:	0039883a 	mov	fp,zero
 800bb64:	3806d53a 	srli	r3,r7,20
 800bb68:	382cd7fa 	srli	r22,r7,31
 800bb6c:	00800434 	movhi	r2,16
 800bb70:	10bfffc4 	addi	r2,r2,-1
 800bb74:	18c1ffcc 	andi	r3,r3,2047
 800bb78:	3025883a 	mov	r18,r6
 800bb7c:	38a2703a 	and	r17,r7,r2
 800bb80:	b2803fcc 	andi	r10,r22,255
 800bb84:	18006426 	beq	r3,zero,800bd18 <__muldf3+0x234>
 800bb88:	0081ffc4 	movi	r2,2047
 800bb8c:	18805c26 	beq	r3,r2,800bd00 <__muldf3+0x21c>
 800bb90:	8c400434 	orhi	r17,r17,16
 800bb94:	3004d77a 	srli	r2,r6,29
 800bb98:	882290fa 	slli	r17,r17,3
 800bb9c:	302490fa 	slli	r18,r6,3
 800bba0:	18ff0044 	addi	r3,r3,-1023
 800bba4:	88a2b03a 	or	r17,r17,r2
 800bba8:	000f883a 	mov	r7,zero
 800bbac:	394ab03a 	or	r5,r7,r5
 800bbb0:	280a90ba 	slli	r5,r5,2
 800bbb4:	00820074 	movhi	r2,2049
 800bbb8:	10aef504 	addi	r2,r2,-17452
 800bbbc:	288b883a 	add	r5,r5,r2
 800bbc0:	28800017 	ldw	r2,0(r5)
 800bbc4:	a0c7883a 	add	r3,r20,r3
 800bbc8:	b54cf03a 	xor	r6,r22,r21
 800bbcc:	1a000044 	addi	r8,r3,1
 800bbd0:	1000683a 	jmp	r2
 800bbd4:	0800be18 	cmpnei	zero,at,760
 800bbd8:	0800be04 	addi	zero,at,760
 800bbdc:	0800be04 	addi	zero,at,760
 800bbe0:	0800bdf0 	cmpltui	zero,at,759
 800bbe4:	0800bc30 	cmpltui	zero,at,752
 800bbe8:	0800bc30 	cmpltui	zero,at,752
 800bbec:	0800bdd8 	cmpnei	zero,at,759
 800bbf0:	0800bdf0 	cmpltui	zero,at,759
 800bbf4:	0800bc30 	cmpltui	zero,at,752
 800bbf8:	0800bdd8 	cmpnei	zero,at,759
 800bbfc:	0800bc30 	cmpltui	zero,at,752
 800bc00:	0800bdf0 	cmpltui	zero,at,759
 800bc04:	0800bc34 	orhi	zero,at,752
 800bc08:	0800bc34 	orhi	zero,at,752
 800bc0c:	0800bc34 	orhi	zero,at,752
 800bc10:	0800c154 	ori	zero,at,773
 800bc14:	8104b03a 	or	r2,r16,r4
 800bc18:	10006c1e 	bne	r2,zero,800bdcc <__muldf3+0x2e8>
 800bc1c:	01400204 	movi	r5,8
 800bc20:	0021883a 	mov	r16,zero
 800bc24:	002f883a 	mov	r23,zero
 800bc28:	07000084 	movi	fp,2
 800bc2c:	003fcd06 	br	800bb64 <__alt_data_end+0xfc00bb64>
 800bc30:	3013883a 	mov	r9,r6
 800bc34:	00800084 	movi	r2,2
 800bc38:	e080501e 	bne	fp,r2,800bd7c <__muldf3+0x298>
 800bc3c:	4cc0004c 	andi	r19,r9,1
 800bc40:	0101ffc4 	movi	r4,2047
 800bc44:	0021883a 	mov	r16,zero
 800bc48:	002f883a 	mov	r23,zero
 800bc4c:	2008953a 	slli	r4,r4,20
 800bc50:	98c03fcc 	andi	r3,r19,255
 800bc54:	04400434 	movhi	r17,16
 800bc58:	8c7fffc4 	addi	r17,r17,-1
 800bc5c:	180697fa 	slli	r3,r3,31
 800bc60:	8460703a 	and	r16,r16,r17
 800bc64:	8120b03a 	or	r16,r16,r4
 800bc68:	80c6b03a 	or	r3,r16,r3
 800bc6c:	b805883a 	mov	r2,r23
 800bc70:	dfc01117 	ldw	ra,68(sp)
 800bc74:	df001017 	ldw	fp,64(sp)
 800bc78:	ddc00f17 	ldw	r23,60(sp)
 800bc7c:	dd800e17 	ldw	r22,56(sp)
 800bc80:	dd400d17 	ldw	r21,52(sp)
 800bc84:	dd000c17 	ldw	r20,48(sp)
 800bc88:	dcc00b17 	ldw	r19,44(sp)
 800bc8c:	dc800a17 	ldw	r18,40(sp)
 800bc90:	dc400917 	ldw	r17,36(sp)
 800bc94:	dc000817 	ldw	r16,32(sp)
 800bc98:	dec01204 	addi	sp,sp,72
 800bc9c:	f800283a 	ret
 800bca0:	8104b03a 	or	r2,r16,r4
 800bca4:	10004426 	beq	r2,zero,800bdb8 <__muldf3+0x2d4>
 800bca8:	80014b26 	beq	r16,zero,800c1d8 <__muldf3+0x6f4>
 800bcac:	8009883a 	mov	r4,r16
 800bcb0:	d9800715 	stw	r6,28(sp)
 800bcb4:	d9c00215 	stw	r7,8(sp)
 800bcb8:	da400415 	stw	r9,16(sp)
 800bcbc:	800ce1c0 	call	800ce1c <__clzsi2>
 800bcc0:	d9800717 	ldw	r6,28(sp)
 800bcc4:	d9c00217 	ldw	r7,8(sp)
 800bcc8:	da400417 	ldw	r9,16(sp)
 800bccc:	1007883a 	mov	r3,r2
 800bcd0:	01000a04 	movi	r4,40
 800bcd4:	1dfffe04 	addi	r23,r3,-8
 800bcd8:	20c9c83a 	sub	r4,r4,r3
 800bcdc:	85e0983a 	sll	r16,r16,r23
 800bce0:	9108d83a 	srl	r4,r18,r4
 800bce4:	95ee983a 	sll	r23,r18,r23
 800bce8:	2420b03a 	or	r16,r4,r16
 800bcec:	053f0344 	movi	r20,-1011
 800bcf0:	a0e9c83a 	sub	r20,r20,r3
 800bcf4:	000b883a 	mov	r5,zero
 800bcf8:	0039883a 	mov	fp,zero
 800bcfc:	003f9906 	br	800bb64 <__alt_data_end+0xfc00bb64>
 800bd00:	8984b03a 	or	r2,r17,r6
 800bd04:	10002a1e 	bne	r2,zero,800bdb0 <__muldf3+0x2cc>
 800bd08:	0023883a 	mov	r17,zero
 800bd0c:	0025883a 	mov	r18,zero
 800bd10:	01c00084 	movi	r7,2
 800bd14:	003fa506 	br	800bbac <__alt_data_end+0xfc00bbac>
 800bd18:	8984b03a 	or	r2,r17,r6
 800bd1c:	10002026 	beq	r2,zero,800bda0 <__muldf3+0x2bc>
 800bd20:	88011c26 	beq	r17,zero,800c194 <__muldf3+0x6b0>
 800bd24:	8809883a 	mov	r4,r17
 800bd28:	d9400215 	stw	r5,8(sp)
 800bd2c:	d9800715 	stw	r6,28(sp)
 800bd30:	da400415 	stw	r9,16(sp)
 800bd34:	da800315 	stw	r10,12(sp)
 800bd38:	800ce1c0 	call	800ce1c <__clzsi2>
 800bd3c:	d9400217 	ldw	r5,8(sp)
 800bd40:	d9800717 	ldw	r6,28(sp)
 800bd44:	da400417 	ldw	r9,16(sp)
 800bd48:	da800317 	ldw	r10,12(sp)
 800bd4c:	1007883a 	mov	r3,r2
 800bd50:	01000a04 	movi	r4,40
 800bd54:	1cbffe04 	addi	r18,r3,-8
 800bd58:	20c9c83a 	sub	r4,r4,r3
 800bd5c:	8ca2983a 	sll	r17,r17,r18
 800bd60:	3108d83a 	srl	r4,r6,r4
 800bd64:	34a4983a 	sll	r18,r6,r18
 800bd68:	2462b03a 	or	r17,r4,r17
 800bd6c:	00bf0344 	movi	r2,-1011
 800bd70:	10c7c83a 	sub	r3,r2,r3
 800bd74:	000f883a 	mov	r7,zero
 800bd78:	003f8c06 	br	800bbac <__alt_data_end+0xfc00bbac>
 800bd7c:	008000c4 	movi	r2,3
 800bd80:	e0816d26 	beq	fp,r2,800c338 <__muldf3+0x854>
 800bd84:	00800044 	movi	r2,1
 800bd88:	e081321e 	bne	fp,r2,800c254 <__muldf3+0x770>
 800bd8c:	48a6703a 	and	r19,r9,r2
 800bd90:	0009883a 	mov	r4,zero
 800bd94:	0021883a 	mov	r16,zero
 800bd98:	002f883a 	mov	r23,zero
 800bd9c:	003fab06 	br	800bc4c <__alt_data_end+0xfc00bc4c>
 800bda0:	0023883a 	mov	r17,zero
 800bda4:	0025883a 	mov	r18,zero
 800bda8:	01c00044 	movi	r7,1
 800bdac:	003f7f06 	br	800bbac <__alt_data_end+0xfc00bbac>
 800bdb0:	01c000c4 	movi	r7,3
 800bdb4:	003f7d06 	br	800bbac <__alt_data_end+0xfc00bbac>
 800bdb8:	01400104 	movi	r5,4
 800bdbc:	0021883a 	mov	r16,zero
 800bdc0:	002f883a 	mov	r23,zero
 800bdc4:	07000044 	movi	fp,1
 800bdc8:	003f6606 	br	800bb64 <__alt_data_end+0xfc00bb64>
 800bdcc:	01400304 	movi	r5,12
 800bdd0:	070000c4 	movi	fp,3
 800bdd4:	003f6306 	br	800bb64 <__alt_data_end+0xfc00bb64>
 800bdd8:	04000434 	movhi	r16,16
 800bddc:	0027883a 	mov	r19,zero
 800bde0:	843fffc4 	addi	r16,r16,-1
 800bde4:	05ffffc4 	movi	r23,-1
 800bde8:	0101ffc4 	movi	r4,2047
 800bdec:	003f9706 	br	800bc4c <__alt_data_end+0xfc00bc4c>
 800bdf0:	8821883a 	mov	r16,r17
 800bdf4:	902f883a 	mov	r23,r18
 800bdf8:	5013883a 	mov	r9,r10
 800bdfc:	3839883a 	mov	fp,r7
 800be00:	003f8c06 	br	800bc34 <__alt_data_end+0xfc00bc34>
 800be04:	8821883a 	mov	r16,r17
 800be08:	902f883a 	mov	r23,r18
 800be0c:	3013883a 	mov	r9,r6
 800be10:	3839883a 	mov	fp,r7
 800be14:	003f8706 	br	800bc34 <__alt_data_end+0xfc00bc34>
 800be18:	b82ad43a 	srli	r21,r23,16
 800be1c:	9038d43a 	srli	fp,r18,16
 800be20:	bdffffcc 	andi	r23,r23,65535
 800be24:	94bfffcc 	andi	r18,r18,65535
 800be28:	9009883a 	mov	r4,r18
 800be2c:	b80b883a 	mov	r5,r23
 800be30:	d8c00515 	stw	r3,20(sp)
 800be34:	d9800715 	stw	r6,28(sp)
 800be38:	da000615 	stw	r8,24(sp)
 800be3c:	800a65c0 	call	800a65c <__mulsi3>
 800be40:	9009883a 	mov	r4,r18
 800be44:	a80b883a 	mov	r5,r21
 800be48:	1029883a 	mov	r20,r2
 800be4c:	800a65c0 	call	800a65c <__mulsi3>
 800be50:	e009883a 	mov	r4,fp
 800be54:	a80b883a 	mov	r5,r21
 800be58:	102d883a 	mov	r22,r2
 800be5c:	800a65c0 	call	800a65c <__mulsi3>
 800be60:	e009883a 	mov	r4,fp
 800be64:	b80b883a 	mov	r5,r23
 800be68:	1027883a 	mov	r19,r2
 800be6c:	800a65c0 	call	800a65c <__mulsi3>
 800be70:	a008d43a 	srli	r4,r20,16
 800be74:	b085883a 	add	r2,r22,r2
 800be78:	d8c00517 	ldw	r3,20(sp)
 800be7c:	110f883a 	add	r7,r2,r4
 800be80:	d9800717 	ldw	r6,28(sp)
 800be84:	da000617 	ldw	r8,24(sp)
 800be88:	3d80022e 	bgeu	r7,r22,800be94 <__muldf3+0x3b0>
 800be8c:	00800074 	movhi	r2,1
 800be90:	98a7883a 	add	r19,r19,r2
 800be94:	3804943a 	slli	r2,r7,16
 800be98:	380ed43a 	srli	r7,r7,16
 800be9c:	882cd43a 	srli	r22,r17,16
 800bea0:	a53fffcc 	andi	r20,r20,65535
 800bea4:	8c7fffcc 	andi	r17,r17,65535
 800bea8:	1529883a 	add	r20,r2,r20
 800beac:	8809883a 	mov	r4,r17
 800beb0:	b80b883a 	mov	r5,r23
 800beb4:	d8c00515 	stw	r3,20(sp)
 800beb8:	d9800715 	stw	r6,28(sp)
 800bebc:	da000615 	stw	r8,24(sp)
 800bec0:	d9c00015 	stw	r7,0(sp)
 800bec4:	dd000115 	stw	r20,4(sp)
 800bec8:	800a65c0 	call	800a65c <__mulsi3>
 800becc:	a80b883a 	mov	r5,r21
 800bed0:	8809883a 	mov	r4,r17
 800bed4:	d8800415 	stw	r2,16(sp)
 800bed8:	800a65c0 	call	800a65c <__mulsi3>
 800bedc:	a80b883a 	mov	r5,r21
 800bee0:	b009883a 	mov	r4,r22
 800bee4:	1029883a 	mov	r20,r2
 800bee8:	800a65c0 	call	800a65c <__mulsi3>
 800beec:	b009883a 	mov	r4,r22
 800bef0:	b80b883a 	mov	r5,r23
 800bef4:	102b883a 	mov	r21,r2
 800bef8:	800a65c0 	call	800a65c <__mulsi3>
 800befc:	da400417 	ldw	r9,16(sp)
 800bf00:	a085883a 	add	r2,r20,r2
 800bf04:	d8c00517 	ldw	r3,20(sp)
 800bf08:	4808d43a 	srli	r4,r9,16
 800bf0c:	d9800717 	ldw	r6,28(sp)
 800bf10:	da000617 	ldw	r8,24(sp)
 800bf14:	1109883a 	add	r4,r2,r4
 800bf18:	2500022e 	bgeu	r4,r20,800bf24 <__muldf3+0x440>
 800bf1c:	00800074 	movhi	r2,1
 800bf20:	a8ab883a 	add	r21,r21,r2
 800bf24:	200e943a 	slli	r7,r4,16
 800bf28:	2004d43a 	srli	r2,r4,16
 800bf2c:	802ed43a 	srli	r23,r16,16
 800bf30:	843fffcc 	andi	r16,r16,65535
 800bf34:	4d3fffcc 	andi	r20,r9,65535
 800bf38:	9009883a 	mov	r4,r18
 800bf3c:	800b883a 	mov	r5,r16
 800bf40:	3d29883a 	add	r20,r7,r20
 800bf44:	d8c00515 	stw	r3,20(sp)
 800bf48:	d9800715 	stw	r6,28(sp)
 800bf4c:	da000615 	stw	r8,24(sp)
 800bf50:	a8ab883a 	add	r21,r21,r2
 800bf54:	800a65c0 	call	800a65c <__mulsi3>
 800bf58:	9009883a 	mov	r4,r18
 800bf5c:	b80b883a 	mov	r5,r23
 800bf60:	d8800315 	stw	r2,12(sp)
 800bf64:	800a65c0 	call	800a65c <__mulsi3>
 800bf68:	e009883a 	mov	r4,fp
 800bf6c:	b80b883a 	mov	r5,r23
 800bf70:	1025883a 	mov	r18,r2
 800bf74:	800a65c0 	call	800a65c <__mulsi3>
 800bf78:	e009883a 	mov	r4,fp
 800bf7c:	800b883a 	mov	r5,r16
 800bf80:	d8800215 	stw	r2,8(sp)
 800bf84:	800a65c0 	call	800a65c <__mulsi3>
 800bf88:	da800317 	ldw	r10,12(sp)
 800bf8c:	d9400017 	ldw	r5,0(sp)
 800bf90:	9085883a 	add	r2,r18,r2
 800bf94:	5008d43a 	srli	r4,r10,16
 800bf98:	a153883a 	add	r9,r20,r5
 800bf9c:	d8c00517 	ldw	r3,20(sp)
 800bfa0:	1109883a 	add	r4,r2,r4
 800bfa4:	d9800717 	ldw	r6,28(sp)
 800bfa8:	da000617 	ldw	r8,24(sp)
 800bfac:	dac00217 	ldw	r11,8(sp)
 800bfb0:	2480022e 	bgeu	r4,r18,800bfbc <__muldf3+0x4d8>
 800bfb4:	00800074 	movhi	r2,1
 800bfb8:	5897883a 	add	r11,r11,r2
 800bfbc:	200e943a 	slli	r7,r4,16
 800bfc0:	2038d43a 	srli	fp,r4,16
 800bfc4:	52bfffcc 	andi	r10,r10,65535
 800bfc8:	3a8f883a 	add	r7,r7,r10
 800bfcc:	8809883a 	mov	r4,r17
 800bfd0:	800b883a 	mov	r5,r16
 800bfd4:	d8c00515 	stw	r3,20(sp)
 800bfd8:	d9800715 	stw	r6,28(sp)
 800bfdc:	d9c00215 	stw	r7,8(sp)
 800bfe0:	da000615 	stw	r8,24(sp)
 800bfe4:	da400415 	stw	r9,16(sp)
 800bfe8:	5f39883a 	add	fp,r11,fp
 800bfec:	800a65c0 	call	800a65c <__mulsi3>
 800bff0:	8809883a 	mov	r4,r17
 800bff4:	b80b883a 	mov	r5,r23
 800bff8:	1025883a 	mov	r18,r2
 800bffc:	800a65c0 	call	800a65c <__mulsi3>
 800c000:	b009883a 	mov	r4,r22
 800c004:	b80b883a 	mov	r5,r23
 800c008:	d8800315 	stw	r2,12(sp)
 800c00c:	800a65c0 	call	800a65c <__mulsi3>
 800c010:	b009883a 	mov	r4,r22
 800c014:	800b883a 	mov	r5,r16
 800c018:	1023883a 	mov	r17,r2
 800c01c:	800a65c0 	call	800a65c <__mulsi3>
 800c020:	da800317 	ldw	r10,12(sp)
 800c024:	9008d43a 	srli	r4,r18,16
 800c028:	d8c00517 	ldw	r3,20(sp)
 800c02c:	5085883a 	add	r2,r10,r2
 800c030:	1109883a 	add	r4,r2,r4
 800c034:	d9800717 	ldw	r6,28(sp)
 800c038:	d9c00217 	ldw	r7,8(sp)
 800c03c:	da000617 	ldw	r8,24(sp)
 800c040:	da400417 	ldw	r9,16(sp)
 800c044:	2280022e 	bgeu	r4,r10,800c050 <__muldf3+0x56c>
 800c048:	00800074 	movhi	r2,1
 800c04c:	88a3883a 	add	r17,r17,r2
 800c050:	2004943a 	slli	r2,r4,16
 800c054:	94bfffcc 	andi	r18,r18,65535
 800c058:	4ce7883a 	add	r19,r9,r19
 800c05c:	14a5883a 	add	r18,r2,r18
 800c060:	9d29803a 	cmpltu	r20,r19,r20
 800c064:	9565883a 	add	r18,r18,r21
 800c068:	9505883a 	add	r2,r18,r20
 800c06c:	99e7883a 	add	r19,r19,r7
 800c070:	99cf803a 	cmpltu	r7,r19,r7
 800c074:	e08b883a 	add	r5,fp,r2
 800c078:	2008d43a 	srli	r4,r4,16
 800c07c:	29ef883a 	add	r23,r5,r7
 800c080:	1529803a 	cmpltu	r20,r2,r20
 800c084:	956b803a 	cmpltu	r21,r18,r21
 800c088:	b9cf803a 	cmpltu	r7,r23,r7
 800c08c:	a564b03a 	or	r18,r20,r21
 800c090:	2f39803a 	cmpltu	fp,r5,fp
 800c094:	9125883a 	add	r18,r18,r4
 800c098:	3f38b03a 	or	fp,r7,fp
 800c09c:	9725883a 	add	r18,r18,fp
 800c0a0:	9804927a 	slli	r2,r19,9
 800c0a4:	9463883a 	add	r17,r18,r17
 800c0a8:	d9000117 	ldw	r4,4(sp)
 800c0ac:	b820d5fa 	srli	r16,r23,23
 800c0b0:	8822927a 	slli	r17,r17,9
 800c0b4:	9826d5fa 	srli	r19,r19,23
 800c0b8:	1104b03a 	or	r2,r2,r4
 800c0bc:	b82e927a 	slli	r23,r23,9
 800c0c0:	1004c03a 	cmpne	r2,r2,zero
 800c0c4:	8c20b03a 	or	r16,r17,r16
 800c0c8:	14e6b03a 	or	r19,r2,r19
 800c0cc:	8080402c 	andhi	r2,r16,256
 800c0d0:	9deeb03a 	or	r23,r19,r23
 800c0d4:	10000726 	beq	r2,zero,800c0f4 <__muldf3+0x610>
 800c0d8:	b804d07a 	srli	r2,r23,1
 800c0dc:	800697fa 	slli	r3,r16,31
 800c0e0:	bdc0004c 	andi	r23,r23,1
 800c0e4:	8020d07a 	srli	r16,r16,1
 800c0e8:	b8aeb03a 	or	r23,r23,r2
 800c0ec:	b8eeb03a 	or	r23,r23,r3
 800c0f0:	4007883a 	mov	r3,r8
 800c0f4:	1900ffc4 	addi	r4,r3,1023
 800c0f8:	01004d0e 	bge	zero,r4,800c230 <__muldf3+0x74c>
 800c0fc:	b88001cc 	andi	r2,r23,7
 800c100:	10000726 	beq	r2,zero,800c120 <__muldf3+0x63c>
 800c104:	b94003cc 	andi	r5,r23,15
 800c108:	00800104 	movi	r2,4
 800c10c:	28800426 	beq	r5,r2,800c120 <__muldf3+0x63c>
 800c110:	b885883a 	add	r2,r23,r2
 800c114:	15ef803a 	cmpltu	r23,r2,r23
 800c118:	85e1883a 	add	r16,r16,r23
 800c11c:	102f883a 	mov	r23,r2
 800c120:	8080402c 	andhi	r2,r16,256
 800c124:	10000426 	beq	r2,zero,800c138 <__muldf3+0x654>
 800c128:	00bfc034 	movhi	r2,65280
 800c12c:	10bfffc4 	addi	r2,r2,-1
 800c130:	19010004 	addi	r4,r3,1024
 800c134:	80a0703a 	and	r16,r16,r2
 800c138:	0081ff84 	movi	r2,2046
 800c13c:	1100340e 	bge	r2,r4,800c210 <__muldf3+0x72c>
 800c140:	34c0004c 	andi	r19,r6,1
 800c144:	0101ffc4 	movi	r4,2047
 800c148:	0021883a 	mov	r16,zero
 800c14c:	002f883a 	mov	r23,zero
 800c150:	003ebe06 	br	800bc4c <__alt_data_end+0xfc00bc4c>
 800c154:	8080022c 	andhi	r2,r16,8
 800c158:	10000926 	beq	r2,zero,800c180 <__muldf3+0x69c>
 800c15c:	8880022c 	andhi	r2,r17,8
 800c160:	1000071e 	bne	r2,zero,800c180 <__muldf3+0x69c>
 800c164:	00800434 	movhi	r2,16
 800c168:	8c000234 	orhi	r16,r17,8
 800c16c:	10bfffc4 	addi	r2,r2,-1
 800c170:	b027883a 	mov	r19,r22
 800c174:	80a0703a 	and	r16,r16,r2
 800c178:	902f883a 	mov	r23,r18
 800c17c:	003f1a06 	br	800bde8 <__alt_data_end+0xfc00bde8>
 800c180:	00800434 	movhi	r2,16
 800c184:	84000234 	orhi	r16,r16,8
 800c188:	10bfffc4 	addi	r2,r2,-1
 800c18c:	80a0703a 	and	r16,r16,r2
 800c190:	003f1506 	br	800bde8 <__alt_data_end+0xfc00bde8>
 800c194:	3009883a 	mov	r4,r6
 800c198:	d9400215 	stw	r5,8(sp)
 800c19c:	d9800715 	stw	r6,28(sp)
 800c1a0:	da400415 	stw	r9,16(sp)
 800c1a4:	da800315 	stw	r10,12(sp)
 800c1a8:	800ce1c0 	call	800ce1c <__clzsi2>
 800c1ac:	10c00804 	addi	r3,r2,32
 800c1b0:	010009c4 	movi	r4,39
 800c1b4:	d9400217 	ldw	r5,8(sp)
 800c1b8:	d9800717 	ldw	r6,28(sp)
 800c1bc:	da400417 	ldw	r9,16(sp)
 800c1c0:	da800317 	ldw	r10,12(sp)
 800c1c4:	20fee20e 	bge	r4,r3,800bd50 <__alt_data_end+0xfc00bd50>
 800c1c8:	147ffe04 	addi	r17,r2,-8
 800c1cc:	9462983a 	sll	r17,r18,r17
 800c1d0:	0025883a 	mov	r18,zero
 800c1d4:	003ee506 	br	800bd6c <__alt_data_end+0xfc00bd6c>
 800c1d8:	d9800715 	stw	r6,28(sp)
 800c1dc:	d9c00215 	stw	r7,8(sp)
 800c1e0:	da400415 	stw	r9,16(sp)
 800c1e4:	800ce1c0 	call	800ce1c <__clzsi2>
 800c1e8:	10c00804 	addi	r3,r2,32
 800c1ec:	010009c4 	movi	r4,39
 800c1f0:	d9800717 	ldw	r6,28(sp)
 800c1f4:	d9c00217 	ldw	r7,8(sp)
 800c1f8:	da400417 	ldw	r9,16(sp)
 800c1fc:	20feb40e 	bge	r4,r3,800bcd0 <__alt_data_end+0xfc00bcd0>
 800c200:	143ffe04 	addi	r16,r2,-8
 800c204:	9420983a 	sll	r16,r18,r16
 800c208:	002f883a 	mov	r23,zero
 800c20c:	003eb706 	br	800bcec <__alt_data_end+0xfc00bcec>
 800c210:	8004977a 	slli	r2,r16,29
 800c214:	b82ed0fa 	srli	r23,r23,3
 800c218:	8020927a 	slli	r16,r16,9
 800c21c:	2101ffcc 	andi	r4,r4,2047
 800c220:	15eeb03a 	or	r23,r2,r23
 800c224:	8020d33a 	srli	r16,r16,12
 800c228:	34c0004c 	andi	r19,r6,1
 800c22c:	003e8706 	br	800bc4c <__alt_data_end+0xfc00bc4c>
 800c230:	00bf0084 	movi	r2,-1022
 800c234:	10c5c83a 	sub	r2,r2,r3
 800c238:	01000e04 	movi	r4,56
 800c23c:	2080080e 	bge	r4,r2,800c260 <__muldf3+0x77c>
 800c240:	34c0004c 	andi	r19,r6,1
 800c244:	0009883a 	mov	r4,zero
 800c248:	0021883a 	mov	r16,zero
 800c24c:	002f883a 	mov	r23,zero
 800c250:	003e7e06 	br	800bc4c <__alt_data_end+0xfc00bc4c>
 800c254:	4007883a 	mov	r3,r8
 800c258:	480d883a 	mov	r6,r9
 800c25c:	003fa506 	br	800c0f4 <__alt_data_end+0xfc00c0f4>
 800c260:	010007c4 	movi	r4,31
 800c264:	20801816 	blt	r4,r2,800c2c8 <__muldf3+0x7e4>
 800c268:	18c10784 	addi	r3,r3,1054
 800c26c:	80c8983a 	sll	r4,r16,r3
 800c270:	b88ad83a 	srl	r5,r23,r2
 800c274:	b8c6983a 	sll	r3,r23,r3
 800c278:	80a0d83a 	srl	r16,r16,r2
 800c27c:	2908b03a 	or	r4,r5,r4
 800c280:	1804c03a 	cmpne	r2,r3,zero
 800c284:	2088b03a 	or	r4,r4,r2
 800c288:	208001cc 	andi	r2,r4,7
 800c28c:	10000726 	beq	r2,zero,800c2ac <__muldf3+0x7c8>
 800c290:	20c003cc 	andi	r3,r4,15
 800c294:	00800104 	movi	r2,4
 800c298:	18800426 	beq	r3,r2,800c2ac <__muldf3+0x7c8>
 800c29c:	20c00104 	addi	r3,r4,4
 800c2a0:	1905803a 	cmpltu	r2,r3,r4
 800c2a4:	80a1883a 	add	r16,r16,r2
 800c2a8:	1809883a 	mov	r4,r3
 800c2ac:	8080202c 	andhi	r2,r16,128
 800c2b0:	10001b26 	beq	r2,zero,800c320 <__muldf3+0x83c>
 800c2b4:	34c0004c 	andi	r19,r6,1
 800c2b8:	01000044 	movi	r4,1
 800c2bc:	0021883a 	mov	r16,zero
 800c2c0:	002f883a 	mov	r23,zero
 800c2c4:	003e6106 	br	800bc4c <__alt_data_end+0xfc00bc4c>
 800c2c8:	013ef884 	movi	r4,-1054
 800c2cc:	20c9c83a 	sub	r4,r4,r3
 800c2d0:	01400804 	movi	r5,32
 800c2d4:	8108d83a 	srl	r4,r16,r4
 800c2d8:	11401526 	beq	r2,r5,800c330 <__muldf3+0x84c>
 800c2dc:	18c10f84 	addi	r3,r3,1086
 800c2e0:	80e0983a 	sll	r16,r16,r3
 800c2e4:	85eeb03a 	or	r23,r16,r23
 800c2e8:	b804c03a 	cmpne	r2,r23,zero
 800c2ec:	1108b03a 	or	r4,r2,r4
 800c2f0:	20c001cc 	andi	r3,r4,7
 800c2f4:	1800061e 	bne	r3,zero,800c310 <__muldf3+0x82c>
 800c2f8:	0021883a 	mov	r16,zero
 800c2fc:	202ed0fa 	srli	r23,r4,3
 800c300:	34c0004c 	andi	r19,r6,1
 800c304:	0009883a 	mov	r4,zero
 800c308:	b8eeb03a 	or	r23,r23,r3
 800c30c:	003e4f06 	br	800bc4c <__alt_data_end+0xfc00bc4c>
 800c310:	20c003cc 	andi	r3,r4,15
 800c314:	00800104 	movi	r2,4
 800c318:	0021883a 	mov	r16,zero
 800c31c:	18bfdf1e 	bne	r3,r2,800c29c <__alt_data_end+0xfc00c29c>
 800c320:	8004927a 	slli	r2,r16,9
 800c324:	8006977a 	slli	r3,r16,29
 800c328:	1020d33a 	srli	r16,r2,12
 800c32c:	003ff306 	br	800c2fc <__alt_data_end+0xfc00c2fc>
 800c330:	0021883a 	mov	r16,zero
 800c334:	003feb06 	br	800c2e4 <__alt_data_end+0xfc00c2e4>
 800c338:	00800434 	movhi	r2,16
 800c33c:	84000234 	orhi	r16,r16,8
 800c340:	10bfffc4 	addi	r2,r2,-1
 800c344:	4cc0004c 	andi	r19,r9,1
 800c348:	80a0703a 	and	r16,r16,r2
 800c34c:	003ea606 	br	800bde8 <__alt_data_end+0xfc00bde8>

0800c350 <__subdf3>:
 800c350:	00c00434 	movhi	r3,16
 800c354:	18ffffc4 	addi	r3,r3,-1
 800c358:	defffb04 	addi	sp,sp,-20
 800c35c:	28d2703a 	and	r9,r5,r3
 800c360:	3814d53a 	srli	r10,r7,20
 800c364:	38c6703a 	and	r3,r7,r3
 800c368:	3004d77a 	srli	r2,r6,29
 800c36c:	dc800215 	stw	r18,8(sp)
 800c370:	dc000015 	stw	r16,0(sp)
 800c374:	2824d7fa 	srli	r18,r5,31
 800c378:	2820d53a 	srli	r16,r5,20
 800c37c:	481290fa 	slli	r9,r9,3
 800c380:	200ad77a 	srli	r5,r4,29
 800c384:	180690fa 	slli	r3,r3,3
 800c388:	dc400115 	stw	r17,4(sp)
 800c38c:	dfc00415 	stw	ra,16(sp)
 800c390:	202290fa 	slli	r17,r4,3
 800c394:	dcc00315 	stw	r19,12(sp)
 800c398:	5281ffcc 	andi	r10,r10,2047
 800c39c:	0101ffc4 	movi	r4,2047
 800c3a0:	9011883a 	mov	r8,r18
 800c3a4:	8401ffcc 	andi	r16,r16,2047
 800c3a8:	94803fcc 	andi	r18,r18,255
 800c3ac:	494ab03a 	or	r5,r9,r5
 800c3b0:	380ed7fa 	srli	r7,r7,31
 800c3b4:	1886b03a 	or	r3,r3,r2
 800c3b8:	300c90fa 	slli	r6,r6,3
 800c3bc:	51009026 	beq	r10,r4,800c600 <__subdf3+0x2b0>
 800c3c0:	39c0005c 	xori	r7,r7,1
 800c3c4:	8285c83a 	sub	r2,r16,r10
 800c3c8:	91c06f26 	beq	r18,r7,800c588 <__subdf3+0x238>
 800c3cc:	0080b10e 	bge	zero,r2,800c694 <__subdf3+0x344>
 800c3d0:	50002a1e 	bne	r10,zero,800c47c <__subdf3+0x12c>
 800c3d4:	1988b03a 	or	r4,r3,r6
 800c3d8:	2000941e 	bne	r4,zero,800c62c <__subdf3+0x2dc>
 800c3dc:	888001cc 	andi	r2,r17,7
 800c3e0:	10005b26 	beq	r2,zero,800c550 <__subdf3+0x200>
 800c3e4:	88c003cc 	andi	r3,r17,15
 800c3e8:	00800104 	movi	r2,4
 800c3ec:	18805826 	beq	r3,r2,800c550 <__subdf3+0x200>
 800c3f0:	88c00104 	addi	r3,r17,4
 800c3f4:	1c63803a 	cmpltu	r17,r3,r17
 800c3f8:	2c4b883a 	add	r5,r5,r17
 800c3fc:	2880202c 	andhi	r2,r5,128
 800c400:	9200004c 	andi	r8,r18,1
 800c404:	1823883a 	mov	r17,r3
 800c408:	10005426 	beq	r2,zero,800c55c <__subdf3+0x20c>
 800c40c:	84000044 	addi	r16,r16,1
 800c410:	0081ffc4 	movi	r2,2047
 800c414:	8080bf26 	beq	r16,r2,800c714 <__subdf3+0x3c4>
 800c418:	013fe034 	movhi	r4,65408
 800c41c:	213fffc4 	addi	r4,r4,-1
 800c420:	290a703a 	and	r5,r5,r4
 800c424:	2804977a 	slli	r2,r5,29
 800c428:	280a927a 	slli	r5,r5,9
 800c42c:	8822d0fa 	srli	r17,r17,3
 800c430:	8401ffcc 	andi	r16,r16,2047
 800c434:	2808d33a 	srli	r4,r5,12
 800c438:	1444b03a 	or	r2,r2,r17
 800c43c:	8401ffcc 	andi	r16,r16,2047
 800c440:	800a953a 	slli	r5,r16,20
 800c444:	40c03fcc 	andi	r3,r8,255
 800c448:	04000434 	movhi	r16,16
 800c44c:	180697fa 	slli	r3,r3,31
 800c450:	843fffc4 	addi	r16,r16,-1
 800c454:	2420703a 	and	r16,r4,r16
 800c458:	8160b03a 	or	r16,r16,r5
 800c45c:	80c6b03a 	or	r3,r16,r3
 800c460:	dfc00417 	ldw	ra,16(sp)
 800c464:	dcc00317 	ldw	r19,12(sp)
 800c468:	dc800217 	ldw	r18,8(sp)
 800c46c:	dc400117 	ldw	r17,4(sp)
 800c470:	dc000017 	ldw	r16,0(sp)
 800c474:	dec00504 	addi	sp,sp,20
 800c478:	f800283a 	ret
 800c47c:	0101ffc4 	movi	r4,2047
 800c480:	813fd626 	beq	r16,r4,800c3dc <__alt_data_end+0xfc00c3dc>
 800c484:	18c02034 	orhi	r3,r3,128
 800c488:	01000e04 	movi	r4,56
 800c48c:	2080a416 	blt	r4,r2,800c720 <__subdf3+0x3d0>
 800c490:	010007c4 	movi	r4,31
 800c494:	2080c716 	blt	r4,r2,800c7b4 <__subdf3+0x464>
 800c498:	01000804 	movi	r4,32
 800c49c:	2089c83a 	sub	r4,r4,r2
 800c4a0:	1910983a 	sll	r8,r3,r4
 800c4a4:	308ed83a 	srl	r7,r6,r2
 800c4a8:	3108983a 	sll	r4,r6,r4
 800c4ac:	1884d83a 	srl	r2,r3,r2
 800c4b0:	41ccb03a 	or	r6,r8,r7
 800c4b4:	2008c03a 	cmpne	r4,r4,zero
 800c4b8:	310cb03a 	or	r6,r6,r4
 800c4bc:	898dc83a 	sub	r6,r17,r6
 800c4c0:	89a3803a 	cmpltu	r17,r17,r6
 800c4c4:	288bc83a 	sub	r5,r5,r2
 800c4c8:	2c4bc83a 	sub	r5,r5,r17
 800c4cc:	3023883a 	mov	r17,r6
 800c4d0:	2880202c 	andhi	r2,r5,128
 800c4d4:	10006b26 	beq	r2,zero,800c684 <__subdf3+0x334>
 800c4d8:	04c02034 	movhi	r19,128
 800c4dc:	9cffffc4 	addi	r19,r19,-1
 800c4e0:	2ce6703a 	and	r19,r5,r19
 800c4e4:	98007c26 	beq	r19,zero,800c6d8 <__subdf3+0x388>
 800c4e8:	9809883a 	mov	r4,r19
 800c4ec:	800ce1c0 	call	800ce1c <__clzsi2>
 800c4f0:	10fffe04 	addi	r3,r2,-8
 800c4f4:	010007c4 	movi	r4,31
 800c4f8:	20c07d16 	blt	r4,r3,800c6f0 <__subdf3+0x3a0>
 800c4fc:	01400a04 	movi	r5,40
 800c500:	2885c83a 	sub	r2,r5,r2
 800c504:	888ad83a 	srl	r5,r17,r2
 800c508:	98e6983a 	sll	r19,r19,r3
 800c50c:	88e2983a 	sll	r17,r17,r3
 800c510:	2ce6b03a 	or	r19,r5,r19
 800c514:	1c007a16 	blt	r3,r16,800c700 <__subdf3+0x3b0>
 800c518:	1c21c83a 	sub	r16,r3,r16
 800c51c:	81400044 	addi	r5,r16,1
 800c520:	00c007c4 	movi	r3,31
 800c524:	19409616 	blt	r3,r5,800c780 <__subdf3+0x430>
 800c528:	1c21c83a 	sub	r16,r3,r16
 800c52c:	8c08983a 	sll	r4,r17,r16
 800c530:	8946d83a 	srl	r3,r17,r5
 800c534:	9c20983a 	sll	r16,r19,r16
 800c538:	2008c03a 	cmpne	r4,r4,zero
 800c53c:	994ad83a 	srl	r5,r19,r5
 800c540:	1c06b03a 	or	r3,r3,r16
 800c544:	1922b03a 	or	r17,r3,r4
 800c548:	0021883a 	mov	r16,zero
 800c54c:	003fa306 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800c550:	2880202c 	andhi	r2,r5,128
 800c554:	9200004c 	andi	r8,r18,1
 800c558:	103fac1e 	bne	r2,zero,800c40c <__alt_data_end+0xfc00c40c>
 800c55c:	2804977a 	slli	r2,r5,29
 800c560:	8822d0fa 	srli	r17,r17,3
 800c564:	00c1ffc4 	movi	r3,2047
 800c568:	280ad0fa 	srli	r5,r5,3
 800c56c:	1444b03a 	or	r2,r2,r17
 800c570:	80c02726 	beq	r16,r3,800c610 <__subdf3+0x2c0>
 800c574:	01000434 	movhi	r4,16
 800c578:	213fffc4 	addi	r4,r4,-1
 800c57c:	80e0703a 	and	r16,r16,r3
 800c580:	2908703a 	and	r4,r5,r4
 800c584:	003fad06 	br	800c43c <__alt_data_end+0xfc00c43c>
 800c588:	0080690e 	bge	zero,r2,800c730 <__subdf3+0x3e0>
 800c58c:	50002f26 	beq	r10,zero,800c64c <__subdf3+0x2fc>
 800c590:	0101ffc4 	movi	r4,2047
 800c594:	813f9126 	beq	r16,r4,800c3dc <__alt_data_end+0xfc00c3dc>
 800c598:	18c02034 	orhi	r3,r3,128
 800c59c:	01000e04 	movi	r4,56
 800c5a0:	2080b00e 	bge	r4,r2,800c864 <__subdf3+0x514>
 800c5a4:	198cb03a 	or	r6,r3,r6
 800c5a8:	300ec03a 	cmpne	r7,r6,zero
 800c5ac:	0005883a 	mov	r2,zero
 800c5b0:	3c4f883a 	add	r7,r7,r17
 800c5b4:	3c63803a 	cmpltu	r17,r7,r17
 800c5b8:	114b883a 	add	r5,r2,r5
 800c5bc:	2c4b883a 	add	r5,r5,r17
 800c5c0:	3823883a 	mov	r17,r7
 800c5c4:	2880202c 	andhi	r2,r5,128
 800c5c8:	10002e26 	beq	r2,zero,800c684 <__subdf3+0x334>
 800c5cc:	84000044 	addi	r16,r16,1
 800c5d0:	0081ffc4 	movi	r2,2047
 800c5d4:	8080de26 	beq	r16,r2,800c950 <__subdf3+0x600>
 800c5d8:	00bfe034 	movhi	r2,65408
 800c5dc:	10bfffc4 	addi	r2,r2,-1
 800c5e0:	288a703a 	and	r5,r5,r2
 800c5e4:	880cd07a 	srli	r6,r17,1
 800c5e8:	280897fa 	slli	r4,r5,31
 800c5ec:	88c0004c 	andi	r3,r17,1
 800c5f0:	30e2b03a 	or	r17,r6,r3
 800c5f4:	280ad07a 	srli	r5,r5,1
 800c5f8:	8922b03a 	or	r17,r17,r4
 800c5fc:	003f7706 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800c600:	1984b03a 	or	r2,r3,r6
 800c604:	103f6e26 	beq	r2,zero,800c3c0 <__alt_data_end+0xfc00c3c0>
 800c608:	39c03fcc 	andi	r7,r7,255
 800c60c:	003f6d06 	br	800c3c4 <__alt_data_end+0xfc00c3c4>
 800c610:	1146b03a 	or	r3,r2,r5
 800c614:	18003f26 	beq	r3,zero,800c714 <__subdf3+0x3c4>
 800c618:	00c00434 	movhi	r3,16
 800c61c:	29000234 	orhi	r4,r5,8
 800c620:	18ffffc4 	addi	r3,r3,-1
 800c624:	20c8703a 	and	r4,r4,r3
 800c628:	003f8406 	br	800c43c <__alt_data_end+0xfc00c43c>
 800c62c:	10bfffc4 	addi	r2,r2,-1
 800c630:	1000501e 	bne	r2,zero,800c774 <__subdf3+0x424>
 800c634:	898fc83a 	sub	r7,r17,r6
 800c638:	89e3803a 	cmpltu	r17,r17,r7
 800c63c:	28cbc83a 	sub	r5,r5,r3
 800c640:	2c4bc83a 	sub	r5,r5,r17
 800c644:	3823883a 	mov	r17,r7
 800c648:	003fa106 	br	800c4d0 <__alt_data_end+0xfc00c4d0>
 800c64c:	1988b03a 	or	r4,r3,r6
 800c650:	203f6226 	beq	r4,zero,800c3dc <__alt_data_end+0xfc00c3dc>
 800c654:	10bfffc4 	addi	r2,r2,-1
 800c658:	10009b1e 	bne	r2,zero,800c8c8 <__subdf3+0x578>
 800c65c:	344d883a 	add	r6,r6,r17
 800c660:	3463803a 	cmpltu	r17,r6,r17
 800c664:	194b883a 	add	r5,r3,r5
 800c668:	2c4b883a 	add	r5,r5,r17
 800c66c:	3023883a 	mov	r17,r6
 800c670:	003fd406 	br	800c5c4 <__alt_data_end+0xfc00c5c4>
 800c674:	1106b03a 	or	r3,r2,r4
 800c678:	1800b426 	beq	r3,zero,800c94c <__subdf3+0x5fc>
 800c67c:	100b883a 	mov	r5,r2
 800c680:	2023883a 	mov	r17,r4
 800c684:	888001cc 	andi	r2,r17,7
 800c688:	103f561e 	bne	r2,zero,800c3e4 <__alt_data_end+0xfc00c3e4>
 800c68c:	9200004c 	andi	r8,r18,1
 800c690:	003fb206 	br	800c55c <__alt_data_end+0xfc00c55c>
 800c694:	1000531e 	bne	r2,zero,800c7e4 <__subdf3+0x494>
 800c698:	80800044 	addi	r2,r16,1
 800c69c:	1081ffcc 	andi	r2,r2,2047
 800c6a0:	01000044 	movi	r4,1
 800c6a4:	2080a00e 	bge	r4,r2,800c928 <__subdf3+0x5d8>
 800c6a8:	8985c83a 	sub	r2,r17,r6
 800c6ac:	8889803a 	cmpltu	r4,r17,r2
 800c6b0:	28e7c83a 	sub	r19,r5,r3
 800c6b4:	9927c83a 	sub	r19,r19,r4
 800c6b8:	9900202c 	andhi	r4,r19,128
 800c6bc:	20006226 	beq	r4,zero,800c848 <__subdf3+0x4f8>
 800c6c0:	3463c83a 	sub	r17,r6,r17
 800c6c4:	194bc83a 	sub	r5,r3,r5
 800c6c8:	344d803a 	cmpltu	r6,r6,r17
 800c6cc:	29a7c83a 	sub	r19,r5,r6
 800c6d0:	3825883a 	mov	r18,r7
 800c6d4:	983f841e 	bne	r19,zero,800c4e8 <__alt_data_end+0xfc00c4e8>
 800c6d8:	8809883a 	mov	r4,r17
 800c6dc:	800ce1c0 	call	800ce1c <__clzsi2>
 800c6e0:	10800804 	addi	r2,r2,32
 800c6e4:	10fffe04 	addi	r3,r2,-8
 800c6e8:	010007c4 	movi	r4,31
 800c6ec:	20ff830e 	bge	r4,r3,800c4fc <__alt_data_end+0xfc00c4fc>
 800c6f0:	14fff604 	addi	r19,r2,-40
 800c6f4:	8ce6983a 	sll	r19,r17,r19
 800c6f8:	0023883a 	mov	r17,zero
 800c6fc:	1c3f860e 	bge	r3,r16,800c518 <__alt_data_end+0xfc00c518>
 800c700:	017fe034 	movhi	r5,65408
 800c704:	297fffc4 	addi	r5,r5,-1
 800c708:	80e1c83a 	sub	r16,r16,r3
 800c70c:	994a703a 	and	r5,r19,r5
 800c710:	003f3206 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800c714:	0009883a 	mov	r4,zero
 800c718:	0005883a 	mov	r2,zero
 800c71c:	003f4706 	br	800c43c <__alt_data_end+0xfc00c43c>
 800c720:	198cb03a 	or	r6,r3,r6
 800c724:	300cc03a 	cmpne	r6,r6,zero
 800c728:	0005883a 	mov	r2,zero
 800c72c:	003f6306 	br	800c4bc <__alt_data_end+0xfc00c4bc>
 800c730:	10009d1e 	bne	r2,zero,800c9a8 <__subdf3+0x658>
 800c734:	81c00044 	addi	r7,r16,1
 800c738:	3881ffcc 	andi	r2,r7,2047
 800c73c:	02400044 	movi	r9,1
 800c740:	4880680e 	bge	r9,r2,800c8e4 <__subdf3+0x594>
 800c744:	0081ffc4 	movi	r2,2047
 800c748:	3880ae26 	beq	r7,r2,800ca04 <__subdf3+0x6b4>
 800c74c:	344d883a 	add	r6,r6,r17
 800c750:	3463803a 	cmpltu	r17,r6,r17
 800c754:	194b883a 	add	r5,r3,r5
 800c758:	2c4b883a 	add	r5,r5,r17
 800c75c:	282297fa 	slli	r17,r5,31
 800c760:	300cd07a 	srli	r6,r6,1
 800c764:	280ad07a 	srli	r5,r5,1
 800c768:	3821883a 	mov	r16,r7
 800c76c:	89a2b03a 	or	r17,r17,r6
 800c770:	003f1a06 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800c774:	0101ffc4 	movi	r4,2047
 800c778:	813f431e 	bne	r16,r4,800c488 <__alt_data_end+0xfc00c488>
 800c77c:	003f1706 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800c780:	80bff844 	addi	r2,r16,-31
 800c784:	00c00804 	movi	r3,32
 800c788:	9884d83a 	srl	r2,r19,r2
 800c78c:	28c05126 	beq	r5,r3,800c8d4 <__subdf3+0x584>
 800c790:	00c00fc4 	movi	r3,63
 800c794:	1c21c83a 	sub	r16,r3,r16
 800c798:	9c26983a 	sll	r19,r19,r16
 800c79c:	9c62b03a 	or	r17,r19,r17
 800c7a0:	8822c03a 	cmpne	r17,r17,zero
 800c7a4:	88a2b03a 	or	r17,r17,r2
 800c7a8:	000b883a 	mov	r5,zero
 800c7ac:	0021883a 	mov	r16,zero
 800c7b0:	003fb406 	br	800c684 <__alt_data_end+0xfc00c684>
 800c7b4:	113ff804 	addi	r4,r2,-32
 800c7b8:	01c00804 	movi	r7,32
 800c7bc:	1908d83a 	srl	r4,r3,r4
 800c7c0:	11c04626 	beq	r2,r7,800c8dc <__subdf3+0x58c>
 800c7c4:	01c01004 	movi	r7,64
 800c7c8:	3885c83a 	sub	r2,r7,r2
 800c7cc:	1884983a 	sll	r2,r3,r2
 800c7d0:	118cb03a 	or	r6,r2,r6
 800c7d4:	300cc03a 	cmpne	r6,r6,zero
 800c7d8:	310cb03a 	or	r6,r6,r4
 800c7dc:	0005883a 	mov	r2,zero
 800c7e0:	003f3606 	br	800c4bc <__alt_data_end+0xfc00c4bc>
 800c7e4:	80002b26 	beq	r16,zero,800c894 <__subdf3+0x544>
 800c7e8:	0101ffc4 	movi	r4,2047
 800c7ec:	51006926 	beq	r10,r4,800c994 <__subdf3+0x644>
 800c7f0:	0085c83a 	sub	r2,zero,r2
 800c7f4:	29402034 	orhi	r5,r5,128
 800c7f8:	01000e04 	movi	r4,56
 800c7fc:	20807d16 	blt	r4,r2,800c9f4 <__subdf3+0x6a4>
 800c800:	010007c4 	movi	r4,31
 800c804:	2080d916 	blt	r4,r2,800cb6c <__subdf3+0x81c>
 800c808:	01000804 	movi	r4,32
 800c80c:	2089c83a 	sub	r4,r4,r2
 800c810:	2912983a 	sll	r9,r5,r4
 800c814:	8890d83a 	srl	r8,r17,r2
 800c818:	8908983a 	sll	r4,r17,r4
 800c81c:	2884d83a 	srl	r2,r5,r2
 800c820:	4a22b03a 	or	r17,r9,r8
 800c824:	2008c03a 	cmpne	r4,r4,zero
 800c828:	8922b03a 	or	r17,r17,r4
 800c82c:	3463c83a 	sub	r17,r6,r17
 800c830:	1885c83a 	sub	r2,r3,r2
 800c834:	344d803a 	cmpltu	r6,r6,r17
 800c838:	118bc83a 	sub	r5,r2,r6
 800c83c:	5021883a 	mov	r16,r10
 800c840:	3825883a 	mov	r18,r7
 800c844:	003f2206 	br	800c4d0 <__alt_data_end+0xfc00c4d0>
 800c848:	9886b03a 	or	r3,r19,r2
 800c84c:	18001c1e 	bne	r3,zero,800c8c0 <__subdf3+0x570>
 800c850:	0011883a 	mov	r8,zero
 800c854:	000b883a 	mov	r5,zero
 800c858:	0023883a 	mov	r17,zero
 800c85c:	0021883a 	mov	r16,zero
 800c860:	003f3e06 	br	800c55c <__alt_data_end+0xfc00c55c>
 800c864:	010007c4 	movi	r4,31
 800c868:	20803c16 	blt	r4,r2,800c95c <__subdf3+0x60c>
 800c86c:	01000804 	movi	r4,32
 800c870:	2089c83a 	sub	r4,r4,r2
 800c874:	1912983a 	sll	r9,r3,r4
 800c878:	308ed83a 	srl	r7,r6,r2
 800c87c:	3108983a 	sll	r4,r6,r4
 800c880:	1884d83a 	srl	r2,r3,r2
 800c884:	49ceb03a 	or	r7,r9,r7
 800c888:	2008c03a 	cmpne	r4,r4,zero
 800c88c:	390eb03a 	or	r7,r7,r4
 800c890:	003f4706 	br	800c5b0 <__alt_data_end+0xfc00c5b0>
 800c894:	2c48b03a 	or	r4,r5,r17
 800c898:	20003e26 	beq	r4,zero,800c994 <__subdf3+0x644>
 800c89c:	0084303a 	nor	r2,zero,r2
 800c8a0:	10003a1e 	bne	r2,zero,800c98c <__subdf3+0x63c>
 800c8a4:	3463c83a 	sub	r17,r6,r17
 800c8a8:	194bc83a 	sub	r5,r3,r5
 800c8ac:	344d803a 	cmpltu	r6,r6,r17
 800c8b0:	298bc83a 	sub	r5,r5,r6
 800c8b4:	5021883a 	mov	r16,r10
 800c8b8:	3825883a 	mov	r18,r7
 800c8bc:	003f0406 	br	800c4d0 <__alt_data_end+0xfc00c4d0>
 800c8c0:	1023883a 	mov	r17,r2
 800c8c4:	003f0706 	br	800c4e4 <__alt_data_end+0xfc00c4e4>
 800c8c8:	0101ffc4 	movi	r4,2047
 800c8cc:	813f331e 	bne	r16,r4,800c59c <__alt_data_end+0xfc00c59c>
 800c8d0:	003ec206 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800c8d4:	0027883a 	mov	r19,zero
 800c8d8:	003fb006 	br	800c79c <__alt_data_end+0xfc00c79c>
 800c8dc:	0005883a 	mov	r2,zero
 800c8e0:	003fbb06 	br	800c7d0 <__alt_data_end+0xfc00c7d0>
 800c8e4:	2c44b03a 	or	r2,r5,r17
 800c8e8:	80008b1e 	bne	r16,zero,800cb18 <__subdf3+0x7c8>
 800c8ec:	1000b526 	beq	r2,zero,800cbc4 <__subdf3+0x874>
 800c8f0:	1984b03a 	or	r2,r3,r6
 800c8f4:	103eb926 	beq	r2,zero,800c3dc <__alt_data_end+0xfc00c3dc>
 800c8f8:	3449883a 	add	r4,r6,r17
 800c8fc:	2463803a 	cmpltu	r17,r4,r17
 800c900:	194b883a 	add	r5,r3,r5
 800c904:	2c4b883a 	add	r5,r5,r17
 800c908:	2880202c 	andhi	r2,r5,128
 800c90c:	2023883a 	mov	r17,r4
 800c910:	103f5c26 	beq	r2,zero,800c684 <__alt_data_end+0xfc00c684>
 800c914:	00bfe034 	movhi	r2,65408
 800c918:	10bfffc4 	addi	r2,r2,-1
 800c91c:	4821883a 	mov	r16,r9
 800c920:	288a703a 	and	r5,r5,r2
 800c924:	003ead06 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800c928:	2c44b03a 	or	r2,r5,r17
 800c92c:	8000291e 	bne	r16,zero,800c9d4 <__subdf3+0x684>
 800c930:	10004f1e 	bne	r2,zero,800ca70 <__subdf3+0x720>
 800c934:	1984b03a 	or	r2,r3,r6
 800c938:	10000426 	beq	r2,zero,800c94c <__subdf3+0x5fc>
 800c93c:	180b883a 	mov	r5,r3
 800c940:	3023883a 	mov	r17,r6
 800c944:	3825883a 	mov	r18,r7
 800c948:	003ea406 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800c94c:	0011883a 	mov	r8,zero
 800c950:	000b883a 	mov	r5,zero
 800c954:	0023883a 	mov	r17,zero
 800c958:	003f0006 	br	800c55c <__alt_data_end+0xfc00c55c>
 800c95c:	11fff804 	addi	r7,r2,-32
 800c960:	19c8d83a 	srl	r4,r3,r7
 800c964:	01c00804 	movi	r7,32
 800c968:	11c07e26 	beq	r2,r7,800cb64 <__subdf3+0x814>
 800c96c:	01c01004 	movi	r7,64
 800c970:	3885c83a 	sub	r2,r7,r2
 800c974:	1884983a 	sll	r2,r3,r2
 800c978:	118cb03a 	or	r6,r2,r6
 800c97c:	300ec03a 	cmpne	r7,r6,zero
 800c980:	390eb03a 	or	r7,r7,r4
 800c984:	0005883a 	mov	r2,zero
 800c988:	003f0906 	br	800c5b0 <__alt_data_end+0xfc00c5b0>
 800c98c:	0101ffc4 	movi	r4,2047
 800c990:	513f991e 	bne	r10,r4,800c7f8 <__alt_data_end+0xfc00c7f8>
 800c994:	180b883a 	mov	r5,r3
 800c998:	3023883a 	mov	r17,r6
 800c99c:	5021883a 	mov	r16,r10
 800c9a0:	3825883a 	mov	r18,r7
 800c9a4:	003e8d06 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800c9a8:	80001a1e 	bne	r16,zero,800ca14 <__subdf3+0x6c4>
 800c9ac:	2c48b03a 	or	r4,r5,r17
 800c9b0:	20005526 	beq	r4,zero,800cb08 <__subdf3+0x7b8>
 800c9b4:	0084303a 	nor	r2,zero,r2
 800c9b8:	1000511e 	bne	r2,zero,800cb00 <__subdf3+0x7b0>
 800c9bc:	89a3883a 	add	r17,r17,r6
 800c9c0:	194b883a 	add	r5,r3,r5
 800c9c4:	898d803a 	cmpltu	r6,r17,r6
 800c9c8:	298b883a 	add	r5,r5,r6
 800c9cc:	5021883a 	mov	r16,r10
 800c9d0:	003efc06 	br	800c5c4 <__alt_data_end+0xfc00c5c4>
 800c9d4:	1000341e 	bne	r2,zero,800caa8 <__subdf3+0x758>
 800c9d8:	1984b03a 	or	r2,r3,r6
 800c9dc:	10006f26 	beq	r2,zero,800cb9c <__subdf3+0x84c>
 800c9e0:	180b883a 	mov	r5,r3
 800c9e4:	3023883a 	mov	r17,r6
 800c9e8:	3825883a 	mov	r18,r7
 800c9ec:	0401ffc4 	movi	r16,2047
 800c9f0:	003e7a06 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800c9f4:	2c62b03a 	or	r17,r5,r17
 800c9f8:	8822c03a 	cmpne	r17,r17,zero
 800c9fc:	0005883a 	mov	r2,zero
 800ca00:	003f8a06 	br	800c82c <__alt_data_end+0xfc00c82c>
 800ca04:	3821883a 	mov	r16,r7
 800ca08:	000b883a 	mov	r5,zero
 800ca0c:	0023883a 	mov	r17,zero
 800ca10:	003ed206 	br	800c55c <__alt_data_end+0xfc00c55c>
 800ca14:	0101ffc4 	movi	r4,2047
 800ca18:	51003b26 	beq	r10,r4,800cb08 <__subdf3+0x7b8>
 800ca1c:	0085c83a 	sub	r2,zero,r2
 800ca20:	29402034 	orhi	r5,r5,128
 800ca24:	01000e04 	movi	r4,56
 800ca28:	20806216 	blt	r4,r2,800cbb4 <__subdf3+0x864>
 800ca2c:	010007c4 	movi	r4,31
 800ca30:	20806b16 	blt	r4,r2,800cbe0 <__subdf3+0x890>
 800ca34:	01000804 	movi	r4,32
 800ca38:	2089c83a 	sub	r4,r4,r2
 800ca3c:	2912983a 	sll	r9,r5,r4
 800ca40:	888ed83a 	srl	r7,r17,r2
 800ca44:	8908983a 	sll	r4,r17,r4
 800ca48:	2884d83a 	srl	r2,r5,r2
 800ca4c:	49e2b03a 	or	r17,r9,r7
 800ca50:	2008c03a 	cmpne	r4,r4,zero
 800ca54:	8922b03a 	or	r17,r17,r4
 800ca58:	89a3883a 	add	r17,r17,r6
 800ca5c:	10c5883a 	add	r2,r2,r3
 800ca60:	898d803a 	cmpltu	r6,r17,r6
 800ca64:	118b883a 	add	r5,r2,r6
 800ca68:	5021883a 	mov	r16,r10
 800ca6c:	003ed506 	br	800c5c4 <__alt_data_end+0xfc00c5c4>
 800ca70:	1984b03a 	or	r2,r3,r6
 800ca74:	103e5926 	beq	r2,zero,800c3dc <__alt_data_end+0xfc00c3dc>
 800ca78:	8989c83a 	sub	r4,r17,r6
 800ca7c:	8911803a 	cmpltu	r8,r17,r4
 800ca80:	28c5c83a 	sub	r2,r5,r3
 800ca84:	1205c83a 	sub	r2,r2,r8
 800ca88:	1200202c 	andhi	r8,r2,128
 800ca8c:	403ef926 	beq	r8,zero,800c674 <__alt_data_end+0xfc00c674>
 800ca90:	3463c83a 	sub	r17,r6,r17
 800ca94:	194bc83a 	sub	r5,r3,r5
 800ca98:	344d803a 	cmpltu	r6,r6,r17
 800ca9c:	298bc83a 	sub	r5,r5,r6
 800caa0:	3825883a 	mov	r18,r7
 800caa4:	003e4d06 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800caa8:	1984b03a 	or	r2,r3,r6
 800caac:	10002b26 	beq	r2,zero,800cb5c <__subdf3+0x80c>
 800cab0:	2808d0fa 	srli	r4,r5,3
 800cab4:	8822d0fa 	srli	r17,r17,3
 800cab8:	280a977a 	slli	r5,r5,29
 800cabc:	2080022c 	andhi	r2,r4,8
 800cac0:	2c62b03a 	or	r17,r5,r17
 800cac4:	10000826 	beq	r2,zero,800cae8 <__subdf3+0x798>
 800cac8:	1810d0fa 	srli	r8,r3,3
 800cacc:	4080022c 	andhi	r2,r8,8
 800cad0:	1000051e 	bne	r2,zero,800cae8 <__subdf3+0x798>
 800cad4:	300cd0fa 	srli	r6,r6,3
 800cad8:	1804977a 	slli	r2,r3,29
 800cadc:	4009883a 	mov	r4,r8
 800cae0:	3825883a 	mov	r18,r7
 800cae4:	11a2b03a 	or	r17,r2,r6
 800cae8:	880ad77a 	srli	r5,r17,29
 800caec:	200890fa 	slli	r4,r4,3
 800caf0:	882290fa 	slli	r17,r17,3
 800caf4:	0401ffc4 	movi	r16,2047
 800caf8:	290ab03a 	or	r5,r5,r4
 800cafc:	003e3706 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800cb00:	0101ffc4 	movi	r4,2047
 800cb04:	513fc71e 	bne	r10,r4,800ca24 <__alt_data_end+0xfc00ca24>
 800cb08:	180b883a 	mov	r5,r3
 800cb0c:	3023883a 	mov	r17,r6
 800cb10:	5021883a 	mov	r16,r10
 800cb14:	003e3106 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800cb18:	10002d26 	beq	r2,zero,800cbd0 <__subdf3+0x880>
 800cb1c:	1984b03a 	or	r2,r3,r6
 800cb20:	10000e26 	beq	r2,zero,800cb5c <__subdf3+0x80c>
 800cb24:	2808d0fa 	srli	r4,r5,3
 800cb28:	8822d0fa 	srli	r17,r17,3
 800cb2c:	280a977a 	slli	r5,r5,29
 800cb30:	2080022c 	andhi	r2,r4,8
 800cb34:	2c62b03a 	or	r17,r5,r17
 800cb38:	103feb26 	beq	r2,zero,800cae8 <__alt_data_end+0xfc00cae8>
 800cb3c:	180ed0fa 	srli	r7,r3,3
 800cb40:	3880022c 	andhi	r2,r7,8
 800cb44:	103fe81e 	bne	r2,zero,800cae8 <__alt_data_end+0xfc00cae8>
 800cb48:	300cd0fa 	srli	r6,r6,3
 800cb4c:	1804977a 	slli	r2,r3,29
 800cb50:	3809883a 	mov	r4,r7
 800cb54:	11a2b03a 	or	r17,r2,r6
 800cb58:	003fe306 	br	800cae8 <__alt_data_end+0xfc00cae8>
 800cb5c:	0401ffc4 	movi	r16,2047
 800cb60:	003e1e06 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800cb64:	0005883a 	mov	r2,zero
 800cb68:	003f8306 	br	800c978 <__alt_data_end+0xfc00c978>
 800cb6c:	113ff804 	addi	r4,r2,-32
 800cb70:	02000804 	movi	r8,32
 800cb74:	2908d83a 	srl	r4,r5,r4
 800cb78:	12002526 	beq	r2,r8,800cc10 <__subdf3+0x8c0>
 800cb7c:	02001004 	movi	r8,64
 800cb80:	4085c83a 	sub	r2,r8,r2
 800cb84:	288a983a 	sll	r5,r5,r2
 800cb88:	2c62b03a 	or	r17,r5,r17
 800cb8c:	8822c03a 	cmpne	r17,r17,zero
 800cb90:	8922b03a 	or	r17,r17,r4
 800cb94:	0005883a 	mov	r2,zero
 800cb98:	003f2406 	br	800c82c <__alt_data_end+0xfc00c82c>
 800cb9c:	01402034 	movhi	r5,128
 800cba0:	0011883a 	mov	r8,zero
 800cba4:	297fffc4 	addi	r5,r5,-1
 800cba8:	047ffe04 	movi	r17,-8
 800cbac:	0401ffc4 	movi	r16,2047
 800cbb0:	003e6a06 	br	800c55c <__alt_data_end+0xfc00c55c>
 800cbb4:	2c62b03a 	or	r17,r5,r17
 800cbb8:	8822c03a 	cmpne	r17,r17,zero
 800cbbc:	0005883a 	mov	r2,zero
 800cbc0:	003fa506 	br	800ca58 <__alt_data_end+0xfc00ca58>
 800cbc4:	180b883a 	mov	r5,r3
 800cbc8:	3023883a 	mov	r17,r6
 800cbcc:	003e0306 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800cbd0:	180b883a 	mov	r5,r3
 800cbd4:	3023883a 	mov	r17,r6
 800cbd8:	0401ffc4 	movi	r16,2047
 800cbdc:	003dff06 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800cbe0:	113ff804 	addi	r4,r2,-32
 800cbe4:	01c00804 	movi	r7,32
 800cbe8:	2908d83a 	srl	r4,r5,r4
 800cbec:	11c00a26 	beq	r2,r7,800cc18 <__subdf3+0x8c8>
 800cbf0:	01c01004 	movi	r7,64
 800cbf4:	3885c83a 	sub	r2,r7,r2
 800cbf8:	288a983a 	sll	r5,r5,r2
 800cbfc:	2c62b03a 	or	r17,r5,r17
 800cc00:	8822c03a 	cmpne	r17,r17,zero
 800cc04:	8922b03a 	or	r17,r17,r4
 800cc08:	0005883a 	mov	r2,zero
 800cc0c:	003f9206 	br	800ca58 <__alt_data_end+0xfc00ca58>
 800cc10:	000b883a 	mov	r5,zero
 800cc14:	003fdc06 	br	800cb88 <__alt_data_end+0xfc00cb88>
 800cc18:	000b883a 	mov	r5,zero
 800cc1c:	003ff706 	br	800cbfc <__alt_data_end+0xfc00cbfc>

0800cc20 <__fixdfsi>:
 800cc20:	2806d53a 	srli	r3,r5,20
 800cc24:	00800434 	movhi	r2,16
 800cc28:	10bfffc4 	addi	r2,r2,-1
 800cc2c:	18c1ffcc 	andi	r3,r3,2047
 800cc30:	0180ff84 	movi	r6,1022
 800cc34:	2884703a 	and	r2,r5,r2
 800cc38:	280ad7fa 	srli	r5,r5,31
 800cc3c:	30c0130e 	bge	r6,r3,800cc8c <__fixdfsi+0x6c>
 800cc40:	01810744 	movi	r6,1053
 800cc44:	30c00d16 	blt	r6,r3,800cc7c <__fixdfsi+0x5c>
 800cc48:	01810cc4 	movi	r6,1075
 800cc4c:	30cdc83a 	sub	r6,r6,r3
 800cc50:	01c007c4 	movi	r7,31
 800cc54:	10800434 	orhi	r2,r2,16
 800cc58:	39800e0e 	bge	r7,r6,800cc94 <__fixdfsi+0x74>
 800cc5c:	010104c4 	movi	r4,1043
 800cc60:	20c7c83a 	sub	r3,r4,r3
 800cc64:	10c6d83a 	srl	r3,r2,r3
 800cc68:	29403fcc 	andi	r5,r5,255
 800cc6c:	0145c83a 	sub	r2,zero,r5
 800cc70:	1884f03a 	xor	r2,r3,r2
 800cc74:	1145883a 	add	r2,r2,r5
 800cc78:	f800283a 	ret
 800cc7c:	00a00034 	movhi	r2,32768
 800cc80:	10bfffc4 	addi	r2,r2,-1
 800cc84:	2885883a 	add	r2,r5,r2
 800cc88:	f800283a 	ret
 800cc8c:	0005883a 	mov	r2,zero
 800cc90:	f800283a 	ret
 800cc94:	18fefb44 	addi	r3,r3,-1043
 800cc98:	2188d83a 	srl	r4,r4,r6
 800cc9c:	10c6983a 	sll	r3,r2,r3
 800cca0:	20c6b03a 	or	r3,r4,r3
 800cca4:	003ff006 	br	800cc68 <__alt_data_end+0xfc00cc68>

0800cca8 <__floatsidf>:
 800cca8:	defffd04 	addi	sp,sp,-12
 800ccac:	dc400115 	stw	r17,4(sp)
 800ccb0:	dfc00215 	stw	ra,8(sp)
 800ccb4:	dc000015 	stw	r16,0(sp)
 800ccb8:	2023883a 	mov	r17,r4
 800ccbc:	20001426 	beq	r4,zero,800cd10 <__floatsidf+0x68>
 800ccc0:	2020d7fa 	srli	r16,r4,31
 800ccc4:	80000126 	beq	r16,zero,800cccc <__floatsidf+0x24>
 800ccc8:	0123c83a 	sub	r17,zero,r4
 800cccc:	8809883a 	mov	r4,r17
 800ccd0:	800ce1c0 	call	800ce1c <__clzsi2>
 800ccd4:	01410784 	movi	r5,1054
 800ccd8:	00c00284 	movi	r3,10
 800ccdc:	288bc83a 	sub	r5,r5,r2
 800cce0:	18801c16 	blt	r3,r2,800cd54 <__floatsidf+0xac>
 800cce4:	00c002c4 	movi	r3,11
 800cce8:	1887c83a 	sub	r3,r3,r2
 800ccec:	88c8d83a 	srl	r4,r17,r3
 800ccf0:	00c00434 	movhi	r3,16
 800ccf4:	18ffffc4 	addi	r3,r3,-1
 800ccf8:	10800544 	addi	r2,r2,21
 800ccfc:	20c8703a 	and	r4,r4,r3
 800cd00:	8884983a 	sll	r2,r17,r2
 800cd04:	28c1ffcc 	andi	r3,r5,2047
 800cd08:	800d883a 	mov	r6,r16
 800cd0c:	00000406 	br	800cd20 <__floatsidf+0x78>
 800cd10:	000d883a 	mov	r6,zero
 800cd14:	0007883a 	mov	r3,zero
 800cd18:	0009883a 	mov	r4,zero
 800cd1c:	0005883a 	mov	r2,zero
 800cd20:	180a953a 	slli	r5,r3,20
 800cd24:	31803fcc 	andi	r6,r6,255
 800cd28:	00c00434 	movhi	r3,16
 800cd2c:	300c97fa 	slli	r6,r6,31
 800cd30:	18ffffc4 	addi	r3,r3,-1
 800cd34:	20c6703a 	and	r3,r4,r3
 800cd38:	1946b03a 	or	r3,r3,r5
 800cd3c:	1986b03a 	or	r3,r3,r6
 800cd40:	dfc00217 	ldw	ra,8(sp)
 800cd44:	dc400117 	ldw	r17,4(sp)
 800cd48:	dc000017 	ldw	r16,0(sp)
 800cd4c:	dec00304 	addi	sp,sp,12
 800cd50:	f800283a 	ret
 800cd54:	10fffd44 	addi	r3,r2,-11
 800cd58:	88c8983a 	sll	r4,r17,r3
 800cd5c:	00800434 	movhi	r2,16
 800cd60:	10bfffc4 	addi	r2,r2,-1
 800cd64:	2088703a 	and	r4,r4,r2
 800cd68:	28c1ffcc 	andi	r3,r5,2047
 800cd6c:	800d883a 	mov	r6,r16
 800cd70:	0005883a 	mov	r2,zero
 800cd74:	003fea06 	br	800cd20 <__alt_data_end+0xfc00cd20>

0800cd78 <__floatunsidf>:
 800cd78:	defffe04 	addi	sp,sp,-8
 800cd7c:	dc000015 	stw	r16,0(sp)
 800cd80:	dfc00115 	stw	ra,4(sp)
 800cd84:	2021883a 	mov	r16,r4
 800cd88:	20001026 	beq	r4,zero,800cdcc <__floatunsidf+0x54>
 800cd8c:	800ce1c0 	call	800ce1c <__clzsi2>
 800cd90:	01410784 	movi	r5,1054
 800cd94:	100d883a 	mov	r6,r2
 800cd98:	288bc83a 	sub	r5,r5,r2
 800cd9c:	00800284 	movi	r2,10
 800cda0:	11801616 	blt	r2,r6,800cdfc <__floatunsidf+0x84>
 800cda4:	008002c4 	movi	r2,11
 800cda8:	1185c83a 	sub	r2,r2,r6
 800cdac:	8084d83a 	srl	r2,r16,r2
 800cdb0:	00c00434 	movhi	r3,16
 800cdb4:	31c00544 	addi	r7,r6,21
 800cdb8:	18ffffc4 	addi	r3,r3,-1
 800cdbc:	81e0983a 	sll	r16,r16,r7
 800cdc0:	10cc703a 	and	r6,r2,r3
 800cdc4:	2941ffcc 	andi	r5,r5,2047
 800cdc8:	00000206 	br	800cdd4 <__floatunsidf+0x5c>
 800cdcc:	000b883a 	mov	r5,zero
 800cdd0:	000d883a 	mov	r6,zero
 800cdd4:	280a953a 	slli	r5,r5,20
 800cdd8:	00c00434 	movhi	r3,16
 800cddc:	18ffffc4 	addi	r3,r3,-1
 800cde0:	30c6703a 	and	r3,r6,r3
 800cde4:	8005883a 	mov	r2,r16
 800cde8:	1946b03a 	or	r3,r3,r5
 800cdec:	dfc00117 	ldw	ra,4(sp)
 800cdf0:	dc000017 	ldw	r16,0(sp)
 800cdf4:	dec00204 	addi	sp,sp,8
 800cdf8:	f800283a 	ret
 800cdfc:	31bffd44 	addi	r6,r6,-11
 800ce00:	818c983a 	sll	r6,r16,r6
 800ce04:	00800434 	movhi	r2,16
 800ce08:	10bfffc4 	addi	r2,r2,-1
 800ce0c:	2941ffcc 	andi	r5,r5,2047
 800ce10:	0021883a 	mov	r16,zero
 800ce14:	308c703a 	and	r6,r6,r2
 800ce18:	003fee06 	br	800cdd4 <__alt_data_end+0xfc00cdd4>

0800ce1c <__clzsi2>:
 800ce1c:	00bfffd4 	movui	r2,65535
 800ce20:	11000b36 	bltu	r2,r4,800ce50 <__clzsi2+0x34>
 800ce24:	00803fc4 	movi	r2,255
 800ce28:	1100122e 	bgeu	r2,r4,800ce74 <__clzsi2+0x58>
 800ce2c:	00c00204 	movi	r3,8
 800ce30:	01400604 	movi	r5,24
 800ce34:	20c8d83a 	srl	r4,r4,r3
 800ce38:	00820074 	movhi	r2,2049
 800ce3c:	10be0704 	addi	r2,r2,-2020
 800ce40:	1109883a 	add	r4,r2,r4
 800ce44:	20800003 	ldbu	r2,0(r4)
 800ce48:	2885c83a 	sub	r2,r5,r2
 800ce4c:	f800283a 	ret
 800ce50:	00804034 	movhi	r2,256
 800ce54:	10bfffc4 	addi	r2,r2,-1
 800ce58:	11000336 	bltu	r2,r4,800ce68 <__clzsi2+0x4c>
 800ce5c:	00c00404 	movi	r3,16
 800ce60:	180b883a 	mov	r5,r3
 800ce64:	003ff306 	br	800ce34 <__alt_data_end+0xfc00ce34>
 800ce68:	00c00604 	movi	r3,24
 800ce6c:	01400204 	movi	r5,8
 800ce70:	003ff006 	br	800ce34 <__alt_data_end+0xfc00ce34>
 800ce74:	0007883a 	mov	r3,zero
 800ce78:	01400804 	movi	r5,32
 800ce7c:	003fed06 	br	800ce34 <__alt_data_end+0xfc00ce34>

0800ce80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ce80:	defffe04 	addi	sp,sp,-8
 800ce84:	dfc00115 	stw	ra,4(sp)
 800ce88:	df000015 	stw	fp,0(sp)
 800ce8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ce90:	00820074 	movhi	r2,2049
 800ce94:	10850a04 	addi	r2,r2,5160
 800ce98:	10800017 	ldw	r2,0(r2)
 800ce9c:	10000526 	beq	r2,zero,800ceb4 <alt_get_errno+0x34>
 800cea0:	00820074 	movhi	r2,2049
 800cea4:	10850a04 	addi	r2,r2,5160
 800cea8:	10800017 	ldw	r2,0(r2)
 800ceac:	103ee83a 	callr	r2
 800ceb0:	00000206 	br	800cebc <alt_get_errno+0x3c>
 800ceb4:	00820074 	movhi	r2,2049
 800ceb8:	108bd004 	addi	r2,r2,12096
}
 800cebc:	e037883a 	mov	sp,fp
 800cec0:	dfc00117 	ldw	ra,4(sp)
 800cec4:	df000017 	ldw	fp,0(sp)
 800cec8:	dec00204 	addi	sp,sp,8
 800cecc:	f800283a 	ret

0800ced0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800ced0:	defffb04 	addi	sp,sp,-20
 800ced4:	dfc00415 	stw	ra,16(sp)
 800ced8:	df000315 	stw	fp,12(sp)
 800cedc:	df000304 	addi	fp,sp,12
 800cee0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800cee4:	e0bfff17 	ldw	r2,-4(fp)
 800cee8:	10000816 	blt	r2,zero,800cf0c <close+0x3c>
 800ceec:	e13fff17 	ldw	r4,-4(fp)
 800cef0:	01400304 	movi	r5,12
 800cef4:	800a65c0 	call	800a65c <__mulsi3>
 800cef8:	1007883a 	mov	r3,r2
 800cefc:	00820074 	movhi	r2,2049
 800cf00:	10808704 	addi	r2,r2,540
 800cf04:	1885883a 	add	r2,r3,r2
 800cf08:	00000106 	br	800cf10 <close+0x40>
 800cf0c:	0005883a 	mov	r2,zero
 800cf10:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800cf14:	e0bffd17 	ldw	r2,-12(fp)
 800cf18:	10001926 	beq	r2,zero,800cf80 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800cf1c:	e0bffd17 	ldw	r2,-12(fp)
 800cf20:	10800017 	ldw	r2,0(r2)
 800cf24:	10800417 	ldw	r2,16(r2)
 800cf28:	10000626 	beq	r2,zero,800cf44 <close+0x74>
 800cf2c:	e0bffd17 	ldw	r2,-12(fp)
 800cf30:	10800017 	ldw	r2,0(r2)
 800cf34:	10800417 	ldw	r2,16(r2)
 800cf38:	e13ffd17 	ldw	r4,-12(fp)
 800cf3c:	103ee83a 	callr	r2
 800cf40:	00000106 	br	800cf48 <close+0x78>
 800cf44:	0005883a 	mov	r2,zero
 800cf48:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800cf4c:	e13fff17 	ldw	r4,-4(fp)
 800cf50:	800d5f40 	call	800d5f4 <alt_release_fd>
    if (rval < 0)
 800cf54:	e0bffe17 	ldw	r2,-8(fp)
 800cf58:	1000070e 	bge	r2,zero,800cf78 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 800cf5c:	800ce800 	call	800ce80 <alt_get_errno>
 800cf60:	1007883a 	mov	r3,r2
 800cf64:	e0bffe17 	ldw	r2,-8(fp)
 800cf68:	0085c83a 	sub	r2,zero,r2
 800cf6c:	18800015 	stw	r2,0(r3)
      return -1;
 800cf70:	00bfffc4 	movi	r2,-1
 800cf74:	00000706 	br	800cf94 <close+0xc4>
    }
    return 0;
 800cf78:	0005883a 	mov	r2,zero
 800cf7c:	00000506 	br	800cf94 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800cf80:	800ce800 	call	800ce80 <alt_get_errno>
 800cf84:	1007883a 	mov	r3,r2
 800cf88:	00801444 	movi	r2,81
 800cf8c:	18800015 	stw	r2,0(r3)
    return -1;
 800cf90:	00bfffc4 	movi	r2,-1
  }
}
 800cf94:	e037883a 	mov	sp,fp
 800cf98:	dfc00117 	ldw	ra,4(sp)
 800cf9c:	df000017 	ldw	fp,0(sp)
 800cfa0:	dec00204 	addi	sp,sp,8
 800cfa4:	f800283a 	ret

0800cfa8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800cfa8:	defffc04 	addi	sp,sp,-16
 800cfac:	df000315 	stw	fp,12(sp)
 800cfb0:	df000304 	addi	fp,sp,12
 800cfb4:	e13ffd15 	stw	r4,-12(fp)
 800cfb8:	e17ffe15 	stw	r5,-8(fp)
 800cfbc:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800cfc0:	e0bfff17 	ldw	r2,-4(fp)
}
 800cfc4:	e037883a 	mov	sp,fp
 800cfc8:	df000017 	ldw	fp,0(sp)
 800cfcc:	dec00104 	addi	sp,sp,4
 800cfd0:	f800283a 	ret

0800cfd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800cfd4:	defffe04 	addi	sp,sp,-8
 800cfd8:	dfc00115 	stw	ra,4(sp)
 800cfdc:	df000015 	stw	fp,0(sp)
 800cfe0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800cfe4:	00820074 	movhi	r2,2049
 800cfe8:	10850a04 	addi	r2,r2,5160
 800cfec:	10800017 	ldw	r2,0(r2)
 800cff0:	10000526 	beq	r2,zero,800d008 <alt_get_errno+0x34>
 800cff4:	00820074 	movhi	r2,2049
 800cff8:	10850a04 	addi	r2,r2,5160
 800cffc:	10800017 	ldw	r2,0(r2)
 800d000:	103ee83a 	callr	r2
 800d004:	00000206 	br	800d010 <alt_get_errno+0x3c>
 800d008:	00820074 	movhi	r2,2049
 800d00c:	108bd004 	addi	r2,r2,12096
}
 800d010:	e037883a 	mov	sp,fp
 800d014:	dfc00117 	ldw	ra,4(sp)
 800d018:	df000017 	ldw	fp,0(sp)
 800d01c:	dec00204 	addi	sp,sp,8
 800d020:	f800283a 	ret

0800d024 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800d024:	defffb04 	addi	sp,sp,-20
 800d028:	dfc00415 	stw	ra,16(sp)
 800d02c:	df000315 	stw	fp,12(sp)
 800d030:	df000304 	addi	fp,sp,12
 800d034:	e13ffe15 	stw	r4,-8(fp)
 800d038:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d03c:	e0bffe17 	ldw	r2,-8(fp)
 800d040:	10000816 	blt	r2,zero,800d064 <fstat+0x40>
 800d044:	e13ffe17 	ldw	r4,-8(fp)
 800d048:	01400304 	movi	r5,12
 800d04c:	800a65c0 	call	800a65c <__mulsi3>
 800d050:	1007883a 	mov	r3,r2
 800d054:	00820074 	movhi	r2,2049
 800d058:	10808704 	addi	r2,r2,540
 800d05c:	1885883a 	add	r2,r3,r2
 800d060:	00000106 	br	800d068 <fstat+0x44>
 800d064:	0005883a 	mov	r2,zero
 800d068:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800d06c:	e0bffd17 	ldw	r2,-12(fp)
 800d070:	10001026 	beq	r2,zero,800d0b4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800d074:	e0bffd17 	ldw	r2,-12(fp)
 800d078:	10800017 	ldw	r2,0(r2)
 800d07c:	10800817 	ldw	r2,32(r2)
 800d080:	10000726 	beq	r2,zero,800d0a0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 800d084:	e0bffd17 	ldw	r2,-12(fp)
 800d088:	10800017 	ldw	r2,0(r2)
 800d08c:	10800817 	ldw	r2,32(r2)
 800d090:	e13ffd17 	ldw	r4,-12(fp)
 800d094:	e17fff17 	ldw	r5,-4(fp)
 800d098:	103ee83a 	callr	r2
 800d09c:	00000a06 	br	800d0c8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800d0a0:	e0bfff17 	ldw	r2,-4(fp)
 800d0a4:	00c80004 	movi	r3,8192
 800d0a8:	10c00115 	stw	r3,4(r2)
      return 0;
 800d0ac:	0005883a 	mov	r2,zero
 800d0b0:	00000506 	br	800d0c8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d0b4:	800cfd40 	call	800cfd4 <alt_get_errno>
 800d0b8:	1007883a 	mov	r3,r2
 800d0bc:	00801444 	movi	r2,81
 800d0c0:	18800015 	stw	r2,0(r3)
    return -1;
 800d0c4:	00bfffc4 	movi	r2,-1
  }
}
 800d0c8:	e037883a 	mov	sp,fp
 800d0cc:	dfc00117 	ldw	ra,4(sp)
 800d0d0:	df000017 	ldw	fp,0(sp)
 800d0d4:	dec00204 	addi	sp,sp,8
 800d0d8:	f800283a 	ret

0800d0dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d0dc:	defffe04 	addi	sp,sp,-8
 800d0e0:	dfc00115 	stw	ra,4(sp)
 800d0e4:	df000015 	stw	fp,0(sp)
 800d0e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d0ec:	00820074 	movhi	r2,2049
 800d0f0:	10850a04 	addi	r2,r2,5160
 800d0f4:	10800017 	ldw	r2,0(r2)
 800d0f8:	10000526 	beq	r2,zero,800d110 <alt_get_errno+0x34>
 800d0fc:	00820074 	movhi	r2,2049
 800d100:	10850a04 	addi	r2,r2,5160
 800d104:	10800017 	ldw	r2,0(r2)
 800d108:	103ee83a 	callr	r2
 800d10c:	00000206 	br	800d118 <alt_get_errno+0x3c>
 800d110:	00820074 	movhi	r2,2049
 800d114:	108bd004 	addi	r2,r2,12096
}
 800d118:	e037883a 	mov	sp,fp
 800d11c:	dfc00117 	ldw	ra,4(sp)
 800d120:	df000017 	ldw	fp,0(sp)
 800d124:	dec00204 	addi	sp,sp,8
 800d128:	f800283a 	ret

0800d12c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800d12c:	deffed04 	addi	sp,sp,-76
 800d130:	dfc01215 	stw	ra,72(sp)
 800d134:	df001115 	stw	fp,68(sp)
 800d138:	df001104 	addi	fp,sp,68
 800d13c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d140:	e0bfff17 	ldw	r2,-4(fp)
 800d144:	10000816 	blt	r2,zero,800d168 <isatty+0x3c>
 800d148:	e13fff17 	ldw	r4,-4(fp)
 800d14c:	01400304 	movi	r5,12
 800d150:	800a65c0 	call	800a65c <__mulsi3>
 800d154:	1007883a 	mov	r3,r2
 800d158:	00820074 	movhi	r2,2049
 800d15c:	10808704 	addi	r2,r2,540
 800d160:	1885883a 	add	r2,r3,r2
 800d164:	00000106 	br	800d16c <isatty+0x40>
 800d168:	0005883a 	mov	r2,zero
 800d16c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800d170:	e0bfef17 	ldw	r2,-68(fp)
 800d174:	10000e26 	beq	r2,zero,800d1b0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800d178:	e0bfef17 	ldw	r2,-68(fp)
 800d17c:	10800017 	ldw	r2,0(r2)
 800d180:	10800817 	ldw	r2,32(r2)
 800d184:	1000021e 	bne	r2,zero,800d190 <isatty+0x64>
    {
      return 1;
 800d188:	00800044 	movi	r2,1
 800d18c:	00000d06 	br	800d1c4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800d190:	e0bff004 	addi	r2,fp,-64
 800d194:	e13fff17 	ldw	r4,-4(fp)
 800d198:	100b883a 	mov	r5,r2
 800d19c:	800d0240 	call	800d024 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800d1a0:	e0bff117 	ldw	r2,-60(fp)
 800d1a4:	10880020 	cmpeqi	r2,r2,8192
 800d1a8:	10803fcc 	andi	r2,r2,255
 800d1ac:	00000506 	br	800d1c4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d1b0:	800d0dc0 	call	800d0dc <alt_get_errno>
 800d1b4:	1007883a 	mov	r3,r2
 800d1b8:	00801444 	movi	r2,81
 800d1bc:	18800015 	stw	r2,0(r3)
    return 0;
 800d1c0:	0005883a 	mov	r2,zero
  }
}
 800d1c4:	e037883a 	mov	sp,fp
 800d1c8:	dfc00117 	ldw	ra,4(sp)
 800d1cc:	df000017 	ldw	fp,0(sp)
 800d1d0:	dec00204 	addi	sp,sp,8
 800d1d4:	f800283a 	ret

0800d1d8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800d1d8:	defffc04 	addi	sp,sp,-16
 800d1dc:	df000315 	stw	fp,12(sp)
 800d1e0:	df000304 	addi	fp,sp,12
 800d1e4:	e13ffd15 	stw	r4,-12(fp)
 800d1e8:	e17ffe15 	stw	r5,-8(fp)
 800d1ec:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800d1f0:	e0fffe17 	ldw	r3,-8(fp)
 800d1f4:	e0bffd17 	ldw	r2,-12(fp)
 800d1f8:	18800c26 	beq	r3,r2,800d22c <alt_load_section+0x54>
  {
    while( to != end )
 800d1fc:	00000806 	br	800d220 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800d200:	e0bffe17 	ldw	r2,-8(fp)
 800d204:	10c00104 	addi	r3,r2,4
 800d208:	e0fffe15 	stw	r3,-8(fp)
 800d20c:	e0fffd17 	ldw	r3,-12(fp)
 800d210:	19000104 	addi	r4,r3,4
 800d214:	e13ffd15 	stw	r4,-12(fp)
 800d218:	18c00017 	ldw	r3,0(r3)
 800d21c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800d220:	e0fffe17 	ldw	r3,-8(fp)
 800d224:	e0bfff17 	ldw	r2,-4(fp)
 800d228:	18bff51e 	bne	r3,r2,800d200 <__alt_data_end+0xfc00d200>
    {
      *to++ = *from++;
    }
  }
}
 800d22c:	e037883a 	mov	sp,fp
 800d230:	df000017 	ldw	fp,0(sp)
 800d234:	dec00104 	addi	sp,sp,4
 800d238:	f800283a 	ret

0800d23c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800d23c:	defffe04 	addi	sp,sp,-8
 800d240:	dfc00115 	stw	ra,4(sp)
 800d244:	df000015 	stw	fp,0(sp)
 800d248:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800d24c:	01020074 	movhi	r4,2049
 800d250:	21050f04 	addi	r4,r4,5180
 800d254:	01420074 	movhi	r5,2049
 800d258:	297e5404 	addi	r5,r5,-1712
 800d25c:	01820074 	movhi	r6,2049
 800d260:	31850f04 	addi	r6,r6,5180
 800d264:	800d1d80 	call	800d1d8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800d268:	01020034 	movhi	r4,2048
 800d26c:	21000804 	addi	r4,r4,32
 800d270:	01420034 	movhi	r5,2048
 800d274:	29400804 	addi	r5,r5,32
 800d278:	01820034 	movhi	r6,2048
 800d27c:	31808b04 	addi	r6,r6,556
 800d280:	800d1d80 	call	800d1d8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800d284:	01020074 	movhi	r4,2049
 800d288:	213d7604 	addi	r4,r4,-2600
 800d28c:	01420074 	movhi	r5,2049
 800d290:	297d7604 	addi	r5,r5,-2600
 800d294:	01820074 	movhi	r6,2049
 800d298:	31be5404 	addi	r6,r6,-1712
 800d29c:	800d1d80 	call	800d1d8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800d2a0:	800e4b40 	call	800e4b4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800d2a4:	800e67c0 	call	800e67c <alt_icache_flush_all>
}
 800d2a8:	e037883a 	mov	sp,fp
 800d2ac:	dfc00117 	ldw	ra,4(sp)
 800d2b0:	df000017 	ldw	fp,0(sp)
 800d2b4:	dec00204 	addi	sp,sp,8
 800d2b8:	f800283a 	ret

0800d2bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d2bc:	defffe04 	addi	sp,sp,-8
 800d2c0:	dfc00115 	stw	ra,4(sp)
 800d2c4:	df000015 	stw	fp,0(sp)
 800d2c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d2cc:	00820074 	movhi	r2,2049
 800d2d0:	10850a04 	addi	r2,r2,5160
 800d2d4:	10800017 	ldw	r2,0(r2)
 800d2d8:	10000526 	beq	r2,zero,800d2f0 <alt_get_errno+0x34>
 800d2dc:	00820074 	movhi	r2,2049
 800d2e0:	10850a04 	addi	r2,r2,5160
 800d2e4:	10800017 	ldw	r2,0(r2)
 800d2e8:	103ee83a 	callr	r2
 800d2ec:	00000206 	br	800d2f8 <alt_get_errno+0x3c>
 800d2f0:	00820074 	movhi	r2,2049
 800d2f4:	108bd004 	addi	r2,r2,12096
}
 800d2f8:	e037883a 	mov	sp,fp
 800d2fc:	dfc00117 	ldw	ra,4(sp)
 800d300:	df000017 	ldw	fp,0(sp)
 800d304:	dec00204 	addi	sp,sp,8
 800d308:	f800283a 	ret

0800d30c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800d30c:	defff904 	addi	sp,sp,-28
 800d310:	dfc00615 	stw	ra,24(sp)
 800d314:	df000515 	stw	fp,20(sp)
 800d318:	df000504 	addi	fp,sp,20
 800d31c:	e13ffd15 	stw	r4,-12(fp)
 800d320:	e17ffe15 	stw	r5,-8(fp)
 800d324:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800d328:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d32c:	e0bffd17 	ldw	r2,-12(fp)
 800d330:	10000816 	blt	r2,zero,800d354 <lseek+0x48>
 800d334:	e13ffd17 	ldw	r4,-12(fp)
 800d338:	01400304 	movi	r5,12
 800d33c:	800a65c0 	call	800a65c <__mulsi3>
 800d340:	1007883a 	mov	r3,r2
 800d344:	00820074 	movhi	r2,2049
 800d348:	10808704 	addi	r2,r2,540
 800d34c:	1885883a 	add	r2,r3,r2
 800d350:	00000106 	br	800d358 <lseek+0x4c>
 800d354:	0005883a 	mov	r2,zero
 800d358:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800d35c:	e0bffc17 	ldw	r2,-16(fp)
 800d360:	10001026 	beq	r2,zero,800d3a4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800d364:	e0bffc17 	ldw	r2,-16(fp)
 800d368:	10800017 	ldw	r2,0(r2)
 800d36c:	10800717 	ldw	r2,28(r2)
 800d370:	10000926 	beq	r2,zero,800d398 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800d374:	e0bffc17 	ldw	r2,-16(fp)
 800d378:	10800017 	ldw	r2,0(r2)
 800d37c:	10800717 	ldw	r2,28(r2)
 800d380:	e13ffc17 	ldw	r4,-16(fp)
 800d384:	e17ffe17 	ldw	r5,-8(fp)
 800d388:	e1bfff17 	ldw	r6,-4(fp)
 800d38c:	103ee83a 	callr	r2
 800d390:	e0bffb15 	stw	r2,-20(fp)
 800d394:	00000506 	br	800d3ac <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800d398:	00bfde84 	movi	r2,-134
 800d39c:	e0bffb15 	stw	r2,-20(fp)
 800d3a0:	00000206 	br	800d3ac <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 800d3a4:	00bfebc4 	movi	r2,-81
 800d3a8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800d3ac:	e0bffb17 	ldw	r2,-20(fp)
 800d3b0:	1000070e 	bge	r2,zero,800d3d0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 800d3b4:	800d2bc0 	call	800d2bc <alt_get_errno>
 800d3b8:	1007883a 	mov	r3,r2
 800d3bc:	e0bffb17 	ldw	r2,-20(fp)
 800d3c0:	0085c83a 	sub	r2,zero,r2
 800d3c4:	18800015 	stw	r2,0(r3)
    rc = -1;
 800d3c8:	00bfffc4 	movi	r2,-1
 800d3cc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800d3d0:	e0bffb17 	ldw	r2,-20(fp)
}
 800d3d4:	e037883a 	mov	sp,fp
 800d3d8:	dfc00117 	ldw	ra,4(sp)
 800d3dc:	df000017 	ldw	fp,0(sp)
 800d3e0:	dec00204 	addi	sp,sp,8
 800d3e4:	f800283a 	ret

0800d3e8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800d3e8:	defffd04 	addi	sp,sp,-12
 800d3ec:	dfc00215 	stw	ra,8(sp)
 800d3f0:	df000115 	stw	fp,4(sp)
 800d3f4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800d3f8:	0009883a 	mov	r4,zero
 800d3fc:	800d8ac0 	call	800d8ac <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800d400:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800d404:	800d8e00 	call	800d8e0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800d408:	01020074 	movhi	r4,2049
 800d40c:	213e4a04 	addi	r4,r4,-1752
 800d410:	01420074 	movhi	r5,2049
 800d414:	297e4a04 	addi	r5,r5,-1752
 800d418:	01820074 	movhi	r6,2049
 800d41c:	31be4a04 	addi	r6,r6,-1752
 800d420:	800ea480 	call	800ea48 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800d424:	800e5c40 	call	800e5c4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800d428:	01020074 	movhi	r4,2049
 800d42c:	21398804 	addi	r4,r4,-6624
 800d430:	800f2340 	call	800f234 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800d434:	d126d217 	ldw	r4,-25784(gp)
 800d438:	d0e6d317 	ldw	r3,-25780(gp)
 800d43c:	d0a6d417 	ldw	r2,-25776(gp)
 800d440:	180b883a 	mov	r5,r3
 800d444:	100d883a 	mov	r6,r2
 800d448:	80002680 	call	8000268 <main>
 800d44c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800d450:	01000044 	movi	r4,1
 800d454:	800ced00 	call	800ced0 <close>
  exit (result);
 800d458:	e13fff17 	ldw	r4,-4(fp)
 800d45c:	800f2480 	call	800f248 <exit>

0800d460 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800d460:	defffe04 	addi	sp,sp,-8
 800d464:	df000115 	stw	fp,4(sp)
 800d468:	df000104 	addi	fp,sp,4
 800d46c:	e13fff15 	stw	r4,-4(fp)
}
 800d470:	e037883a 	mov	sp,fp
 800d474:	df000017 	ldw	fp,0(sp)
 800d478:	dec00104 	addi	sp,sp,4
 800d47c:	f800283a 	ret

0800d480 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800d480:	defffe04 	addi	sp,sp,-8
 800d484:	df000115 	stw	fp,4(sp)
 800d488:	df000104 	addi	fp,sp,4
 800d48c:	e13fff15 	stw	r4,-4(fp)
}
 800d490:	e037883a 	mov	sp,fp
 800d494:	df000017 	ldw	fp,0(sp)
 800d498:	dec00104 	addi	sp,sp,4
 800d49c:	f800283a 	ret

0800d4a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d4a0:	defffe04 	addi	sp,sp,-8
 800d4a4:	dfc00115 	stw	ra,4(sp)
 800d4a8:	df000015 	stw	fp,0(sp)
 800d4ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d4b0:	00820074 	movhi	r2,2049
 800d4b4:	10850a04 	addi	r2,r2,5160
 800d4b8:	10800017 	ldw	r2,0(r2)
 800d4bc:	10000526 	beq	r2,zero,800d4d4 <alt_get_errno+0x34>
 800d4c0:	00820074 	movhi	r2,2049
 800d4c4:	10850a04 	addi	r2,r2,5160
 800d4c8:	10800017 	ldw	r2,0(r2)
 800d4cc:	103ee83a 	callr	r2
 800d4d0:	00000206 	br	800d4dc <alt_get_errno+0x3c>
 800d4d4:	00820074 	movhi	r2,2049
 800d4d8:	108bd004 	addi	r2,r2,12096
}
 800d4dc:	e037883a 	mov	sp,fp
 800d4e0:	dfc00117 	ldw	ra,4(sp)
 800d4e4:	df000017 	ldw	fp,0(sp)
 800d4e8:	dec00204 	addi	sp,sp,8
 800d4ec:	f800283a 	ret

0800d4f0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800d4f0:	defff904 	addi	sp,sp,-28
 800d4f4:	dfc00615 	stw	ra,24(sp)
 800d4f8:	df000515 	stw	fp,20(sp)
 800d4fc:	df000504 	addi	fp,sp,20
 800d500:	e13ffd15 	stw	r4,-12(fp)
 800d504:	e17ffe15 	stw	r5,-8(fp)
 800d508:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d50c:	e0bffd17 	ldw	r2,-12(fp)
 800d510:	10000816 	blt	r2,zero,800d534 <read+0x44>
 800d514:	e13ffd17 	ldw	r4,-12(fp)
 800d518:	01400304 	movi	r5,12
 800d51c:	800a65c0 	call	800a65c <__mulsi3>
 800d520:	1007883a 	mov	r3,r2
 800d524:	00820074 	movhi	r2,2049
 800d528:	10808704 	addi	r2,r2,540
 800d52c:	1885883a 	add	r2,r3,r2
 800d530:	00000106 	br	800d538 <read+0x48>
 800d534:	0005883a 	mov	r2,zero
 800d538:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800d53c:	e0bffb17 	ldw	r2,-20(fp)
 800d540:	10002226 	beq	r2,zero,800d5cc <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800d544:	e0bffb17 	ldw	r2,-20(fp)
 800d548:	10800217 	ldw	r2,8(r2)
 800d54c:	108000cc 	andi	r2,r2,3
 800d550:	10800060 	cmpeqi	r2,r2,1
 800d554:	1000181e 	bne	r2,zero,800d5b8 <read+0xc8>
        (fd->dev->read))
 800d558:	e0bffb17 	ldw	r2,-20(fp)
 800d55c:	10800017 	ldw	r2,0(r2)
 800d560:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800d564:	10001426 	beq	r2,zero,800d5b8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800d568:	e0bffb17 	ldw	r2,-20(fp)
 800d56c:	10800017 	ldw	r2,0(r2)
 800d570:	10800517 	ldw	r2,20(r2)
 800d574:	e0ffff17 	ldw	r3,-4(fp)
 800d578:	e13ffb17 	ldw	r4,-20(fp)
 800d57c:	e17ffe17 	ldw	r5,-8(fp)
 800d580:	180d883a 	mov	r6,r3
 800d584:	103ee83a 	callr	r2
 800d588:	e0bffc15 	stw	r2,-16(fp)
 800d58c:	e0bffc17 	ldw	r2,-16(fp)
 800d590:	1000070e 	bge	r2,zero,800d5b0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 800d594:	800d4a00 	call	800d4a0 <alt_get_errno>
 800d598:	1007883a 	mov	r3,r2
 800d59c:	e0bffc17 	ldw	r2,-16(fp)
 800d5a0:	0085c83a 	sub	r2,zero,r2
 800d5a4:	18800015 	stw	r2,0(r3)
          return -1;
 800d5a8:	00bfffc4 	movi	r2,-1
 800d5ac:	00000c06 	br	800d5e0 <read+0xf0>
        }
        return rval;
 800d5b0:	e0bffc17 	ldw	r2,-16(fp)
 800d5b4:	00000a06 	br	800d5e0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800d5b8:	800d4a00 	call	800d4a0 <alt_get_errno>
 800d5bc:	1007883a 	mov	r3,r2
 800d5c0:	00800344 	movi	r2,13
 800d5c4:	18800015 	stw	r2,0(r3)
 800d5c8:	00000406 	br	800d5dc <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800d5cc:	800d4a00 	call	800d4a0 <alt_get_errno>
 800d5d0:	1007883a 	mov	r3,r2
 800d5d4:	00801444 	movi	r2,81
 800d5d8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800d5dc:	00bfffc4 	movi	r2,-1
}
 800d5e0:	e037883a 	mov	sp,fp
 800d5e4:	dfc00117 	ldw	ra,4(sp)
 800d5e8:	df000017 	ldw	fp,0(sp)
 800d5ec:	dec00204 	addi	sp,sp,8
 800d5f0:	f800283a 	ret

0800d5f4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800d5f4:	defffc04 	addi	sp,sp,-16
 800d5f8:	dfc00315 	stw	ra,12(sp)
 800d5fc:	df000215 	stw	fp,8(sp)
 800d600:	dc000115 	stw	r16,4(sp)
 800d604:	df000204 	addi	fp,sp,8
 800d608:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 800d60c:	e0bffe17 	ldw	r2,-8(fp)
 800d610:	108000d0 	cmplti	r2,r2,3
 800d614:	1000111e 	bne	r2,zero,800d65c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800d618:	04020074 	movhi	r16,2049
 800d61c:	84008704 	addi	r16,r16,540
 800d620:	e0bffe17 	ldw	r2,-8(fp)
 800d624:	1009883a 	mov	r4,r2
 800d628:	01400304 	movi	r5,12
 800d62c:	800a65c0 	call	800a65c <__mulsi3>
 800d630:	8085883a 	add	r2,r16,r2
 800d634:	10800204 	addi	r2,r2,8
 800d638:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800d63c:	04020074 	movhi	r16,2049
 800d640:	84008704 	addi	r16,r16,540
 800d644:	e0bffe17 	ldw	r2,-8(fp)
 800d648:	1009883a 	mov	r4,r2
 800d64c:	01400304 	movi	r5,12
 800d650:	800a65c0 	call	800a65c <__mulsi3>
 800d654:	8085883a 	add	r2,r16,r2
 800d658:	10000015 	stw	zero,0(r2)
  }
}
 800d65c:	e6ffff04 	addi	sp,fp,-4
 800d660:	dfc00217 	ldw	ra,8(sp)
 800d664:	df000117 	ldw	fp,4(sp)
 800d668:	dc000017 	ldw	r16,0(sp)
 800d66c:	dec00304 	addi	sp,sp,12
 800d670:	f800283a 	ret

0800d674 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800d674:	defff904 	addi	sp,sp,-28
 800d678:	df000615 	stw	fp,24(sp)
 800d67c:	df000604 	addi	fp,sp,24
 800d680:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d684:	0005303a 	rdctl	r2,status
 800d688:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d68c:	e0fffc17 	ldw	r3,-16(fp)
 800d690:	00bfff84 	movi	r2,-2
 800d694:	1884703a 	and	r2,r3,r2
 800d698:	1001703a 	wrctl	status,r2
  
  return context;
 800d69c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800d6a0:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800d6a4:	d0a00c17 	ldw	r2,-32720(gp)
 800d6a8:	10c000c4 	addi	r3,r2,3
 800d6ac:	00bfff04 	movi	r2,-4
 800d6b0:	1884703a 	and	r2,r3,r2
 800d6b4:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800d6b8:	d0e00c17 	ldw	r3,-32720(gp)
 800d6bc:	e0bfff17 	ldw	r2,-4(fp)
 800d6c0:	1887883a 	add	r3,r3,r2
 800d6c4:	00830034 	movhi	r2,3072
 800d6c8:	10800004 	addi	r2,r2,0
 800d6cc:	10c0062e 	bgeu	r2,r3,800d6e8 <sbrk+0x74>
 800d6d0:	e0bffa17 	ldw	r2,-24(fp)
 800d6d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d6d8:	e0bffd17 	ldw	r2,-12(fp)
 800d6dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800d6e0:	00bfffc4 	movi	r2,-1
 800d6e4:	00000b06 	br	800d714 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800d6e8:	d0a00c17 	ldw	r2,-32720(gp)
 800d6ec:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 800d6f0:	d0e00c17 	ldw	r3,-32720(gp)
 800d6f4:	e0bfff17 	ldw	r2,-4(fp)
 800d6f8:	1885883a 	add	r2,r3,r2
 800d6fc:	d0a00c15 	stw	r2,-32720(gp)
 800d700:	e0bffa17 	ldw	r2,-24(fp)
 800d704:	e0bffe15 	stw	r2,-8(fp)
 800d708:	e0bffe17 	ldw	r2,-8(fp)
 800d70c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800d710:	e0bffb17 	ldw	r2,-20(fp)
} 
 800d714:	e037883a 	mov	sp,fp
 800d718:	df000017 	ldw	fp,0(sp)
 800d71c:	dec00104 	addi	sp,sp,4
 800d720:	f800283a 	ret

0800d724 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d724:	defffe04 	addi	sp,sp,-8
 800d728:	dfc00115 	stw	ra,4(sp)
 800d72c:	df000015 	stw	fp,0(sp)
 800d730:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d734:	00820074 	movhi	r2,2049
 800d738:	10850a04 	addi	r2,r2,5160
 800d73c:	10800017 	ldw	r2,0(r2)
 800d740:	10000526 	beq	r2,zero,800d758 <alt_get_errno+0x34>
 800d744:	00820074 	movhi	r2,2049
 800d748:	10850a04 	addi	r2,r2,5160
 800d74c:	10800017 	ldw	r2,0(r2)
 800d750:	103ee83a 	callr	r2
 800d754:	00000206 	br	800d760 <alt_get_errno+0x3c>
 800d758:	00820074 	movhi	r2,2049
 800d75c:	108bd004 	addi	r2,r2,12096
}
 800d760:	e037883a 	mov	sp,fp
 800d764:	dfc00117 	ldw	ra,4(sp)
 800d768:	df000017 	ldw	fp,0(sp)
 800d76c:	dec00204 	addi	sp,sp,8
 800d770:	f800283a 	ret

0800d774 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800d774:	defff904 	addi	sp,sp,-28
 800d778:	dfc00615 	stw	ra,24(sp)
 800d77c:	df000515 	stw	fp,20(sp)
 800d780:	df000504 	addi	fp,sp,20
 800d784:	e13ffd15 	stw	r4,-12(fp)
 800d788:	e17ffe15 	stw	r5,-8(fp)
 800d78c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d790:	e0bffd17 	ldw	r2,-12(fp)
 800d794:	10000816 	blt	r2,zero,800d7b8 <write+0x44>
 800d798:	e13ffd17 	ldw	r4,-12(fp)
 800d79c:	01400304 	movi	r5,12
 800d7a0:	800a65c0 	call	800a65c <__mulsi3>
 800d7a4:	1007883a 	mov	r3,r2
 800d7a8:	00820074 	movhi	r2,2049
 800d7ac:	10808704 	addi	r2,r2,540
 800d7b0:	1885883a 	add	r2,r3,r2
 800d7b4:	00000106 	br	800d7bc <write+0x48>
 800d7b8:	0005883a 	mov	r2,zero
 800d7bc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800d7c0:	e0bffb17 	ldw	r2,-20(fp)
 800d7c4:	10002126 	beq	r2,zero,800d84c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800d7c8:	e0bffb17 	ldw	r2,-20(fp)
 800d7cc:	10800217 	ldw	r2,8(r2)
 800d7d0:	108000cc 	andi	r2,r2,3
 800d7d4:	10001826 	beq	r2,zero,800d838 <write+0xc4>
 800d7d8:	e0bffb17 	ldw	r2,-20(fp)
 800d7dc:	10800017 	ldw	r2,0(r2)
 800d7e0:	10800617 	ldw	r2,24(r2)
 800d7e4:	10001426 	beq	r2,zero,800d838 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800d7e8:	e0bffb17 	ldw	r2,-20(fp)
 800d7ec:	10800017 	ldw	r2,0(r2)
 800d7f0:	10800617 	ldw	r2,24(r2)
 800d7f4:	e0ffff17 	ldw	r3,-4(fp)
 800d7f8:	e13ffb17 	ldw	r4,-20(fp)
 800d7fc:	e17ffe17 	ldw	r5,-8(fp)
 800d800:	180d883a 	mov	r6,r3
 800d804:	103ee83a 	callr	r2
 800d808:	e0bffc15 	stw	r2,-16(fp)
 800d80c:	e0bffc17 	ldw	r2,-16(fp)
 800d810:	1000070e 	bge	r2,zero,800d830 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 800d814:	800d7240 	call	800d724 <alt_get_errno>
 800d818:	1007883a 	mov	r3,r2
 800d81c:	e0bffc17 	ldw	r2,-16(fp)
 800d820:	0085c83a 	sub	r2,zero,r2
 800d824:	18800015 	stw	r2,0(r3)
        return -1;
 800d828:	00bfffc4 	movi	r2,-1
 800d82c:	00000c06 	br	800d860 <write+0xec>
      }
      return rval;
 800d830:	e0bffc17 	ldw	r2,-16(fp)
 800d834:	00000a06 	br	800d860 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800d838:	800d7240 	call	800d724 <alt_get_errno>
 800d83c:	1007883a 	mov	r3,r2
 800d840:	00800344 	movi	r2,13
 800d844:	18800015 	stw	r2,0(r3)
 800d848:	00000406 	br	800d85c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800d84c:	800d7240 	call	800d724 <alt_get_errno>
 800d850:	1007883a 	mov	r3,r2
 800d854:	00801444 	movi	r2,81
 800d858:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800d85c:	00bfffc4 	movi	r2,-1
}
 800d860:	e037883a 	mov	sp,fp
 800d864:	dfc00117 	ldw	ra,4(sp)
 800d868:	df000017 	ldw	fp,0(sp)
 800d86c:	dec00204 	addi	sp,sp,8
 800d870:	f800283a 	ret

0800d874 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800d874:	defffd04 	addi	sp,sp,-12
 800d878:	dfc00215 	stw	ra,8(sp)
 800d87c:	df000115 	stw	fp,4(sp)
 800d880:	df000104 	addi	fp,sp,4
 800d884:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800d888:	e13fff17 	ldw	r4,-4(fp)
 800d88c:	01420074 	movhi	r5,2049
 800d890:	29450704 	addi	r5,r5,5148
 800d894:	800e5200 	call	800e520 <alt_dev_llist_insert>
}
 800d898:	e037883a 	mov	sp,fp
 800d89c:	dfc00117 	ldw	ra,4(sp)
 800d8a0:	df000017 	ldw	fp,0(sp)
 800d8a4:	dec00204 	addi	sp,sp,8
 800d8a8:	f800283a 	ret

0800d8ac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800d8ac:	defffd04 	addi	sp,sp,-12
 800d8b0:	dfc00215 	stw	ra,8(sp)
 800d8b4:	df000115 	stw	fp,4(sp)
 800d8b8:	df000104 	addi	fp,sp,4
 800d8bc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 800d8c0:	800ef000 	call	800ef00 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800d8c4:	00800044 	movi	r2,1
 800d8c8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800d8cc:	e037883a 	mov	sp,fp
 800d8d0:	dfc00117 	ldw	ra,4(sp)
 800d8d4:	df000017 	ldw	fp,0(sp)
 800d8d8:	dec00204 	addi	sp,sp,8
 800d8dc:	f800283a 	ret

0800d8e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800d8e0:	defffe04 	addi	sp,sp,-8
 800d8e4:	dfc00115 	stw	ra,4(sp)
 800d8e8:	df000015 	stw	fp,0(sp)
 800d8ec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800d8f0:	01020074 	movhi	r4,2049
 800d8f4:	2100f104 	addi	r4,r4,964
 800d8f8:	000b883a 	mov	r5,zero
 800d8fc:	01800144 	movi	r6,5
 800d900:	800da8c0 	call	800da8c <altera_avalon_jtag_uart_init>
 800d904:	01020074 	movhi	r4,2049
 800d908:	2100e704 	addi	r4,r4,924
 800d90c:	800d8740 	call	800d874 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 800d910:	0001883a 	nop
}
 800d914:	e037883a 	mov	sp,fp
 800d918:	dfc00117 	ldw	ra,4(sp)
 800d91c:	df000017 	ldw	fp,0(sp)
 800d920:	dec00204 	addi	sp,sp,8
 800d924:	f800283a 	ret

0800d928 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800d928:	defffa04 	addi	sp,sp,-24
 800d92c:	dfc00515 	stw	ra,20(sp)
 800d930:	df000415 	stw	fp,16(sp)
 800d934:	df000404 	addi	fp,sp,16
 800d938:	e13ffd15 	stw	r4,-12(fp)
 800d93c:	e17ffe15 	stw	r5,-8(fp)
 800d940:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800d944:	e0bffd17 	ldw	r2,-12(fp)
 800d948:	10800017 	ldw	r2,0(r2)
 800d94c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800d950:	e0bffc17 	ldw	r2,-16(fp)
 800d954:	10c00a04 	addi	r3,r2,40
 800d958:	e0bffd17 	ldw	r2,-12(fp)
 800d95c:	10800217 	ldw	r2,8(r2)
 800d960:	1809883a 	mov	r4,r3
 800d964:	e17ffe17 	ldw	r5,-8(fp)
 800d968:	e1bfff17 	ldw	r6,-4(fp)
 800d96c:	100f883a 	mov	r7,r2
 800d970:	800df500 	call	800df50 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800d974:	e037883a 	mov	sp,fp
 800d978:	dfc00117 	ldw	ra,4(sp)
 800d97c:	df000017 	ldw	fp,0(sp)
 800d980:	dec00204 	addi	sp,sp,8
 800d984:	f800283a 	ret

0800d988 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800d988:	defffa04 	addi	sp,sp,-24
 800d98c:	dfc00515 	stw	ra,20(sp)
 800d990:	df000415 	stw	fp,16(sp)
 800d994:	df000404 	addi	fp,sp,16
 800d998:	e13ffd15 	stw	r4,-12(fp)
 800d99c:	e17ffe15 	stw	r5,-8(fp)
 800d9a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800d9a4:	e0bffd17 	ldw	r2,-12(fp)
 800d9a8:	10800017 	ldw	r2,0(r2)
 800d9ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800d9b0:	e0bffc17 	ldw	r2,-16(fp)
 800d9b4:	10c00a04 	addi	r3,r2,40
 800d9b8:	e0bffd17 	ldw	r2,-12(fp)
 800d9bc:	10800217 	ldw	r2,8(r2)
 800d9c0:	1809883a 	mov	r4,r3
 800d9c4:	e17ffe17 	ldw	r5,-8(fp)
 800d9c8:	e1bfff17 	ldw	r6,-4(fp)
 800d9cc:	100f883a 	mov	r7,r2
 800d9d0:	800e15c0 	call	800e15c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800d9d4:	e037883a 	mov	sp,fp
 800d9d8:	dfc00117 	ldw	ra,4(sp)
 800d9dc:	df000017 	ldw	fp,0(sp)
 800d9e0:	dec00204 	addi	sp,sp,8
 800d9e4:	f800283a 	ret

0800d9e8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800d9e8:	defffc04 	addi	sp,sp,-16
 800d9ec:	dfc00315 	stw	ra,12(sp)
 800d9f0:	df000215 	stw	fp,8(sp)
 800d9f4:	df000204 	addi	fp,sp,8
 800d9f8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800d9fc:	e0bfff17 	ldw	r2,-4(fp)
 800da00:	10800017 	ldw	r2,0(r2)
 800da04:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800da08:	e0bffe17 	ldw	r2,-8(fp)
 800da0c:	10c00a04 	addi	r3,r2,40
 800da10:	e0bfff17 	ldw	r2,-4(fp)
 800da14:	10800217 	ldw	r2,8(r2)
 800da18:	1809883a 	mov	r4,r3
 800da1c:	100b883a 	mov	r5,r2
 800da20:	800ddfc0 	call	800ddfc <altera_avalon_jtag_uart_close>
}
 800da24:	e037883a 	mov	sp,fp
 800da28:	dfc00117 	ldw	ra,4(sp)
 800da2c:	df000017 	ldw	fp,0(sp)
 800da30:	dec00204 	addi	sp,sp,8
 800da34:	f800283a 	ret

0800da38 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800da38:	defffa04 	addi	sp,sp,-24
 800da3c:	dfc00515 	stw	ra,20(sp)
 800da40:	df000415 	stw	fp,16(sp)
 800da44:	df000404 	addi	fp,sp,16
 800da48:	e13ffd15 	stw	r4,-12(fp)
 800da4c:	e17ffe15 	stw	r5,-8(fp)
 800da50:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800da54:	e0bffd17 	ldw	r2,-12(fp)
 800da58:	10800017 	ldw	r2,0(r2)
 800da5c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800da60:	e0bffc17 	ldw	r2,-16(fp)
 800da64:	10800a04 	addi	r2,r2,40
 800da68:	1009883a 	mov	r4,r2
 800da6c:	e17ffe17 	ldw	r5,-8(fp)
 800da70:	e1bfff17 	ldw	r6,-4(fp)
 800da74:	800de640 	call	800de64 <altera_avalon_jtag_uart_ioctl>
}
 800da78:	e037883a 	mov	sp,fp
 800da7c:	dfc00117 	ldw	ra,4(sp)
 800da80:	df000017 	ldw	fp,0(sp)
 800da84:	dec00204 	addi	sp,sp,8
 800da88:	f800283a 	ret

0800da8c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800da8c:	defffa04 	addi	sp,sp,-24
 800da90:	dfc00515 	stw	ra,20(sp)
 800da94:	df000415 	stw	fp,16(sp)
 800da98:	df000404 	addi	fp,sp,16
 800da9c:	e13ffd15 	stw	r4,-12(fp)
 800daa0:	e17ffe15 	stw	r5,-8(fp)
 800daa4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800daa8:	e0bffd17 	ldw	r2,-12(fp)
 800daac:	00c00044 	movi	r3,1
 800dab0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800dab4:	e0bffd17 	ldw	r2,-12(fp)
 800dab8:	10800017 	ldw	r2,0(r2)
 800dabc:	10800104 	addi	r2,r2,4
 800dac0:	1007883a 	mov	r3,r2
 800dac4:	e0bffd17 	ldw	r2,-12(fp)
 800dac8:	10800817 	ldw	r2,32(r2)
 800dacc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800dad0:	e0fffe17 	ldw	r3,-8(fp)
 800dad4:	e0bfff17 	ldw	r2,-4(fp)
 800dad8:	d8000015 	stw	zero,0(sp)
 800dadc:	1809883a 	mov	r4,r3
 800dae0:	100b883a 	mov	r5,r2
 800dae4:	01820074 	movhi	r6,2049
 800dae8:	31b6d404 	addi	r6,r6,-9392
 800daec:	e1fffd17 	ldw	r7,-12(fp)
 800daf0:	800e6980 	call	800e698 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800daf4:	e0bffd17 	ldw	r2,-12(fp)
 800daf8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800dafc:	e0bffd17 	ldw	r2,-12(fp)
 800db00:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800db04:	00820074 	movhi	r2,2049
 800db08:	108bd504 	addi	r2,r2,12116
 800db0c:	10800017 	ldw	r2,0(r2)
 800db10:	1809883a 	mov	r4,r3
 800db14:	100b883a 	mov	r5,r2
 800db18:	01820074 	movhi	r6,2049
 800db1c:	31b75504 	addi	r6,r6,-8876
 800db20:	e1fffd17 	ldw	r7,-12(fp)
 800db24:	800e3740 	call	800e374 <alt_alarm_start>
 800db28:	1000040e 	bge	r2,zero,800db3c <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800db2c:	e0fffd17 	ldw	r3,-12(fp)
 800db30:	00a00034 	movhi	r2,32768
 800db34:	10bfffc4 	addi	r2,r2,-1
 800db38:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800db3c:	e037883a 	mov	sp,fp
 800db40:	dfc00117 	ldw	ra,4(sp)
 800db44:	df000017 	ldw	fp,0(sp)
 800db48:	dec00204 	addi	sp,sp,8
 800db4c:	f800283a 	ret

0800db50 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800db50:	defff804 	addi	sp,sp,-32
 800db54:	df000715 	stw	fp,28(sp)
 800db58:	df000704 	addi	fp,sp,28
 800db5c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800db60:	e0bfff17 	ldw	r2,-4(fp)
 800db64:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800db68:	e0bffb17 	ldw	r2,-20(fp)
 800db6c:	10800017 	ldw	r2,0(r2)
 800db70:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800db74:	e0bffc17 	ldw	r2,-16(fp)
 800db78:	10800104 	addi	r2,r2,4
 800db7c:	10800037 	ldwio	r2,0(r2)
 800db80:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800db84:	e0bffd17 	ldw	r2,-12(fp)
 800db88:	1080c00c 	andi	r2,r2,768
 800db8c:	1000011e 	bne	r2,zero,800db94 <altera_avalon_jtag_uart_irq+0x44>
      break;
 800db90:	00006c06 	br	800dd44 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800db94:	e0bffd17 	ldw	r2,-12(fp)
 800db98:	1080400c 	andi	r2,r2,256
 800db9c:	10003426 	beq	r2,zero,800dc70 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800dba0:	00800074 	movhi	r2,1
 800dba4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800dba8:	e0bffb17 	ldw	r2,-20(fp)
 800dbac:	10800a17 	ldw	r2,40(r2)
 800dbb0:	10800044 	addi	r2,r2,1
 800dbb4:	1081ffcc 	andi	r2,r2,2047
 800dbb8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800dbbc:	e0bffb17 	ldw	r2,-20(fp)
 800dbc0:	10c00b17 	ldw	r3,44(r2)
 800dbc4:	e0bffe17 	ldw	r2,-8(fp)
 800dbc8:	1880011e 	bne	r3,r2,800dbd0 <altera_avalon_jtag_uart_irq+0x80>
          break;
 800dbcc:	00001606 	br	800dc28 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800dbd0:	e0bffc17 	ldw	r2,-16(fp)
 800dbd4:	10800037 	ldwio	r2,0(r2)
 800dbd8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800dbdc:	e0bff917 	ldw	r2,-28(fp)
 800dbe0:	10a0000c 	andi	r2,r2,32768
 800dbe4:	1000011e 	bne	r2,zero,800dbec <altera_avalon_jtag_uart_irq+0x9c>
          break;
 800dbe8:	00000f06 	br	800dc28 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800dbec:	e0bffb17 	ldw	r2,-20(fp)
 800dbf0:	10800a17 	ldw	r2,40(r2)
 800dbf4:	e0fff917 	ldw	r3,-28(fp)
 800dbf8:	1809883a 	mov	r4,r3
 800dbfc:	e0fffb17 	ldw	r3,-20(fp)
 800dc00:	1885883a 	add	r2,r3,r2
 800dc04:	10800e04 	addi	r2,r2,56
 800dc08:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800dc0c:	e0bffb17 	ldw	r2,-20(fp)
 800dc10:	10800a17 	ldw	r2,40(r2)
 800dc14:	10800044 	addi	r2,r2,1
 800dc18:	10c1ffcc 	andi	r3,r2,2047
 800dc1c:	e0bffb17 	ldw	r2,-20(fp)
 800dc20:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800dc24:	003fe006 	br	800dba8 <__alt_data_end+0xfc00dba8>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800dc28:	e0bff917 	ldw	r2,-28(fp)
 800dc2c:	10bfffec 	andhi	r2,r2,65535
 800dc30:	10000f26 	beq	r2,zero,800dc70 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800dc34:	e0bffb17 	ldw	r2,-20(fp)
 800dc38:	10c00817 	ldw	r3,32(r2)
 800dc3c:	00bfff84 	movi	r2,-2
 800dc40:	1886703a 	and	r3,r3,r2
 800dc44:	e0bffb17 	ldw	r2,-20(fp)
 800dc48:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800dc4c:	e0bffc17 	ldw	r2,-16(fp)
 800dc50:	10800104 	addi	r2,r2,4
 800dc54:	1007883a 	mov	r3,r2
 800dc58:	e0bffb17 	ldw	r2,-20(fp)
 800dc5c:	10800817 	ldw	r2,32(r2)
 800dc60:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800dc64:	e0bffc17 	ldw	r2,-16(fp)
 800dc68:	10800104 	addi	r2,r2,4
 800dc6c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800dc70:	e0bffd17 	ldw	r2,-12(fp)
 800dc74:	1080800c 	andi	r2,r2,512
 800dc78:	10003126 	beq	r2,zero,800dd40 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800dc7c:	e0bffd17 	ldw	r2,-12(fp)
 800dc80:	1004d43a 	srli	r2,r2,16
 800dc84:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800dc88:	00001406 	br	800dcdc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800dc8c:	e0bffc17 	ldw	r2,-16(fp)
 800dc90:	e0fffb17 	ldw	r3,-20(fp)
 800dc94:	18c00d17 	ldw	r3,52(r3)
 800dc98:	e13ffb17 	ldw	r4,-20(fp)
 800dc9c:	20c7883a 	add	r3,r4,r3
 800dca0:	18c20e04 	addi	r3,r3,2104
 800dca4:	18c00003 	ldbu	r3,0(r3)
 800dca8:	18c03fcc 	andi	r3,r3,255
 800dcac:	18c0201c 	xori	r3,r3,128
 800dcb0:	18ffe004 	addi	r3,r3,-128
 800dcb4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800dcb8:	e0bffb17 	ldw	r2,-20(fp)
 800dcbc:	10800d17 	ldw	r2,52(r2)
 800dcc0:	10800044 	addi	r2,r2,1
 800dcc4:	10c1ffcc 	andi	r3,r2,2047
 800dcc8:	e0bffb17 	ldw	r2,-20(fp)
 800dccc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800dcd0:	e0bffa17 	ldw	r2,-24(fp)
 800dcd4:	10bfffc4 	addi	r2,r2,-1
 800dcd8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800dcdc:	e0bffa17 	ldw	r2,-24(fp)
 800dce0:	10000526 	beq	r2,zero,800dcf8 <altera_avalon_jtag_uart_irq+0x1a8>
 800dce4:	e0bffb17 	ldw	r2,-20(fp)
 800dce8:	10c00d17 	ldw	r3,52(r2)
 800dcec:	e0bffb17 	ldw	r2,-20(fp)
 800dcf0:	10800c17 	ldw	r2,48(r2)
 800dcf4:	18bfe51e 	bne	r3,r2,800dc8c <__alt_data_end+0xfc00dc8c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800dcf8:	e0bffa17 	ldw	r2,-24(fp)
 800dcfc:	10001026 	beq	r2,zero,800dd40 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800dd00:	e0bffb17 	ldw	r2,-20(fp)
 800dd04:	10c00817 	ldw	r3,32(r2)
 800dd08:	00bfff44 	movi	r2,-3
 800dd0c:	1886703a 	and	r3,r3,r2
 800dd10:	e0bffb17 	ldw	r2,-20(fp)
 800dd14:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800dd18:	e0bffb17 	ldw	r2,-20(fp)
 800dd1c:	10800017 	ldw	r2,0(r2)
 800dd20:	10800104 	addi	r2,r2,4
 800dd24:	1007883a 	mov	r3,r2
 800dd28:	e0bffb17 	ldw	r2,-20(fp)
 800dd2c:	10800817 	ldw	r2,32(r2)
 800dd30:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800dd34:	e0bffc17 	ldw	r2,-16(fp)
 800dd38:	10800104 	addi	r2,r2,4
 800dd3c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800dd40:	003f8c06 	br	800db74 <__alt_data_end+0xfc00db74>
}
 800dd44:	e037883a 	mov	sp,fp
 800dd48:	df000017 	ldw	fp,0(sp)
 800dd4c:	dec00104 	addi	sp,sp,4
 800dd50:	f800283a 	ret

0800dd54 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800dd54:	defff804 	addi	sp,sp,-32
 800dd58:	df000715 	stw	fp,28(sp)
 800dd5c:	df000704 	addi	fp,sp,28
 800dd60:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800dd64:	e0bffb17 	ldw	r2,-20(fp)
 800dd68:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800dd6c:	e0bff917 	ldw	r2,-28(fp)
 800dd70:	10800017 	ldw	r2,0(r2)
 800dd74:	10800104 	addi	r2,r2,4
 800dd78:	10800037 	ldwio	r2,0(r2)
 800dd7c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800dd80:	e0bffa17 	ldw	r2,-24(fp)
 800dd84:	1081000c 	andi	r2,r2,1024
 800dd88:	10000b26 	beq	r2,zero,800ddb8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800dd8c:	e0bff917 	ldw	r2,-28(fp)
 800dd90:	10800017 	ldw	r2,0(r2)
 800dd94:	10800104 	addi	r2,r2,4
 800dd98:	1007883a 	mov	r3,r2
 800dd9c:	e0bff917 	ldw	r2,-28(fp)
 800dda0:	10800817 	ldw	r2,32(r2)
 800dda4:	10810014 	ori	r2,r2,1024
 800dda8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800ddac:	e0bff917 	ldw	r2,-28(fp)
 800ddb0:	10000915 	stw	zero,36(r2)
 800ddb4:	00000a06 	br	800dde0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800ddb8:	e0bff917 	ldw	r2,-28(fp)
 800ddbc:	10c00917 	ldw	r3,36(r2)
 800ddc0:	00a00034 	movhi	r2,32768
 800ddc4:	10bfff04 	addi	r2,r2,-4
 800ddc8:	10c00536 	bltu	r2,r3,800dde0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800ddcc:	e0bff917 	ldw	r2,-28(fp)
 800ddd0:	10800917 	ldw	r2,36(r2)
 800ddd4:	10c00044 	addi	r3,r2,1
 800ddd8:	e0bff917 	ldw	r2,-28(fp)
 800dddc:	10c00915 	stw	r3,36(r2)
 800dde0:	00820074 	movhi	r2,2049
 800dde4:	108bd504 	addi	r2,r2,12116
 800dde8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800ddec:	e037883a 	mov	sp,fp
 800ddf0:	df000017 	ldw	fp,0(sp)
 800ddf4:	dec00104 	addi	sp,sp,4
 800ddf8:	f800283a 	ret

0800ddfc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800ddfc:	defffd04 	addi	sp,sp,-12
 800de00:	df000215 	stw	fp,8(sp)
 800de04:	df000204 	addi	fp,sp,8
 800de08:	e13ffe15 	stw	r4,-8(fp)
 800de0c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800de10:	00000506 	br	800de28 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800de14:	e0bfff17 	ldw	r2,-4(fp)
 800de18:	1090000c 	andi	r2,r2,16384
 800de1c:	10000226 	beq	r2,zero,800de28 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800de20:	00bffd44 	movi	r2,-11
 800de24:	00000b06 	br	800de54 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800de28:	e0bffe17 	ldw	r2,-8(fp)
 800de2c:	10c00d17 	ldw	r3,52(r2)
 800de30:	e0bffe17 	ldw	r2,-8(fp)
 800de34:	10800c17 	ldw	r2,48(r2)
 800de38:	18800526 	beq	r3,r2,800de50 <altera_avalon_jtag_uart_close+0x54>
 800de3c:	e0bffe17 	ldw	r2,-8(fp)
 800de40:	10c00917 	ldw	r3,36(r2)
 800de44:	e0bffe17 	ldw	r2,-8(fp)
 800de48:	10800117 	ldw	r2,4(r2)
 800de4c:	18bff136 	bltu	r3,r2,800de14 <__alt_data_end+0xfc00de14>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800de50:	0005883a 	mov	r2,zero
}
 800de54:	e037883a 	mov	sp,fp
 800de58:	df000017 	ldw	fp,0(sp)
 800de5c:	dec00104 	addi	sp,sp,4
 800de60:	f800283a 	ret

0800de64 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800de64:	defffa04 	addi	sp,sp,-24
 800de68:	df000515 	stw	fp,20(sp)
 800de6c:	df000504 	addi	fp,sp,20
 800de70:	e13ffd15 	stw	r4,-12(fp)
 800de74:	e17ffe15 	stw	r5,-8(fp)
 800de78:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800de7c:	00bff9c4 	movi	r2,-25
 800de80:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800de84:	e0bffe17 	ldw	r2,-8(fp)
 800de88:	10da8060 	cmpeqi	r3,r2,27137
 800de8c:	1800031e 	bne	r3,zero,800de9c <altera_avalon_jtag_uart_ioctl+0x38>
 800de90:	109a80a0 	cmpeqi	r2,r2,27138
 800de94:	1000191e 	bne	r2,zero,800defc <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 800de98:	00002806 	br	800df3c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800de9c:	e0bffd17 	ldw	r2,-12(fp)
 800dea0:	10c00117 	ldw	r3,4(r2)
 800dea4:	00a00034 	movhi	r2,32768
 800dea8:	10bfffc4 	addi	r2,r2,-1
 800deac:	18801226 	beq	r3,r2,800def8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 800deb0:	e0bfff17 	ldw	r2,-4(fp)
 800deb4:	10800017 	ldw	r2,0(r2)
 800deb8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800debc:	e0bffc17 	ldw	r2,-16(fp)
 800dec0:	10800090 	cmplti	r2,r2,2
 800dec4:	1000061e 	bne	r2,zero,800dee0 <altera_avalon_jtag_uart_ioctl+0x7c>
 800dec8:	e0fffc17 	ldw	r3,-16(fp)
 800decc:	00a00034 	movhi	r2,32768
 800ded0:	10bfffc4 	addi	r2,r2,-1
 800ded4:	18800226 	beq	r3,r2,800dee0 <altera_avalon_jtag_uart_ioctl+0x7c>
 800ded8:	e0bffc17 	ldw	r2,-16(fp)
 800dedc:	00000206 	br	800dee8 <altera_avalon_jtag_uart_ioctl+0x84>
 800dee0:	00a00034 	movhi	r2,32768
 800dee4:	10bfff84 	addi	r2,r2,-2
 800dee8:	e0fffd17 	ldw	r3,-12(fp)
 800deec:	18800115 	stw	r2,4(r3)
      rc = 0;
 800def0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800def4:	00001106 	br	800df3c <altera_avalon_jtag_uart_ioctl+0xd8>
 800def8:	00001006 	br	800df3c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800defc:	e0bffd17 	ldw	r2,-12(fp)
 800df00:	10c00117 	ldw	r3,4(r2)
 800df04:	00a00034 	movhi	r2,32768
 800df08:	10bfffc4 	addi	r2,r2,-1
 800df0c:	18800a26 	beq	r3,r2,800df38 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800df10:	e0bffd17 	ldw	r2,-12(fp)
 800df14:	10c00917 	ldw	r3,36(r2)
 800df18:	e0bffd17 	ldw	r2,-12(fp)
 800df1c:	10800117 	ldw	r2,4(r2)
 800df20:	1885803a 	cmpltu	r2,r3,r2
 800df24:	10c03fcc 	andi	r3,r2,255
 800df28:	e0bfff17 	ldw	r2,-4(fp)
 800df2c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800df30:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800df34:	00000006 	br	800df38 <altera_avalon_jtag_uart_ioctl+0xd4>
 800df38:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800df3c:	e0bffb17 	ldw	r2,-20(fp)
}
 800df40:	e037883a 	mov	sp,fp
 800df44:	df000017 	ldw	fp,0(sp)
 800df48:	dec00104 	addi	sp,sp,4
 800df4c:	f800283a 	ret

0800df50 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800df50:	defff304 	addi	sp,sp,-52
 800df54:	dfc00c15 	stw	ra,48(sp)
 800df58:	df000b15 	stw	fp,44(sp)
 800df5c:	df000b04 	addi	fp,sp,44
 800df60:	e13ffc15 	stw	r4,-16(fp)
 800df64:	e17ffd15 	stw	r5,-12(fp)
 800df68:	e1bffe15 	stw	r6,-8(fp)
 800df6c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800df70:	e0bffd17 	ldw	r2,-12(fp)
 800df74:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800df78:	00004906 	br	800e0a0 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800df7c:	e0bffc17 	ldw	r2,-16(fp)
 800df80:	10800a17 	ldw	r2,40(r2)
 800df84:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800df88:	e0bffc17 	ldw	r2,-16(fp)
 800df8c:	10800b17 	ldw	r2,44(r2)
 800df90:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800df94:	e0fff717 	ldw	r3,-36(fp)
 800df98:	e0bff817 	ldw	r2,-32(fp)
 800df9c:	18800536 	bltu	r3,r2,800dfb4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800dfa0:	e0fff717 	ldw	r3,-36(fp)
 800dfa4:	e0bff817 	ldw	r2,-32(fp)
 800dfa8:	1885c83a 	sub	r2,r3,r2
 800dfac:	e0bff615 	stw	r2,-40(fp)
 800dfb0:	00000406 	br	800dfc4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800dfb4:	00c20004 	movi	r3,2048
 800dfb8:	e0bff817 	ldw	r2,-32(fp)
 800dfbc:	1885c83a 	sub	r2,r3,r2
 800dfc0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800dfc4:	e0bff617 	ldw	r2,-40(fp)
 800dfc8:	1000011e 	bne	r2,zero,800dfd0 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 800dfcc:	00001d06 	br	800e044 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 800dfd0:	e0fffe17 	ldw	r3,-8(fp)
 800dfd4:	e0bff617 	ldw	r2,-40(fp)
 800dfd8:	1880022e 	bgeu	r3,r2,800dfe4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 800dfdc:	e0bffe17 	ldw	r2,-8(fp)
 800dfe0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800dfe4:	e0bff817 	ldw	r2,-32(fp)
 800dfe8:	10800e04 	addi	r2,r2,56
 800dfec:	e0fffc17 	ldw	r3,-16(fp)
 800dff0:	1885883a 	add	r2,r3,r2
 800dff4:	e13ff517 	ldw	r4,-44(fp)
 800dff8:	100b883a 	mov	r5,r2
 800dffc:	e1bff617 	ldw	r6,-40(fp)
 800e000:	8005de40 	call	8005de4 <memcpy>
      ptr   += n;
 800e004:	e0fff517 	ldw	r3,-44(fp)
 800e008:	e0bff617 	ldw	r2,-40(fp)
 800e00c:	1885883a 	add	r2,r3,r2
 800e010:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800e014:	e0fffe17 	ldw	r3,-8(fp)
 800e018:	e0bff617 	ldw	r2,-40(fp)
 800e01c:	1885c83a 	sub	r2,r3,r2
 800e020:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e024:	e0fff817 	ldw	r3,-32(fp)
 800e028:	e0bff617 	ldw	r2,-40(fp)
 800e02c:	1885883a 	add	r2,r3,r2
 800e030:	10c1ffcc 	andi	r3,r2,2047
 800e034:	e0bffc17 	ldw	r2,-16(fp)
 800e038:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800e03c:	e0bffe17 	ldw	r2,-8(fp)
 800e040:	00bfce16 	blt	zero,r2,800df7c <__alt_data_end+0xfc00df7c>

    /* If we read any data then return it */
    if (ptr != buffer)
 800e044:	e0fff517 	ldw	r3,-44(fp)
 800e048:	e0bffd17 	ldw	r2,-12(fp)
 800e04c:	18800126 	beq	r3,r2,800e054 <altera_avalon_jtag_uart_read+0x104>
      break;
 800e050:	00001506 	br	800e0a8 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800e054:	e0bfff17 	ldw	r2,-4(fp)
 800e058:	1090000c 	andi	r2,r2,16384
 800e05c:	10000126 	beq	r2,zero,800e064 <altera_avalon_jtag_uart_read+0x114>
      break;
 800e060:	00001106 	br	800e0a8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800e064:	0001883a 	nop
 800e068:	e0bffc17 	ldw	r2,-16(fp)
 800e06c:	10c00a17 	ldw	r3,40(r2)
 800e070:	e0bff717 	ldw	r2,-36(fp)
 800e074:	1880051e 	bne	r3,r2,800e08c <altera_avalon_jtag_uart_read+0x13c>
 800e078:	e0bffc17 	ldw	r2,-16(fp)
 800e07c:	10c00917 	ldw	r3,36(r2)
 800e080:	e0bffc17 	ldw	r2,-16(fp)
 800e084:	10800117 	ldw	r2,4(r2)
 800e088:	18bff736 	bltu	r3,r2,800e068 <__alt_data_end+0xfc00e068>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800e08c:	e0bffc17 	ldw	r2,-16(fp)
 800e090:	10c00a17 	ldw	r3,40(r2)
 800e094:	e0bff717 	ldw	r2,-36(fp)
 800e098:	1880011e 	bne	r3,r2,800e0a0 <altera_avalon_jtag_uart_read+0x150>
      break;
 800e09c:	00000206 	br	800e0a8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800e0a0:	e0bffe17 	ldw	r2,-8(fp)
 800e0a4:	00bfb516 	blt	zero,r2,800df7c <__alt_data_end+0xfc00df7c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800e0a8:	e0fff517 	ldw	r3,-44(fp)
 800e0ac:	e0bffd17 	ldw	r2,-12(fp)
 800e0b0:	18801826 	beq	r3,r2,800e114 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e0b4:	0005303a 	rdctl	r2,status
 800e0b8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e0bc:	e0fffa17 	ldw	r3,-24(fp)
 800e0c0:	00bfff84 	movi	r2,-2
 800e0c4:	1884703a 	and	r2,r3,r2
 800e0c8:	1001703a 	wrctl	status,r2
  
  return context;
 800e0cc:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800e0d0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800e0d4:	e0bffc17 	ldw	r2,-16(fp)
 800e0d8:	10800817 	ldw	r2,32(r2)
 800e0dc:	10c00054 	ori	r3,r2,1
 800e0e0:	e0bffc17 	ldw	r2,-16(fp)
 800e0e4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800e0e8:	e0bffc17 	ldw	r2,-16(fp)
 800e0ec:	10800017 	ldw	r2,0(r2)
 800e0f0:	10800104 	addi	r2,r2,4
 800e0f4:	1007883a 	mov	r3,r2
 800e0f8:	e0bffc17 	ldw	r2,-16(fp)
 800e0fc:	10800817 	ldw	r2,32(r2)
 800e100:	18800035 	stwio	r2,0(r3)
 800e104:	e0bff917 	ldw	r2,-28(fp)
 800e108:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e10c:	e0bffb17 	ldw	r2,-20(fp)
 800e110:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800e114:	e0fff517 	ldw	r3,-44(fp)
 800e118:	e0bffd17 	ldw	r2,-12(fp)
 800e11c:	18800426 	beq	r3,r2,800e130 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 800e120:	e0fff517 	ldw	r3,-44(fp)
 800e124:	e0bffd17 	ldw	r2,-12(fp)
 800e128:	1885c83a 	sub	r2,r3,r2
 800e12c:	00000606 	br	800e148 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 800e130:	e0bfff17 	ldw	r2,-4(fp)
 800e134:	1090000c 	andi	r2,r2,16384
 800e138:	10000226 	beq	r2,zero,800e144 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 800e13c:	00bffd44 	movi	r2,-11
 800e140:	00000106 	br	800e148 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 800e144:	00bffec4 	movi	r2,-5
}
 800e148:	e037883a 	mov	sp,fp
 800e14c:	dfc00117 	ldw	ra,4(sp)
 800e150:	df000017 	ldw	fp,0(sp)
 800e154:	dec00204 	addi	sp,sp,8
 800e158:	f800283a 	ret

0800e15c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800e15c:	defff304 	addi	sp,sp,-52
 800e160:	dfc00c15 	stw	ra,48(sp)
 800e164:	df000b15 	stw	fp,44(sp)
 800e168:	df000b04 	addi	fp,sp,44
 800e16c:	e13ffc15 	stw	r4,-16(fp)
 800e170:	e17ffd15 	stw	r5,-12(fp)
 800e174:	e1bffe15 	stw	r6,-8(fp)
 800e178:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800e17c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800e180:	e0bffd17 	ldw	r2,-12(fp)
 800e184:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800e188:	00003806 	br	800e26c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800e18c:	e0bffc17 	ldw	r2,-16(fp)
 800e190:	10800c17 	ldw	r2,48(r2)
 800e194:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 800e198:	e0bffc17 	ldw	r2,-16(fp)
 800e19c:	10800d17 	ldw	r2,52(r2)
 800e1a0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800e1a4:	e0fff817 	ldw	r3,-32(fp)
 800e1a8:	e0bff517 	ldw	r2,-44(fp)
 800e1ac:	1880062e 	bgeu	r3,r2,800e1c8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800e1b0:	e0fff517 	ldw	r3,-44(fp)
 800e1b4:	e0bff817 	ldw	r2,-32(fp)
 800e1b8:	1885c83a 	sub	r2,r3,r2
 800e1bc:	10bfffc4 	addi	r2,r2,-1
 800e1c0:	e0bff615 	stw	r2,-40(fp)
 800e1c4:	00000b06 	br	800e1f4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800e1c8:	e0bff517 	ldw	r2,-44(fp)
 800e1cc:	10000526 	beq	r2,zero,800e1e4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800e1d0:	00c20004 	movi	r3,2048
 800e1d4:	e0bff817 	ldw	r2,-32(fp)
 800e1d8:	1885c83a 	sub	r2,r3,r2
 800e1dc:	e0bff615 	stw	r2,-40(fp)
 800e1e0:	00000406 	br	800e1f4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800e1e4:	00c1ffc4 	movi	r3,2047
 800e1e8:	e0bff817 	ldw	r2,-32(fp)
 800e1ec:	1885c83a 	sub	r2,r3,r2
 800e1f0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800e1f4:	e0bff617 	ldw	r2,-40(fp)
 800e1f8:	1000011e 	bne	r2,zero,800e200 <altera_avalon_jtag_uart_write+0xa4>
        break;
 800e1fc:	00001d06 	br	800e274 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 800e200:	e0fffe17 	ldw	r3,-8(fp)
 800e204:	e0bff617 	ldw	r2,-40(fp)
 800e208:	1880022e 	bgeu	r3,r2,800e214 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 800e20c:	e0bffe17 	ldw	r2,-8(fp)
 800e210:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800e214:	e0bff817 	ldw	r2,-32(fp)
 800e218:	10820e04 	addi	r2,r2,2104
 800e21c:	e0fffc17 	ldw	r3,-16(fp)
 800e220:	1885883a 	add	r2,r3,r2
 800e224:	1009883a 	mov	r4,r2
 800e228:	e17ffd17 	ldw	r5,-12(fp)
 800e22c:	e1bff617 	ldw	r6,-40(fp)
 800e230:	8005de40 	call	8005de4 <memcpy>
      ptr   += n;
 800e234:	e0fffd17 	ldw	r3,-12(fp)
 800e238:	e0bff617 	ldw	r2,-40(fp)
 800e23c:	1885883a 	add	r2,r3,r2
 800e240:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800e244:	e0fffe17 	ldw	r3,-8(fp)
 800e248:	e0bff617 	ldw	r2,-40(fp)
 800e24c:	1885c83a 	sub	r2,r3,r2
 800e250:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e254:	e0fff817 	ldw	r3,-32(fp)
 800e258:	e0bff617 	ldw	r2,-40(fp)
 800e25c:	1885883a 	add	r2,r3,r2
 800e260:	10c1ffcc 	andi	r3,r2,2047
 800e264:	e0bffc17 	ldw	r2,-16(fp)
 800e268:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800e26c:	e0bffe17 	ldw	r2,-8(fp)
 800e270:	00bfc616 	blt	zero,r2,800e18c <__alt_data_end+0xfc00e18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e274:	0005303a 	rdctl	r2,status
 800e278:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e27c:	e0fffa17 	ldw	r3,-24(fp)
 800e280:	00bfff84 	movi	r2,-2
 800e284:	1884703a 	and	r2,r3,r2
 800e288:	1001703a 	wrctl	status,r2
  
  return context;
 800e28c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800e290:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800e294:	e0bffc17 	ldw	r2,-16(fp)
 800e298:	10800817 	ldw	r2,32(r2)
 800e29c:	10c00094 	ori	r3,r2,2
 800e2a0:	e0bffc17 	ldw	r2,-16(fp)
 800e2a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800e2a8:	e0bffc17 	ldw	r2,-16(fp)
 800e2ac:	10800017 	ldw	r2,0(r2)
 800e2b0:	10800104 	addi	r2,r2,4
 800e2b4:	1007883a 	mov	r3,r2
 800e2b8:	e0bffc17 	ldw	r2,-16(fp)
 800e2bc:	10800817 	ldw	r2,32(r2)
 800e2c0:	18800035 	stwio	r2,0(r3)
 800e2c4:	e0bff917 	ldw	r2,-28(fp)
 800e2c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e2cc:	e0bffb17 	ldw	r2,-20(fp)
 800e2d0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800e2d4:	e0bffe17 	ldw	r2,-8(fp)
 800e2d8:	0080120e 	bge	zero,r2,800e324 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 800e2dc:	e0bfff17 	ldw	r2,-4(fp)
 800e2e0:	1090000c 	andi	r2,r2,16384
 800e2e4:	10000126 	beq	r2,zero,800e2ec <altera_avalon_jtag_uart_write+0x190>
        break;
 800e2e8:	00001006 	br	800e32c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800e2ec:	0001883a 	nop
 800e2f0:	e0bffc17 	ldw	r2,-16(fp)
 800e2f4:	10c00d17 	ldw	r3,52(r2)
 800e2f8:	e0bff517 	ldw	r2,-44(fp)
 800e2fc:	1880051e 	bne	r3,r2,800e314 <altera_avalon_jtag_uart_write+0x1b8>
 800e300:	e0bffc17 	ldw	r2,-16(fp)
 800e304:	10c00917 	ldw	r3,36(r2)
 800e308:	e0bffc17 	ldw	r2,-16(fp)
 800e30c:	10800117 	ldw	r2,4(r2)
 800e310:	18bff736 	bltu	r3,r2,800e2f0 <__alt_data_end+0xfc00e2f0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800e314:	e0bffc17 	ldw	r2,-16(fp)
 800e318:	10800917 	ldw	r2,36(r2)
 800e31c:	10000126 	beq	r2,zero,800e324 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 800e320:	00000206 	br	800e32c <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 800e324:	e0bffe17 	ldw	r2,-8(fp)
 800e328:	00bf9716 	blt	zero,r2,800e188 <__alt_data_end+0xfc00e188>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800e32c:	e0fffd17 	ldw	r3,-12(fp)
 800e330:	e0bff717 	ldw	r2,-36(fp)
 800e334:	18800426 	beq	r3,r2,800e348 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 800e338:	e0fffd17 	ldw	r3,-12(fp)
 800e33c:	e0bff717 	ldw	r2,-36(fp)
 800e340:	1885c83a 	sub	r2,r3,r2
 800e344:	00000606 	br	800e360 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 800e348:	e0bfff17 	ldw	r2,-4(fp)
 800e34c:	1090000c 	andi	r2,r2,16384
 800e350:	10000226 	beq	r2,zero,800e35c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 800e354:	00bffd44 	movi	r2,-11
 800e358:	00000106 	br	800e360 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800e35c:	00bffec4 	movi	r2,-5
}
 800e360:	e037883a 	mov	sp,fp
 800e364:	dfc00117 	ldw	ra,4(sp)
 800e368:	df000017 	ldw	fp,0(sp)
 800e36c:	dec00204 	addi	sp,sp,8
 800e370:	f800283a 	ret

0800e374 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800e374:	defff504 	addi	sp,sp,-44
 800e378:	df000a15 	stw	fp,40(sp)
 800e37c:	df000a04 	addi	fp,sp,40
 800e380:	e13ffc15 	stw	r4,-16(fp)
 800e384:	e17ffd15 	stw	r5,-12(fp)
 800e388:	e1bffe15 	stw	r6,-8(fp)
 800e38c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800e390:	e03ff615 	stw	zero,-40(fp)
 800e394:	00820074 	movhi	r2,2049
 800e398:	108bd504 	addi	r2,r2,12116
 800e39c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 800e3a0:	10003f26 	beq	r2,zero,800e4a0 <alt_alarm_start+0x12c>
  {
    if (alarm)
 800e3a4:	e0bffc17 	ldw	r2,-16(fp)
 800e3a8:	10003b26 	beq	r2,zero,800e498 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 800e3ac:	e0bffc17 	ldw	r2,-16(fp)
 800e3b0:	e0fffe17 	ldw	r3,-8(fp)
 800e3b4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800e3b8:	e0bffc17 	ldw	r2,-16(fp)
 800e3bc:	e0ffff17 	ldw	r3,-4(fp)
 800e3c0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e3c4:	0005303a 	rdctl	r2,status
 800e3c8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e3cc:	e0fff817 	ldw	r3,-32(fp)
 800e3d0:	00bfff84 	movi	r2,-2
 800e3d4:	1884703a 	and	r2,r3,r2
 800e3d8:	1001703a 	wrctl	status,r2
  
  return context;
 800e3dc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 800e3e0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800e3e4:	00820074 	movhi	r2,2049
 800e3e8:	108bd604 	addi	r2,r2,12120
 800e3ec:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 800e3f0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800e3f4:	e0fffd17 	ldw	r3,-12(fp)
 800e3f8:	e0bff617 	ldw	r2,-40(fp)
 800e3fc:	1885883a 	add	r2,r3,r2
 800e400:	10c00044 	addi	r3,r2,1
 800e404:	e0bffc17 	ldw	r2,-16(fp)
 800e408:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800e40c:	e0bffc17 	ldw	r2,-16(fp)
 800e410:	10c00217 	ldw	r3,8(r2)
 800e414:	e0bff617 	ldw	r2,-40(fp)
 800e418:	1880042e 	bgeu	r3,r2,800e42c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 800e41c:	e0bffc17 	ldw	r2,-16(fp)
 800e420:	00c00044 	movi	r3,1
 800e424:	10c00405 	stb	r3,16(r2)
 800e428:	00000206 	br	800e434 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 800e42c:	e0bffc17 	ldw	r2,-16(fp)
 800e430:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800e434:	e0fffc17 	ldw	r3,-16(fp)
 800e438:	00820074 	movhi	r2,2049
 800e43c:	10850d04 	addi	r2,r2,5172
 800e440:	e0bff915 	stw	r2,-28(fp)
 800e444:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800e448:	e0bffa17 	ldw	r2,-24(fp)
 800e44c:	e0fff917 	ldw	r3,-28(fp)
 800e450:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800e454:	e0bff917 	ldw	r2,-28(fp)
 800e458:	10c00017 	ldw	r3,0(r2)
 800e45c:	e0bffa17 	ldw	r2,-24(fp)
 800e460:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800e464:	e0bff917 	ldw	r2,-28(fp)
 800e468:	10800017 	ldw	r2,0(r2)
 800e46c:	e0fffa17 	ldw	r3,-24(fp)
 800e470:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800e474:	e0bff917 	ldw	r2,-28(fp)
 800e478:	e0fffa17 	ldw	r3,-24(fp)
 800e47c:	10c00015 	stw	r3,0(r2)
 800e480:	e0bff717 	ldw	r2,-36(fp)
 800e484:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e488:	e0bffb17 	ldw	r2,-20(fp)
 800e48c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800e490:	0005883a 	mov	r2,zero
 800e494:	00000306 	br	800e4a4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 800e498:	00bffa84 	movi	r2,-22
 800e49c:	00000106 	br	800e4a4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 800e4a0:	00bfde84 	movi	r2,-134
  }
}
 800e4a4:	e037883a 	mov	sp,fp
 800e4a8:	df000017 	ldw	fp,0(sp)
 800e4ac:	dec00104 	addi	sp,sp,4
 800e4b0:	f800283a 	ret

0800e4b4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800e4b4:	deffff04 	addi	sp,sp,-4
 800e4b8:	df000015 	stw	fp,0(sp)
 800e4bc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800e4c0:	e037883a 	mov	sp,fp
 800e4c4:	df000017 	ldw	fp,0(sp)
 800e4c8:	dec00104 	addi	sp,sp,4
 800e4cc:	f800283a 	ret

0800e4d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e4d0:	defffe04 	addi	sp,sp,-8
 800e4d4:	dfc00115 	stw	ra,4(sp)
 800e4d8:	df000015 	stw	fp,0(sp)
 800e4dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e4e0:	00820074 	movhi	r2,2049
 800e4e4:	10850a04 	addi	r2,r2,5160
 800e4e8:	10800017 	ldw	r2,0(r2)
 800e4ec:	10000526 	beq	r2,zero,800e504 <alt_get_errno+0x34>
 800e4f0:	00820074 	movhi	r2,2049
 800e4f4:	10850a04 	addi	r2,r2,5160
 800e4f8:	10800017 	ldw	r2,0(r2)
 800e4fc:	103ee83a 	callr	r2
 800e500:	00000206 	br	800e50c <alt_get_errno+0x3c>
 800e504:	00820074 	movhi	r2,2049
 800e508:	108bd004 	addi	r2,r2,12096
}
 800e50c:	e037883a 	mov	sp,fp
 800e510:	dfc00117 	ldw	ra,4(sp)
 800e514:	df000017 	ldw	fp,0(sp)
 800e518:	dec00204 	addi	sp,sp,8
 800e51c:	f800283a 	ret

0800e520 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800e520:	defffa04 	addi	sp,sp,-24
 800e524:	dfc00515 	stw	ra,20(sp)
 800e528:	df000415 	stw	fp,16(sp)
 800e52c:	df000404 	addi	fp,sp,16
 800e530:	e13ffe15 	stw	r4,-8(fp)
 800e534:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800e538:	e0bffe17 	ldw	r2,-8(fp)
 800e53c:	10000326 	beq	r2,zero,800e54c <alt_dev_llist_insert+0x2c>
 800e540:	e0bffe17 	ldw	r2,-8(fp)
 800e544:	10800217 	ldw	r2,8(r2)
 800e548:	1000061e 	bne	r2,zero,800e564 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 800e54c:	800e4d00 	call	800e4d0 <alt_get_errno>
 800e550:	1007883a 	mov	r3,r2
 800e554:	00800584 	movi	r2,22
 800e558:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 800e55c:	00bffa84 	movi	r2,-22
 800e560:	00001306 	br	800e5b0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800e564:	e0bffe17 	ldw	r2,-8(fp)
 800e568:	e0ffff17 	ldw	r3,-4(fp)
 800e56c:	e0fffc15 	stw	r3,-16(fp)
 800e570:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800e574:	e0bffd17 	ldw	r2,-12(fp)
 800e578:	e0fffc17 	ldw	r3,-16(fp)
 800e57c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800e580:	e0bffc17 	ldw	r2,-16(fp)
 800e584:	10c00017 	ldw	r3,0(r2)
 800e588:	e0bffd17 	ldw	r2,-12(fp)
 800e58c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800e590:	e0bffc17 	ldw	r2,-16(fp)
 800e594:	10800017 	ldw	r2,0(r2)
 800e598:	e0fffd17 	ldw	r3,-12(fp)
 800e59c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800e5a0:	e0bffc17 	ldw	r2,-16(fp)
 800e5a4:	e0fffd17 	ldw	r3,-12(fp)
 800e5a8:	10c00015 	stw	r3,0(r2)

  return 0;  
 800e5ac:	0005883a 	mov	r2,zero
}
 800e5b0:	e037883a 	mov	sp,fp
 800e5b4:	dfc00117 	ldw	ra,4(sp)
 800e5b8:	df000017 	ldw	fp,0(sp)
 800e5bc:	dec00204 	addi	sp,sp,8
 800e5c0:	f800283a 	ret

0800e5c4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800e5c4:	defffd04 	addi	sp,sp,-12
 800e5c8:	dfc00215 	stw	ra,8(sp)
 800e5cc:	df000115 	stw	fp,4(sp)
 800e5d0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800e5d4:	00820074 	movhi	r2,2049
 800e5d8:	10bd7504 	addi	r2,r2,-2604
 800e5dc:	e0bfff15 	stw	r2,-4(fp)
 800e5e0:	00000606 	br	800e5fc <_do_ctors+0x38>
        (*ctor) (); 
 800e5e4:	e0bfff17 	ldw	r2,-4(fp)
 800e5e8:	10800017 	ldw	r2,0(r2)
 800e5ec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800e5f0:	e0bfff17 	ldw	r2,-4(fp)
 800e5f4:	10bfff04 	addi	r2,r2,-4
 800e5f8:	e0bfff15 	stw	r2,-4(fp)
 800e5fc:	e0ffff17 	ldw	r3,-4(fp)
 800e600:	00820074 	movhi	r2,2049
 800e604:	10bd7604 	addi	r2,r2,-2600
 800e608:	18bff62e 	bgeu	r3,r2,800e5e4 <__alt_data_end+0xfc00e5e4>
        (*ctor) (); 
}
 800e60c:	e037883a 	mov	sp,fp
 800e610:	dfc00117 	ldw	ra,4(sp)
 800e614:	df000017 	ldw	fp,0(sp)
 800e618:	dec00204 	addi	sp,sp,8
 800e61c:	f800283a 	ret

0800e620 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800e620:	defffd04 	addi	sp,sp,-12
 800e624:	dfc00215 	stw	ra,8(sp)
 800e628:	df000115 	stw	fp,4(sp)
 800e62c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800e630:	00820074 	movhi	r2,2049
 800e634:	10bd7504 	addi	r2,r2,-2604
 800e638:	e0bfff15 	stw	r2,-4(fp)
 800e63c:	00000606 	br	800e658 <_do_dtors+0x38>
        (*dtor) (); 
 800e640:	e0bfff17 	ldw	r2,-4(fp)
 800e644:	10800017 	ldw	r2,0(r2)
 800e648:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800e64c:	e0bfff17 	ldw	r2,-4(fp)
 800e650:	10bfff04 	addi	r2,r2,-4
 800e654:	e0bfff15 	stw	r2,-4(fp)
 800e658:	e0ffff17 	ldw	r3,-4(fp)
 800e65c:	00820074 	movhi	r2,2049
 800e660:	10bd7604 	addi	r2,r2,-2600
 800e664:	18bff62e 	bgeu	r3,r2,800e640 <__alt_data_end+0xfc00e640>
        (*dtor) (); 
}
 800e668:	e037883a 	mov	sp,fp
 800e66c:	dfc00117 	ldw	ra,4(sp)
 800e670:	df000017 	ldw	fp,0(sp)
 800e674:	dec00204 	addi	sp,sp,8
 800e678:	f800283a 	ret

0800e67c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800e67c:	deffff04 	addi	sp,sp,-4
 800e680:	df000015 	stw	fp,0(sp)
 800e684:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 800e688:	e037883a 	mov	sp,fp
 800e68c:	df000017 	ldw	fp,0(sp)
 800e690:	dec00104 	addi	sp,sp,4
 800e694:	f800283a 	ret

0800e698 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800e698:	defff904 	addi	sp,sp,-28
 800e69c:	dfc00615 	stw	ra,24(sp)
 800e6a0:	df000515 	stw	fp,20(sp)
 800e6a4:	df000504 	addi	fp,sp,20
 800e6a8:	e13ffc15 	stw	r4,-16(fp)
 800e6ac:	e17ffd15 	stw	r5,-12(fp)
 800e6b0:	e1bffe15 	stw	r6,-8(fp)
 800e6b4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 800e6b8:	e0800217 	ldw	r2,8(fp)
 800e6bc:	d8800015 	stw	r2,0(sp)
 800e6c0:	e13ffc17 	ldw	r4,-16(fp)
 800e6c4:	e17ffd17 	ldw	r5,-12(fp)
 800e6c8:	e1bffe17 	ldw	r6,-8(fp)
 800e6cc:	e1ffff17 	ldw	r7,-4(fp)
 800e6d0:	800e8780 	call	800e878 <alt_iic_isr_register>
}  
 800e6d4:	e037883a 	mov	sp,fp
 800e6d8:	dfc00117 	ldw	ra,4(sp)
 800e6dc:	df000017 	ldw	fp,0(sp)
 800e6e0:	dec00204 	addi	sp,sp,8
 800e6e4:	f800283a 	ret

0800e6e8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 800e6e8:	defff904 	addi	sp,sp,-28
 800e6ec:	df000615 	stw	fp,24(sp)
 800e6f0:	df000604 	addi	fp,sp,24
 800e6f4:	e13ffe15 	stw	r4,-8(fp)
 800e6f8:	e17fff15 	stw	r5,-4(fp)
 800e6fc:	e0bfff17 	ldw	r2,-4(fp)
 800e700:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e704:	0005303a 	rdctl	r2,status
 800e708:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e70c:	e0fffb17 	ldw	r3,-20(fp)
 800e710:	00bfff84 	movi	r2,-2
 800e714:	1884703a 	and	r2,r3,r2
 800e718:	1001703a 	wrctl	status,r2
  
  return context;
 800e71c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800e720:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 800e724:	e0bffa17 	ldw	r2,-24(fp)
 800e728:	00c00044 	movi	r3,1
 800e72c:	1884983a 	sll	r2,r3,r2
 800e730:	1007883a 	mov	r3,r2
 800e734:	00820074 	movhi	r2,2049
 800e738:	108bd404 	addi	r2,r2,12112
 800e73c:	10800017 	ldw	r2,0(r2)
 800e740:	1886b03a 	or	r3,r3,r2
 800e744:	00820074 	movhi	r2,2049
 800e748:	108bd404 	addi	r2,r2,12112
 800e74c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800e750:	00820074 	movhi	r2,2049
 800e754:	108bd404 	addi	r2,r2,12112
 800e758:	10800017 	ldw	r2,0(r2)
 800e75c:	100170fa 	wrctl	ienable,r2
 800e760:	e0bffc17 	ldw	r2,-16(fp)
 800e764:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e768:	e0bffd17 	ldw	r2,-12(fp)
 800e76c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800e770:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 800e774:	0001883a 	nop
}
 800e778:	e037883a 	mov	sp,fp
 800e77c:	df000017 	ldw	fp,0(sp)
 800e780:	dec00104 	addi	sp,sp,4
 800e784:	f800283a 	ret

0800e788 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 800e788:	defff904 	addi	sp,sp,-28
 800e78c:	df000615 	stw	fp,24(sp)
 800e790:	df000604 	addi	fp,sp,24
 800e794:	e13ffe15 	stw	r4,-8(fp)
 800e798:	e17fff15 	stw	r5,-4(fp)
 800e79c:	e0bfff17 	ldw	r2,-4(fp)
 800e7a0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e7a4:	0005303a 	rdctl	r2,status
 800e7a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e7ac:	e0fffb17 	ldw	r3,-20(fp)
 800e7b0:	00bfff84 	movi	r2,-2
 800e7b4:	1884703a 	and	r2,r3,r2
 800e7b8:	1001703a 	wrctl	status,r2
  
  return context;
 800e7bc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800e7c0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 800e7c4:	e0bffa17 	ldw	r2,-24(fp)
 800e7c8:	00c00044 	movi	r3,1
 800e7cc:	1884983a 	sll	r2,r3,r2
 800e7d0:	0084303a 	nor	r2,zero,r2
 800e7d4:	1007883a 	mov	r3,r2
 800e7d8:	00820074 	movhi	r2,2049
 800e7dc:	108bd404 	addi	r2,r2,12112
 800e7e0:	10800017 	ldw	r2,0(r2)
 800e7e4:	1886703a 	and	r3,r3,r2
 800e7e8:	00820074 	movhi	r2,2049
 800e7ec:	108bd404 	addi	r2,r2,12112
 800e7f0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800e7f4:	00820074 	movhi	r2,2049
 800e7f8:	108bd404 	addi	r2,r2,12112
 800e7fc:	10800017 	ldw	r2,0(r2)
 800e800:	100170fa 	wrctl	ienable,r2
 800e804:	e0bffc17 	ldw	r2,-16(fp)
 800e808:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e80c:	e0bffd17 	ldw	r2,-12(fp)
 800e810:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800e814:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 800e818:	0001883a 	nop
}
 800e81c:	e037883a 	mov	sp,fp
 800e820:	df000017 	ldw	fp,0(sp)
 800e824:	dec00104 	addi	sp,sp,4
 800e828:	f800283a 	ret

0800e82c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800e82c:	defffc04 	addi	sp,sp,-16
 800e830:	df000315 	stw	fp,12(sp)
 800e834:	df000304 	addi	fp,sp,12
 800e838:	e13ffe15 	stw	r4,-8(fp)
 800e83c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 800e840:	000530fa 	rdctl	r2,ienable
 800e844:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 800e848:	e0bfff17 	ldw	r2,-4(fp)
 800e84c:	00c00044 	movi	r3,1
 800e850:	1884983a 	sll	r2,r3,r2
 800e854:	1007883a 	mov	r3,r2
 800e858:	e0bffd17 	ldw	r2,-12(fp)
 800e85c:	1884703a 	and	r2,r3,r2
 800e860:	1004c03a 	cmpne	r2,r2,zero
 800e864:	10803fcc 	andi	r2,r2,255
}
 800e868:	e037883a 	mov	sp,fp
 800e86c:	df000017 	ldw	fp,0(sp)
 800e870:	dec00104 	addi	sp,sp,4
 800e874:	f800283a 	ret

0800e878 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800e878:	defff504 	addi	sp,sp,-44
 800e87c:	dfc00a15 	stw	ra,40(sp)
 800e880:	df000915 	stw	fp,36(sp)
 800e884:	df000904 	addi	fp,sp,36
 800e888:	e13ffc15 	stw	r4,-16(fp)
 800e88c:	e17ffd15 	stw	r5,-12(fp)
 800e890:	e1bffe15 	stw	r6,-8(fp)
 800e894:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 800e898:	00bffa84 	movi	r2,-22
 800e89c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 800e8a0:	e0bffd17 	ldw	r2,-12(fp)
 800e8a4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800e8a8:	e0bff817 	ldw	r2,-32(fp)
 800e8ac:	10800808 	cmpgei	r2,r2,32
 800e8b0:	1000271e 	bne	r2,zero,800e950 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e8b4:	0005303a 	rdctl	r2,status
 800e8b8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e8bc:	e0fffa17 	ldw	r3,-24(fp)
 800e8c0:	00bfff84 	movi	r2,-2
 800e8c4:	1884703a 	and	r2,r3,r2
 800e8c8:	1001703a 	wrctl	status,r2
  
  return context;
 800e8cc:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 800e8d0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 800e8d4:	00820074 	movhi	r2,2049
 800e8d8:	108be204 	addi	r2,r2,12168
 800e8dc:	e0fff817 	ldw	r3,-32(fp)
 800e8e0:	180690fa 	slli	r3,r3,3
 800e8e4:	10c5883a 	add	r2,r2,r3
 800e8e8:	e0fffe17 	ldw	r3,-8(fp)
 800e8ec:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 800e8f0:	00820074 	movhi	r2,2049
 800e8f4:	108be204 	addi	r2,r2,12168
 800e8f8:	e0fff817 	ldw	r3,-32(fp)
 800e8fc:	180690fa 	slli	r3,r3,3
 800e900:	10c5883a 	add	r2,r2,r3
 800e904:	10800104 	addi	r2,r2,4
 800e908:	e0ffff17 	ldw	r3,-4(fp)
 800e90c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 800e910:	e0bffe17 	ldw	r2,-8(fp)
 800e914:	10000526 	beq	r2,zero,800e92c <alt_iic_isr_register+0xb4>
 800e918:	e0bff817 	ldw	r2,-32(fp)
 800e91c:	e13ffc17 	ldw	r4,-16(fp)
 800e920:	100b883a 	mov	r5,r2
 800e924:	800e6e80 	call	800e6e8 <alt_ic_irq_enable>
 800e928:	00000406 	br	800e93c <alt_iic_isr_register+0xc4>
 800e92c:	e0bff817 	ldw	r2,-32(fp)
 800e930:	e13ffc17 	ldw	r4,-16(fp)
 800e934:	100b883a 	mov	r5,r2
 800e938:	800e7880 	call	800e788 <alt_ic_irq_disable>
 800e93c:	e0bff715 	stw	r2,-36(fp)
 800e940:	e0bff917 	ldw	r2,-28(fp)
 800e944:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e948:	e0bffb17 	ldw	r2,-20(fp)
 800e94c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 800e950:	e0bff717 	ldw	r2,-36(fp)
}
 800e954:	e037883a 	mov	sp,fp
 800e958:	dfc00117 	ldw	ra,4(sp)
 800e95c:	df000017 	ldw	fp,0(sp)
 800e960:	dec00204 	addi	sp,sp,8
 800e964:	f800283a 	ret

0800e968 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 800e968:	defff804 	addi	sp,sp,-32
 800e96c:	dfc00715 	stw	ra,28(sp)
 800e970:	df000615 	stw	fp,24(sp)
 800e974:	dc000515 	stw	r16,20(sp)
 800e978:	df000604 	addi	fp,sp,24
 800e97c:	e13ffb15 	stw	r4,-20(fp)
 800e980:	e17ffc15 	stw	r5,-16(fp)
 800e984:	e1bffd15 	stw	r6,-12(fp)
 800e988:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 800e98c:	e13ffc17 	ldw	r4,-16(fp)
 800e990:	e17ffd17 	ldw	r5,-12(fp)
 800e994:	e1bffe17 	ldw	r6,-8(fp)
 800e998:	800ec040 	call	800ec04 <open>
 800e99c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 800e9a0:	e0bffa17 	ldw	r2,-24(fp)
 800e9a4:	10002216 	blt	r2,zero,800ea30 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 800e9a8:	04020074 	movhi	r16,2049
 800e9ac:	84008704 	addi	r16,r16,540
 800e9b0:	e0bffa17 	ldw	r2,-24(fp)
 800e9b4:	1009883a 	mov	r4,r2
 800e9b8:	01400304 	movi	r5,12
 800e9bc:	800a65c0 	call	800a65c <__mulsi3>
 800e9c0:	8085883a 	add	r2,r16,r2
 800e9c4:	10c00017 	ldw	r3,0(r2)
 800e9c8:	e0bffb17 	ldw	r2,-20(fp)
 800e9cc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800e9d0:	04020074 	movhi	r16,2049
 800e9d4:	84008704 	addi	r16,r16,540
 800e9d8:	e0bffa17 	ldw	r2,-24(fp)
 800e9dc:	1009883a 	mov	r4,r2
 800e9e0:	01400304 	movi	r5,12
 800e9e4:	800a65c0 	call	800a65c <__mulsi3>
 800e9e8:	8085883a 	add	r2,r16,r2
 800e9ec:	10800104 	addi	r2,r2,4
 800e9f0:	10c00017 	ldw	r3,0(r2)
 800e9f4:	e0bffb17 	ldw	r2,-20(fp)
 800e9f8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800e9fc:	04020074 	movhi	r16,2049
 800ea00:	84008704 	addi	r16,r16,540
 800ea04:	e0bffa17 	ldw	r2,-24(fp)
 800ea08:	1009883a 	mov	r4,r2
 800ea0c:	01400304 	movi	r5,12
 800ea10:	800a65c0 	call	800a65c <__mulsi3>
 800ea14:	8085883a 	add	r2,r16,r2
 800ea18:	10800204 	addi	r2,r2,8
 800ea1c:	10c00017 	ldw	r3,0(r2)
 800ea20:	e0bffb17 	ldw	r2,-20(fp)
 800ea24:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 800ea28:	e13ffa17 	ldw	r4,-24(fp)
 800ea2c:	800d5f40 	call	800d5f4 <alt_release_fd>
  }
} 
 800ea30:	e6ffff04 	addi	sp,fp,-4
 800ea34:	dfc00217 	ldw	ra,8(sp)
 800ea38:	df000117 	ldw	fp,4(sp)
 800ea3c:	dc000017 	ldw	r16,0(sp)
 800ea40:	dec00304 	addi	sp,sp,12
 800ea44:	f800283a 	ret

0800ea48 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 800ea48:	defffb04 	addi	sp,sp,-20
 800ea4c:	dfc00415 	stw	ra,16(sp)
 800ea50:	df000315 	stw	fp,12(sp)
 800ea54:	df000304 	addi	fp,sp,12
 800ea58:	e13ffd15 	stw	r4,-12(fp)
 800ea5c:	e17ffe15 	stw	r5,-8(fp)
 800ea60:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 800ea64:	01020074 	movhi	r4,2049
 800ea68:	21008a04 	addi	r4,r4,552
 800ea6c:	e17ffd17 	ldw	r5,-12(fp)
 800ea70:	01800044 	movi	r6,1
 800ea74:	01c07fc4 	movi	r7,511
 800ea78:	800e9680 	call	800e968 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 800ea7c:	01020074 	movhi	r4,2049
 800ea80:	21008704 	addi	r4,r4,540
 800ea84:	e17ffe17 	ldw	r5,-8(fp)
 800ea88:	000d883a 	mov	r6,zero
 800ea8c:	01c07fc4 	movi	r7,511
 800ea90:	800e9680 	call	800e968 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 800ea94:	01020074 	movhi	r4,2049
 800ea98:	21008d04 	addi	r4,r4,564
 800ea9c:	e17fff17 	ldw	r5,-4(fp)
 800eaa0:	01800044 	movi	r6,1
 800eaa4:	01c07fc4 	movi	r7,511
 800eaa8:	800e9680 	call	800e968 <alt_open_fd>
}  
 800eaac:	e037883a 	mov	sp,fp
 800eab0:	dfc00117 	ldw	ra,4(sp)
 800eab4:	df000017 	ldw	fp,0(sp)
 800eab8:	dec00204 	addi	sp,sp,8
 800eabc:	f800283a 	ret

0800eac0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800eac0:	defffe04 	addi	sp,sp,-8
 800eac4:	dfc00115 	stw	ra,4(sp)
 800eac8:	df000015 	stw	fp,0(sp)
 800eacc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ead0:	00820074 	movhi	r2,2049
 800ead4:	10850a04 	addi	r2,r2,5160
 800ead8:	10800017 	ldw	r2,0(r2)
 800eadc:	10000526 	beq	r2,zero,800eaf4 <alt_get_errno+0x34>
 800eae0:	00820074 	movhi	r2,2049
 800eae4:	10850a04 	addi	r2,r2,5160
 800eae8:	10800017 	ldw	r2,0(r2)
 800eaec:	103ee83a 	callr	r2
 800eaf0:	00000206 	br	800eafc <alt_get_errno+0x3c>
 800eaf4:	00820074 	movhi	r2,2049
 800eaf8:	108bd004 	addi	r2,r2,12096
}
 800eafc:	e037883a 	mov	sp,fp
 800eb00:	dfc00117 	ldw	ra,4(sp)
 800eb04:	df000017 	ldw	fp,0(sp)
 800eb08:	dec00204 	addi	sp,sp,8
 800eb0c:	f800283a 	ret

0800eb10 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800eb10:	defffb04 	addi	sp,sp,-20
 800eb14:	dfc00415 	stw	ra,16(sp)
 800eb18:	df000315 	stw	fp,12(sp)
 800eb1c:	dc000215 	stw	r16,8(sp)
 800eb20:	df000304 	addi	fp,sp,12
 800eb24:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800eb28:	e0bffe17 	ldw	r2,-8(fp)
 800eb2c:	10800217 	ldw	r2,8(r2)
 800eb30:	10d00034 	orhi	r3,r2,16384
 800eb34:	e0bffe17 	ldw	r2,-8(fp)
 800eb38:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800eb3c:	e03ffd15 	stw	zero,-12(fp)
 800eb40:	00002306 	br	800ebd0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800eb44:	04020074 	movhi	r16,2049
 800eb48:	84008704 	addi	r16,r16,540
 800eb4c:	e0bffd17 	ldw	r2,-12(fp)
 800eb50:	1009883a 	mov	r4,r2
 800eb54:	01400304 	movi	r5,12
 800eb58:	800a65c0 	call	800a65c <__mulsi3>
 800eb5c:	8085883a 	add	r2,r16,r2
 800eb60:	10c00017 	ldw	r3,0(r2)
 800eb64:	e0bffe17 	ldw	r2,-8(fp)
 800eb68:	10800017 	ldw	r2,0(r2)
 800eb6c:	1880151e 	bne	r3,r2,800ebc4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800eb70:	04020074 	movhi	r16,2049
 800eb74:	84008704 	addi	r16,r16,540
 800eb78:	e0bffd17 	ldw	r2,-12(fp)
 800eb7c:	1009883a 	mov	r4,r2
 800eb80:	01400304 	movi	r5,12
 800eb84:	800a65c0 	call	800a65c <__mulsi3>
 800eb88:	8085883a 	add	r2,r16,r2
 800eb8c:	10800204 	addi	r2,r2,8
 800eb90:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800eb94:	10000b0e 	bge	r2,zero,800ebc4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800eb98:	e13ffd17 	ldw	r4,-12(fp)
 800eb9c:	01400304 	movi	r5,12
 800eba0:	800a65c0 	call	800a65c <__mulsi3>
 800eba4:	1007883a 	mov	r3,r2
 800eba8:	00820074 	movhi	r2,2049
 800ebac:	10808704 	addi	r2,r2,540
 800ebb0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800ebb4:	e0bffe17 	ldw	r2,-8(fp)
 800ebb8:	18800226 	beq	r3,r2,800ebc4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800ebbc:	00bffcc4 	movi	r2,-13
 800ebc0:	00000a06 	br	800ebec <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800ebc4:	e0bffd17 	ldw	r2,-12(fp)
 800ebc8:	10800044 	addi	r2,r2,1
 800ebcc:	e0bffd15 	stw	r2,-12(fp)
 800ebd0:	00820074 	movhi	r2,2049
 800ebd4:	10850904 	addi	r2,r2,5156
 800ebd8:	10800017 	ldw	r2,0(r2)
 800ebdc:	1007883a 	mov	r3,r2
 800ebe0:	e0bffd17 	ldw	r2,-12(fp)
 800ebe4:	18bfd72e 	bgeu	r3,r2,800eb44 <__alt_data_end+0xfc00eb44>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800ebe8:	0005883a 	mov	r2,zero
}
 800ebec:	e6ffff04 	addi	sp,fp,-4
 800ebf0:	dfc00217 	ldw	ra,8(sp)
 800ebf4:	df000117 	ldw	fp,4(sp)
 800ebf8:	dc000017 	ldw	r16,0(sp)
 800ebfc:	dec00304 	addi	sp,sp,12
 800ec00:	f800283a 	ret

0800ec04 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800ec04:	defff604 	addi	sp,sp,-40
 800ec08:	dfc00915 	stw	ra,36(sp)
 800ec0c:	df000815 	stw	fp,32(sp)
 800ec10:	df000804 	addi	fp,sp,32
 800ec14:	e13ffd15 	stw	r4,-12(fp)
 800ec18:	e17ffe15 	stw	r5,-8(fp)
 800ec1c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800ec20:	00bfffc4 	movi	r2,-1
 800ec24:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 800ec28:	00bffb44 	movi	r2,-19
 800ec2c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800ec30:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800ec34:	e13ffd17 	ldw	r4,-12(fp)
 800ec38:	01420074 	movhi	r5,2049
 800ec3c:	29450704 	addi	r5,r5,5148
 800ec40:	800ef200 	call	800ef20 <alt_find_dev>
 800ec44:	e0bff815 	stw	r2,-32(fp)
 800ec48:	e0bff817 	ldw	r2,-32(fp)
 800ec4c:	1000051e 	bne	r2,zero,800ec64 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800ec50:	e13ffd17 	ldw	r4,-12(fp)
 800ec54:	800efb00 	call	800efb0 <alt_find_file>
 800ec58:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 800ec5c:	00800044 	movi	r2,1
 800ec60:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800ec64:	e0bff817 	ldw	r2,-32(fp)
 800ec68:	10002b26 	beq	r2,zero,800ed18 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800ec6c:	e13ff817 	ldw	r4,-32(fp)
 800ec70:	800f0c40 	call	800f0c4 <alt_get_fd>
 800ec74:	e0bff915 	stw	r2,-28(fp)
 800ec78:	e0bff917 	ldw	r2,-28(fp)
 800ec7c:	1000030e 	bge	r2,zero,800ec8c <open+0x88>
    {
      status = index;
 800ec80:	e0bff917 	ldw	r2,-28(fp)
 800ec84:	e0bffa15 	stw	r2,-24(fp)
 800ec88:	00002506 	br	800ed20 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 800ec8c:	e13ff917 	ldw	r4,-28(fp)
 800ec90:	01400304 	movi	r5,12
 800ec94:	800a65c0 	call	800a65c <__mulsi3>
 800ec98:	1007883a 	mov	r3,r2
 800ec9c:	00820074 	movhi	r2,2049
 800eca0:	10808704 	addi	r2,r2,540
 800eca4:	1885883a 	add	r2,r3,r2
 800eca8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800ecac:	e0fffe17 	ldw	r3,-8(fp)
 800ecb0:	00900034 	movhi	r2,16384
 800ecb4:	10bfffc4 	addi	r2,r2,-1
 800ecb8:	1886703a 	and	r3,r3,r2
 800ecbc:	e0bffc17 	ldw	r2,-16(fp)
 800ecc0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800ecc4:	e0bffb17 	ldw	r2,-20(fp)
 800ecc8:	1000051e 	bne	r2,zero,800ece0 <open+0xdc>
 800eccc:	e13ffc17 	ldw	r4,-16(fp)
 800ecd0:	800eb100 	call	800eb10 <alt_file_locked>
 800ecd4:	e0bffa15 	stw	r2,-24(fp)
 800ecd8:	e0bffa17 	ldw	r2,-24(fp)
 800ecdc:	10001016 	blt	r2,zero,800ed20 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800ece0:	e0bff817 	ldw	r2,-32(fp)
 800ece4:	10800317 	ldw	r2,12(r2)
 800ece8:	10000826 	beq	r2,zero,800ed0c <open+0x108>
 800ecec:	e0bff817 	ldw	r2,-32(fp)
 800ecf0:	10800317 	ldw	r2,12(r2)
 800ecf4:	e13ffc17 	ldw	r4,-16(fp)
 800ecf8:	e17ffd17 	ldw	r5,-12(fp)
 800ecfc:	e1bffe17 	ldw	r6,-8(fp)
 800ed00:	e1ffff17 	ldw	r7,-4(fp)
 800ed04:	103ee83a 	callr	r2
 800ed08:	00000106 	br	800ed10 <open+0x10c>
 800ed0c:	0005883a 	mov	r2,zero
 800ed10:	e0bffa15 	stw	r2,-24(fp)
 800ed14:	00000206 	br	800ed20 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800ed18:	00bffb44 	movi	r2,-19
 800ed1c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800ed20:	e0bffa17 	ldw	r2,-24(fp)
 800ed24:	1000090e 	bge	r2,zero,800ed4c <open+0x148>
  {
    alt_release_fd (index);  
 800ed28:	e13ff917 	ldw	r4,-28(fp)
 800ed2c:	800d5f40 	call	800d5f4 <alt_release_fd>
    ALT_ERRNO = -status;
 800ed30:	800eac00 	call	800eac0 <alt_get_errno>
 800ed34:	1007883a 	mov	r3,r2
 800ed38:	e0bffa17 	ldw	r2,-24(fp)
 800ed3c:	0085c83a 	sub	r2,zero,r2
 800ed40:	18800015 	stw	r2,0(r3)
    return -1;
 800ed44:	00bfffc4 	movi	r2,-1
 800ed48:	00000106 	br	800ed50 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 800ed4c:	e0bff917 	ldw	r2,-28(fp)
}
 800ed50:	e037883a 	mov	sp,fp
 800ed54:	dfc00117 	ldw	ra,4(sp)
 800ed58:	df000017 	ldw	fp,0(sp)
 800ed5c:	dec00204 	addi	sp,sp,8
 800ed60:	f800283a 	ret

0800ed64 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800ed64:	defffa04 	addi	sp,sp,-24
 800ed68:	df000515 	stw	fp,20(sp)
 800ed6c:	df000504 	addi	fp,sp,20
 800ed70:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ed74:	0005303a 	rdctl	r2,status
 800ed78:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ed7c:	e0fffc17 	ldw	r3,-16(fp)
 800ed80:	00bfff84 	movi	r2,-2
 800ed84:	1884703a 	and	r2,r3,r2
 800ed88:	1001703a 	wrctl	status,r2
  
  return context;
 800ed8c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 800ed90:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 800ed94:	e0bfff17 	ldw	r2,-4(fp)
 800ed98:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800ed9c:	e0bffd17 	ldw	r2,-12(fp)
 800eda0:	10800017 	ldw	r2,0(r2)
 800eda4:	e0fffd17 	ldw	r3,-12(fp)
 800eda8:	18c00117 	ldw	r3,4(r3)
 800edac:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 800edb0:	e0bffd17 	ldw	r2,-12(fp)
 800edb4:	10800117 	ldw	r2,4(r2)
 800edb8:	e0fffd17 	ldw	r3,-12(fp)
 800edbc:	18c00017 	ldw	r3,0(r3)
 800edc0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800edc4:	e0bffd17 	ldw	r2,-12(fp)
 800edc8:	e0fffd17 	ldw	r3,-12(fp)
 800edcc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 800edd0:	e0bffd17 	ldw	r2,-12(fp)
 800edd4:	e0fffd17 	ldw	r3,-12(fp)
 800edd8:	10c00015 	stw	r3,0(r2)
 800eddc:	e0bffb17 	ldw	r2,-20(fp)
 800ede0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ede4:	e0bffe17 	ldw	r2,-8(fp)
 800ede8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800edec:	e037883a 	mov	sp,fp
 800edf0:	df000017 	ldw	fp,0(sp)
 800edf4:	dec00104 	addi	sp,sp,4
 800edf8:	f800283a 	ret

0800edfc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 800edfc:	defffb04 	addi	sp,sp,-20
 800ee00:	dfc00415 	stw	ra,16(sp)
 800ee04:	df000315 	stw	fp,12(sp)
 800ee08:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 800ee0c:	d0a00e17 	ldw	r2,-32712(gp)
 800ee10:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 800ee14:	d0a6d717 	ldw	r2,-25764(gp)
 800ee18:	10800044 	addi	r2,r2,1
 800ee1c:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800ee20:	00002e06 	br	800eedc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 800ee24:	e0bffd17 	ldw	r2,-12(fp)
 800ee28:	10800017 	ldw	r2,0(r2)
 800ee2c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800ee30:	e0bffd17 	ldw	r2,-12(fp)
 800ee34:	10800403 	ldbu	r2,16(r2)
 800ee38:	10803fcc 	andi	r2,r2,255
 800ee3c:	10000426 	beq	r2,zero,800ee50 <alt_tick+0x54>
 800ee40:	d0a6d717 	ldw	r2,-25764(gp)
 800ee44:	1000021e 	bne	r2,zero,800ee50 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 800ee48:	e0bffd17 	ldw	r2,-12(fp)
 800ee4c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800ee50:	e0bffd17 	ldw	r2,-12(fp)
 800ee54:	10800217 	ldw	r2,8(r2)
 800ee58:	d0e6d717 	ldw	r3,-25764(gp)
 800ee5c:	18801d36 	bltu	r3,r2,800eed4 <alt_tick+0xd8>
 800ee60:	e0bffd17 	ldw	r2,-12(fp)
 800ee64:	10800403 	ldbu	r2,16(r2)
 800ee68:	10803fcc 	andi	r2,r2,255
 800ee6c:	1000191e 	bne	r2,zero,800eed4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 800ee70:	e0bffd17 	ldw	r2,-12(fp)
 800ee74:	10800317 	ldw	r2,12(r2)
 800ee78:	e0fffd17 	ldw	r3,-12(fp)
 800ee7c:	18c00517 	ldw	r3,20(r3)
 800ee80:	1809883a 	mov	r4,r3
 800ee84:	103ee83a 	callr	r2
 800ee88:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 800ee8c:	e0bfff17 	ldw	r2,-4(fp)
 800ee90:	1000031e 	bne	r2,zero,800eea0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 800ee94:	e13ffd17 	ldw	r4,-12(fp)
 800ee98:	800ed640 	call	800ed64 <alt_alarm_stop>
 800ee9c:	00000d06 	br	800eed4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 800eea0:	e0bffd17 	ldw	r2,-12(fp)
 800eea4:	10c00217 	ldw	r3,8(r2)
 800eea8:	e0bfff17 	ldw	r2,-4(fp)
 800eeac:	1887883a 	add	r3,r3,r2
 800eeb0:	e0bffd17 	ldw	r2,-12(fp)
 800eeb4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800eeb8:	e0bffd17 	ldw	r2,-12(fp)
 800eebc:	10c00217 	ldw	r3,8(r2)
 800eec0:	d0a6d717 	ldw	r2,-25764(gp)
 800eec4:	1880032e 	bgeu	r3,r2,800eed4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800eec8:	e0bffd17 	ldw	r2,-12(fp)
 800eecc:	00c00044 	movi	r3,1
 800eed0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 800eed4:	e0bffe17 	ldw	r2,-8(fp)
 800eed8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800eedc:	e0fffd17 	ldw	r3,-12(fp)
 800eee0:	d0a00e04 	addi	r2,gp,-32712
 800eee4:	18bfcf1e 	bne	r3,r2,800ee24 <__alt_data_end+0xfc00ee24>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 800eee8:	0001883a 	nop
}
 800eeec:	e037883a 	mov	sp,fp
 800eef0:	dfc00117 	ldw	ra,4(sp)
 800eef4:	df000017 	ldw	fp,0(sp)
 800eef8:	dec00204 	addi	sp,sp,8
 800eefc:	f800283a 	ret

0800ef00 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 800ef00:	deffff04 	addi	sp,sp,-4
 800ef04:	df000015 	stw	fp,0(sp)
 800ef08:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800ef0c:	000170fa 	wrctl	ienable,zero
}
 800ef10:	e037883a 	mov	sp,fp
 800ef14:	df000017 	ldw	fp,0(sp)
 800ef18:	dec00104 	addi	sp,sp,4
 800ef1c:	f800283a 	ret

0800ef20 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800ef20:	defffa04 	addi	sp,sp,-24
 800ef24:	dfc00515 	stw	ra,20(sp)
 800ef28:	df000415 	stw	fp,16(sp)
 800ef2c:	df000404 	addi	fp,sp,16
 800ef30:	e13ffe15 	stw	r4,-8(fp)
 800ef34:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800ef38:	e0bfff17 	ldw	r2,-4(fp)
 800ef3c:	10800017 	ldw	r2,0(r2)
 800ef40:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800ef44:	e13ffe17 	ldw	r4,-8(fp)
 800ef48:	80006500 	call	8000650 <strlen>
 800ef4c:	10800044 	addi	r2,r2,1
 800ef50:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800ef54:	00000d06 	br	800ef8c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800ef58:	e0bffc17 	ldw	r2,-16(fp)
 800ef5c:	10c00217 	ldw	r3,8(r2)
 800ef60:	e0bffd17 	ldw	r2,-12(fp)
 800ef64:	1809883a 	mov	r4,r3
 800ef68:	e17ffe17 	ldw	r5,-8(fp)
 800ef6c:	100d883a 	mov	r6,r2
 800ef70:	800f2800 	call	800f280 <memcmp>
 800ef74:	1000021e 	bne	r2,zero,800ef80 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800ef78:	e0bffc17 	ldw	r2,-16(fp)
 800ef7c:	00000706 	br	800ef9c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800ef80:	e0bffc17 	ldw	r2,-16(fp)
 800ef84:	10800017 	ldw	r2,0(r2)
 800ef88:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800ef8c:	e0fffc17 	ldw	r3,-16(fp)
 800ef90:	e0bfff17 	ldw	r2,-4(fp)
 800ef94:	18bff01e 	bne	r3,r2,800ef58 <__alt_data_end+0xfc00ef58>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 800ef98:	0005883a 	mov	r2,zero
}
 800ef9c:	e037883a 	mov	sp,fp
 800efa0:	dfc00117 	ldw	ra,4(sp)
 800efa4:	df000017 	ldw	fp,0(sp)
 800efa8:	dec00204 	addi	sp,sp,8
 800efac:	f800283a 	ret

0800efb0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800efb0:	defffb04 	addi	sp,sp,-20
 800efb4:	dfc00415 	stw	ra,16(sp)
 800efb8:	df000315 	stw	fp,12(sp)
 800efbc:	df000304 	addi	fp,sp,12
 800efc0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 800efc4:	00820074 	movhi	r2,2049
 800efc8:	10850504 	addi	r2,r2,5140
 800efcc:	10800017 	ldw	r2,0(r2)
 800efd0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800efd4:	00003106 	br	800f09c <alt_find_file+0xec>
  {
    len = strlen(next->name);
 800efd8:	e0bffd17 	ldw	r2,-12(fp)
 800efdc:	10800217 	ldw	r2,8(r2)
 800efe0:	1009883a 	mov	r4,r2
 800efe4:	80006500 	call	8000650 <strlen>
 800efe8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 800efec:	e0bffd17 	ldw	r2,-12(fp)
 800eff0:	10c00217 	ldw	r3,8(r2)
 800eff4:	e0bffe17 	ldw	r2,-8(fp)
 800eff8:	10bfffc4 	addi	r2,r2,-1
 800effc:	1885883a 	add	r2,r3,r2
 800f000:	10800003 	ldbu	r2,0(r2)
 800f004:	10803fcc 	andi	r2,r2,255
 800f008:	1080201c 	xori	r2,r2,128
 800f00c:	10bfe004 	addi	r2,r2,-128
 800f010:	10800bd8 	cmpnei	r2,r2,47
 800f014:	1000031e 	bne	r2,zero,800f024 <alt_find_file+0x74>
    {
      len -= 1;
 800f018:	e0bffe17 	ldw	r2,-8(fp)
 800f01c:	10bfffc4 	addi	r2,r2,-1
 800f020:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800f024:	e0bffe17 	ldw	r2,-8(fp)
 800f028:	e0ffff17 	ldw	r3,-4(fp)
 800f02c:	1885883a 	add	r2,r3,r2
 800f030:	10800003 	ldbu	r2,0(r2)
 800f034:	10803fcc 	andi	r2,r2,255
 800f038:	1080201c 	xori	r2,r2,128
 800f03c:	10bfe004 	addi	r2,r2,-128
 800f040:	10800be0 	cmpeqi	r2,r2,47
 800f044:	1000081e 	bne	r2,zero,800f068 <alt_find_file+0xb8>
 800f048:	e0bffe17 	ldw	r2,-8(fp)
 800f04c:	e0ffff17 	ldw	r3,-4(fp)
 800f050:	1885883a 	add	r2,r3,r2
 800f054:	10800003 	ldbu	r2,0(r2)
 800f058:	10803fcc 	andi	r2,r2,255
 800f05c:	1080201c 	xori	r2,r2,128
 800f060:	10bfe004 	addi	r2,r2,-128
 800f064:	10000a1e 	bne	r2,zero,800f090 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 800f068:	e0bffd17 	ldw	r2,-12(fp)
 800f06c:	10c00217 	ldw	r3,8(r2)
 800f070:	e0bffe17 	ldw	r2,-8(fp)
 800f074:	1809883a 	mov	r4,r3
 800f078:	e17fff17 	ldw	r5,-4(fp)
 800f07c:	100d883a 	mov	r6,r2
 800f080:	800f2800 	call	800f280 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800f084:	1000021e 	bne	r2,zero,800f090 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 800f088:	e0bffd17 	ldw	r2,-12(fp)
 800f08c:	00000806 	br	800f0b0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 800f090:	e0bffd17 	ldw	r2,-12(fp)
 800f094:	10800017 	ldw	r2,0(r2)
 800f098:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800f09c:	e0fffd17 	ldw	r3,-12(fp)
 800f0a0:	00820074 	movhi	r2,2049
 800f0a4:	10850504 	addi	r2,r2,5140
 800f0a8:	18bfcb1e 	bne	r3,r2,800efd8 <__alt_data_end+0xfc00efd8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 800f0ac:	0005883a 	mov	r2,zero
}
 800f0b0:	e037883a 	mov	sp,fp
 800f0b4:	dfc00117 	ldw	ra,4(sp)
 800f0b8:	df000017 	ldw	fp,0(sp)
 800f0bc:	dec00204 	addi	sp,sp,8
 800f0c0:	f800283a 	ret

0800f0c4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 800f0c4:	defffa04 	addi	sp,sp,-24
 800f0c8:	dfc00515 	stw	ra,20(sp)
 800f0cc:	df000415 	stw	fp,16(sp)
 800f0d0:	dc000315 	stw	r16,12(sp)
 800f0d4:	df000404 	addi	fp,sp,16
 800f0d8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 800f0dc:	00bffa04 	movi	r2,-24
 800f0e0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800f0e4:	e03ffc15 	stw	zero,-16(fp)
 800f0e8:	00002106 	br	800f170 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 800f0ec:	04020074 	movhi	r16,2049
 800f0f0:	84008704 	addi	r16,r16,540
 800f0f4:	e0bffc17 	ldw	r2,-16(fp)
 800f0f8:	1009883a 	mov	r4,r2
 800f0fc:	01400304 	movi	r5,12
 800f100:	800a65c0 	call	800a65c <__mulsi3>
 800f104:	8085883a 	add	r2,r16,r2
 800f108:	10800017 	ldw	r2,0(r2)
 800f10c:	1000151e 	bne	r2,zero,800f164 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 800f110:	04020074 	movhi	r16,2049
 800f114:	84008704 	addi	r16,r16,540
 800f118:	e0bffc17 	ldw	r2,-16(fp)
 800f11c:	1009883a 	mov	r4,r2
 800f120:	01400304 	movi	r5,12
 800f124:	800a65c0 	call	800a65c <__mulsi3>
 800f128:	8085883a 	add	r2,r16,r2
 800f12c:	e0fffe17 	ldw	r3,-8(fp)
 800f130:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 800f134:	00820074 	movhi	r2,2049
 800f138:	10850904 	addi	r2,r2,5156
 800f13c:	10c00017 	ldw	r3,0(r2)
 800f140:	e0bffc17 	ldw	r2,-16(fp)
 800f144:	1880040e 	bge	r3,r2,800f158 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 800f148:	00820074 	movhi	r2,2049
 800f14c:	10850904 	addi	r2,r2,5156
 800f150:	e0fffc17 	ldw	r3,-16(fp)
 800f154:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 800f158:	e0bffc17 	ldw	r2,-16(fp)
 800f15c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 800f160:	00000606 	br	800f17c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800f164:	e0bffc17 	ldw	r2,-16(fp)
 800f168:	10800044 	addi	r2,r2,1
 800f16c:	e0bffc15 	stw	r2,-16(fp)
 800f170:	e0bffc17 	ldw	r2,-16(fp)
 800f174:	10800810 	cmplti	r2,r2,32
 800f178:	103fdc1e 	bne	r2,zero,800f0ec <__alt_data_end+0xfc00f0ec>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 800f17c:	e0bffd17 	ldw	r2,-12(fp)
}
 800f180:	e6ffff04 	addi	sp,fp,-4
 800f184:	dfc00217 	ldw	ra,8(sp)
 800f188:	df000117 	ldw	fp,4(sp)
 800f18c:	dc000017 	ldw	r16,0(sp)
 800f190:	dec00304 	addi	sp,sp,12
 800f194:	f800283a 	ret

0800f198 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 800f198:	defffe04 	addi	sp,sp,-8
 800f19c:	df000115 	stw	fp,4(sp)
 800f1a0:	df000104 	addi	fp,sp,4
 800f1a4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 800f1a8:	e0bfff17 	ldw	r2,-4(fp)
 800f1ac:	10bffe84 	addi	r2,r2,-6
 800f1b0:	10c00428 	cmpgeui	r3,r2,16
 800f1b4:	18001a1e 	bne	r3,zero,800f220 <alt_exception_cause_generated_bad_addr+0x88>
 800f1b8:	100690ba 	slli	r3,r2,2
 800f1bc:	00820074 	movhi	r2,2049
 800f1c0:	10bc7404 	addi	r2,r2,-3632
 800f1c4:	1885883a 	add	r2,r3,r2
 800f1c8:	10800017 	ldw	r2,0(r2)
 800f1cc:	1000683a 	jmp	r2
 800f1d0:	0800f210 	cmplti	zero,at,968
 800f1d4:	0800f210 	cmplti	zero,at,968
 800f1d8:	0800f220 	cmpeqi	zero,at,968
 800f1dc:	0800f220 	cmpeqi	zero,at,968
 800f1e0:	0800f220 	cmpeqi	zero,at,968
 800f1e4:	0800f210 	cmplti	zero,at,968
 800f1e8:	0800f218 	cmpnei	zero,at,968
 800f1ec:	0800f220 	cmpeqi	zero,at,968
 800f1f0:	0800f210 	cmplti	zero,at,968
 800f1f4:	0800f210 	cmplti	zero,at,968
 800f1f8:	0800f220 	cmpeqi	zero,at,968
 800f1fc:	0800f210 	cmplti	zero,at,968
 800f200:	0800f218 	cmpnei	zero,at,968
 800f204:	0800f220 	cmpeqi	zero,at,968
 800f208:	0800f220 	cmpeqi	zero,at,968
 800f20c:	0800f210 	cmplti	zero,at,968
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 800f210:	00800044 	movi	r2,1
 800f214:	00000306 	br	800f224 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 800f218:	0005883a 	mov	r2,zero
 800f21c:	00000106 	br	800f224 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 800f220:	0005883a 	mov	r2,zero
  }
}
 800f224:	e037883a 	mov	sp,fp
 800f228:	df000017 	ldw	fp,0(sp)
 800f22c:	dec00104 	addi	sp,sp,4
 800f230:	f800283a 	ret

0800f234 <atexit>:
 800f234:	200b883a 	mov	r5,r4
 800f238:	000d883a 	mov	r6,zero
 800f23c:	0009883a 	mov	r4,zero
 800f240:	000f883a 	mov	r7,zero
 800f244:	800f2fc1 	jmpi	800f2fc <__register_exitproc>

0800f248 <exit>:
 800f248:	defffe04 	addi	sp,sp,-8
 800f24c:	000b883a 	mov	r5,zero
 800f250:	dc000015 	stw	r16,0(sp)
 800f254:	dfc00115 	stw	ra,4(sp)
 800f258:	2021883a 	mov	r16,r4
 800f25c:	800f4100 	call	800f410 <__call_exitprocs>
 800f260:	00820074 	movhi	r2,2049
 800f264:	1084ff04 	addi	r2,r2,5116
 800f268:	11000017 	ldw	r4,0(r2)
 800f26c:	20800f17 	ldw	r2,60(r4)
 800f270:	10000126 	beq	r2,zero,800f278 <exit+0x30>
 800f274:	103ee83a 	callr	r2
 800f278:	8009883a 	mov	r4,r16
 800f27c:	800f5a40 	call	800f5a4 <_exit>

0800f280 <memcmp>:
 800f280:	01c000c4 	movi	r7,3
 800f284:	3980192e 	bgeu	r7,r6,800f2ec <memcmp+0x6c>
 800f288:	2144b03a 	or	r2,r4,r5
 800f28c:	11c4703a 	and	r2,r2,r7
 800f290:	10000f26 	beq	r2,zero,800f2d0 <memcmp+0x50>
 800f294:	20800003 	ldbu	r2,0(r4)
 800f298:	28c00003 	ldbu	r3,0(r5)
 800f29c:	10c0151e 	bne	r2,r3,800f2f4 <memcmp+0x74>
 800f2a0:	31bfff84 	addi	r6,r6,-2
 800f2a4:	01ffffc4 	movi	r7,-1
 800f2a8:	00000406 	br	800f2bc <memcmp+0x3c>
 800f2ac:	20800003 	ldbu	r2,0(r4)
 800f2b0:	28c00003 	ldbu	r3,0(r5)
 800f2b4:	31bfffc4 	addi	r6,r6,-1
 800f2b8:	10c00e1e 	bne	r2,r3,800f2f4 <memcmp+0x74>
 800f2bc:	21000044 	addi	r4,r4,1
 800f2c0:	29400044 	addi	r5,r5,1
 800f2c4:	31fff91e 	bne	r6,r7,800f2ac <__alt_data_end+0xfc00f2ac>
 800f2c8:	0005883a 	mov	r2,zero
 800f2cc:	f800283a 	ret
 800f2d0:	20c00017 	ldw	r3,0(r4)
 800f2d4:	28800017 	ldw	r2,0(r5)
 800f2d8:	1880041e 	bne	r3,r2,800f2ec <memcmp+0x6c>
 800f2dc:	31bfff04 	addi	r6,r6,-4
 800f2e0:	21000104 	addi	r4,r4,4
 800f2e4:	29400104 	addi	r5,r5,4
 800f2e8:	39bff936 	bltu	r7,r6,800f2d0 <__alt_data_end+0xfc00f2d0>
 800f2ec:	303fe91e 	bne	r6,zero,800f294 <__alt_data_end+0xfc00f294>
 800f2f0:	003ff506 	br	800f2c8 <__alt_data_end+0xfc00f2c8>
 800f2f4:	10c5c83a 	sub	r2,r2,r3
 800f2f8:	f800283a 	ret

0800f2fc <__register_exitproc>:
 800f2fc:	00820074 	movhi	r2,2049
 800f300:	defffa04 	addi	sp,sp,-24
 800f304:	1084ff04 	addi	r2,r2,5116
 800f308:	dc000315 	stw	r16,12(sp)
 800f30c:	14000017 	ldw	r16,0(r2)
 800f310:	dc400415 	stw	r17,16(sp)
 800f314:	dfc00515 	stw	ra,20(sp)
 800f318:	80805217 	ldw	r2,328(r16)
 800f31c:	2023883a 	mov	r17,r4
 800f320:	10003626 	beq	r2,zero,800f3fc <__register_exitproc+0x100>
 800f324:	10c00117 	ldw	r3,4(r2)
 800f328:	010007c4 	movi	r4,31
 800f32c:	20c00e16 	blt	r4,r3,800f368 <__register_exitproc+0x6c>
 800f330:	1a400044 	addi	r9,r3,1
 800f334:	8800211e 	bne	r17,zero,800f3bc <__register_exitproc+0xc0>
 800f338:	18c00084 	addi	r3,r3,2
 800f33c:	18c7883a 	add	r3,r3,r3
 800f340:	18c7883a 	add	r3,r3,r3
 800f344:	12400115 	stw	r9,4(r2)
 800f348:	10c7883a 	add	r3,r2,r3
 800f34c:	19400015 	stw	r5,0(r3)
 800f350:	0005883a 	mov	r2,zero
 800f354:	dfc00517 	ldw	ra,20(sp)
 800f358:	dc400417 	ldw	r17,16(sp)
 800f35c:	dc000317 	ldw	r16,12(sp)
 800f360:	dec00604 	addi	sp,sp,24
 800f364:	f800283a 	ret
 800f368:	00800034 	movhi	r2,0
 800f36c:	10800004 	addi	r2,r2,0
 800f370:	10002526 	beq	r2,zero,800f408 <__register_exitproc+0x10c>
 800f374:	01006404 	movi	r4,400
 800f378:	d9400015 	stw	r5,0(sp)
 800f37c:	d9800115 	stw	r6,4(sp)
 800f380:	d9c00215 	stw	r7,8(sp)
 800f384:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 800f388:	d9400017 	ldw	r5,0(sp)
 800f38c:	d9800117 	ldw	r6,4(sp)
 800f390:	d9c00217 	ldw	r7,8(sp)
 800f394:	10001c26 	beq	r2,zero,800f408 <__register_exitproc+0x10c>
 800f398:	80c05217 	ldw	r3,328(r16)
 800f39c:	10000115 	stw	zero,4(r2)
 800f3a0:	02400044 	movi	r9,1
 800f3a4:	10c00015 	stw	r3,0(r2)
 800f3a8:	80805215 	stw	r2,328(r16)
 800f3ac:	10006215 	stw	zero,392(r2)
 800f3b0:	10006315 	stw	zero,396(r2)
 800f3b4:	0007883a 	mov	r3,zero
 800f3b8:	883fdf26 	beq	r17,zero,800f338 <__alt_data_end+0xfc00f338>
 800f3bc:	18d1883a 	add	r8,r3,r3
 800f3c0:	4211883a 	add	r8,r8,r8
 800f3c4:	1211883a 	add	r8,r2,r8
 800f3c8:	41802215 	stw	r6,136(r8)
 800f3cc:	01000044 	movi	r4,1
 800f3d0:	11806217 	ldw	r6,392(r2)
 800f3d4:	20c8983a 	sll	r4,r4,r3
 800f3d8:	310cb03a 	or	r6,r6,r4
 800f3dc:	11806215 	stw	r6,392(r2)
 800f3e0:	41c04215 	stw	r7,264(r8)
 800f3e4:	01800084 	movi	r6,2
 800f3e8:	89bfd31e 	bne	r17,r6,800f338 <__alt_data_end+0xfc00f338>
 800f3ec:	11806317 	ldw	r6,396(r2)
 800f3f0:	3108b03a 	or	r4,r6,r4
 800f3f4:	11006315 	stw	r4,396(r2)
 800f3f8:	003fcf06 	br	800f338 <__alt_data_end+0xfc00f338>
 800f3fc:	80805304 	addi	r2,r16,332
 800f400:	80805215 	stw	r2,328(r16)
 800f404:	003fc706 	br	800f324 <__alt_data_end+0xfc00f324>
 800f408:	00bfffc4 	movi	r2,-1
 800f40c:	003fd106 	br	800f354 <__alt_data_end+0xfc00f354>

0800f410 <__call_exitprocs>:
 800f410:	00820074 	movhi	r2,2049
 800f414:	1084ff04 	addi	r2,r2,5116
 800f418:	10800017 	ldw	r2,0(r2)
 800f41c:	defff404 	addi	sp,sp,-48
 800f420:	dd800815 	stw	r22,32(sp)
 800f424:	d8800015 	stw	r2,0(sp)
 800f428:	10805204 	addi	r2,r2,328
 800f42c:	dd000615 	stw	r20,24(sp)
 800f430:	dc800415 	stw	r18,16(sp)
 800f434:	dfc00b15 	stw	ra,44(sp)
 800f438:	df000a15 	stw	fp,40(sp)
 800f43c:	ddc00915 	stw	r23,36(sp)
 800f440:	dd400715 	stw	r21,28(sp)
 800f444:	dcc00515 	stw	r19,20(sp)
 800f448:	dc400315 	stw	r17,12(sp)
 800f44c:	dc000215 	stw	r16,8(sp)
 800f450:	2025883a 	mov	r18,r4
 800f454:	2829883a 	mov	r20,r5
 800f458:	d8800115 	stw	r2,4(sp)
 800f45c:	05bfffc4 	movi	r22,-1
 800f460:	d8800017 	ldw	r2,0(sp)
 800f464:	14c05217 	ldw	r19,328(r2)
 800f468:	98001d26 	beq	r19,zero,800f4e0 <__call_exitprocs+0xd0>
 800f46c:	dd400117 	ldw	r21,4(sp)
 800f470:	98800117 	ldw	r2,4(r19)
 800f474:	173fffc4 	addi	fp,r2,-1
 800f478:	e0000d16 	blt	fp,zero,800f4b0 <__call_exitprocs+0xa0>
 800f47c:	14000044 	addi	r16,r2,1
 800f480:	8421883a 	add	r16,r16,r16
 800f484:	8421883a 	add	r16,r16,r16
 800f488:	84402004 	addi	r17,r16,128
 800f48c:	9c63883a 	add	r17,r19,r17
 800f490:	9c21883a 	add	r16,r19,r16
 800f494:	a0001e26 	beq	r20,zero,800f510 <__call_exitprocs+0x100>
 800f498:	80804017 	ldw	r2,256(r16)
 800f49c:	15001c26 	beq	r2,r20,800f510 <__call_exitprocs+0x100>
 800f4a0:	e73fffc4 	addi	fp,fp,-1
 800f4a4:	843fff04 	addi	r16,r16,-4
 800f4a8:	8c7fff04 	addi	r17,r17,-4
 800f4ac:	e5bff91e 	bne	fp,r22,800f494 <__alt_data_end+0xfc00f494>
 800f4b0:	00800034 	movhi	r2,0
 800f4b4:	10800004 	addi	r2,r2,0
 800f4b8:	10000926 	beq	r2,zero,800f4e0 <__call_exitprocs+0xd0>
 800f4bc:	98800117 	ldw	r2,4(r19)
 800f4c0:	1000311e 	bne	r2,zero,800f588 <__call_exitprocs+0x178>
 800f4c4:	98800017 	ldw	r2,0(r19)
 800f4c8:	10003426 	beq	r2,zero,800f59c <__call_exitprocs+0x18c>
 800f4cc:	9809883a 	mov	r4,r19
 800f4d0:	a8800015 	stw	r2,0(r21)
 800f4d4:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 800f4d8:	acc00017 	ldw	r19,0(r21)
 800f4dc:	983fe41e 	bne	r19,zero,800f470 <__alt_data_end+0xfc00f470>
 800f4e0:	dfc00b17 	ldw	ra,44(sp)
 800f4e4:	df000a17 	ldw	fp,40(sp)
 800f4e8:	ddc00917 	ldw	r23,36(sp)
 800f4ec:	dd800817 	ldw	r22,32(sp)
 800f4f0:	dd400717 	ldw	r21,28(sp)
 800f4f4:	dd000617 	ldw	r20,24(sp)
 800f4f8:	dcc00517 	ldw	r19,20(sp)
 800f4fc:	dc800417 	ldw	r18,16(sp)
 800f500:	dc400317 	ldw	r17,12(sp)
 800f504:	dc000217 	ldw	r16,8(sp)
 800f508:	dec00c04 	addi	sp,sp,48
 800f50c:	f800283a 	ret
 800f510:	98800117 	ldw	r2,4(r19)
 800f514:	80c00017 	ldw	r3,0(r16)
 800f518:	10bfffc4 	addi	r2,r2,-1
 800f51c:	17001526 	beq	r2,fp,800f574 <__call_exitprocs+0x164>
 800f520:	80000015 	stw	zero,0(r16)
 800f524:	183fde26 	beq	r3,zero,800f4a0 <__alt_data_end+0xfc00f4a0>
 800f528:	00800044 	movi	r2,1
 800f52c:	1708983a 	sll	r4,r2,fp
 800f530:	98806217 	ldw	r2,392(r19)
 800f534:	9dc00117 	ldw	r23,4(r19)
 800f538:	2084703a 	and	r2,r4,r2
 800f53c:	1000061e 	bne	r2,zero,800f558 <__call_exitprocs+0x148>
 800f540:	183ee83a 	callr	r3
 800f544:	98800117 	ldw	r2,4(r19)
 800f548:	15ffc51e 	bne	r2,r23,800f460 <__alt_data_end+0xfc00f460>
 800f54c:	a8800017 	ldw	r2,0(r21)
 800f550:	14ffd326 	beq	r2,r19,800f4a0 <__alt_data_end+0xfc00f4a0>
 800f554:	003fc206 	br	800f460 <__alt_data_end+0xfc00f460>
 800f558:	98806317 	ldw	r2,396(r19)
 800f55c:	2084703a 	and	r2,r4,r2
 800f560:	1000061e 	bne	r2,zero,800f57c <__call_exitprocs+0x16c>
 800f564:	89400017 	ldw	r5,0(r17)
 800f568:	9009883a 	mov	r4,r18
 800f56c:	183ee83a 	callr	r3
 800f570:	003ff406 	br	800f544 <__alt_data_end+0xfc00f544>
 800f574:	9f000115 	stw	fp,4(r19)
 800f578:	003fea06 	br	800f524 <__alt_data_end+0xfc00f524>
 800f57c:	89000017 	ldw	r4,0(r17)
 800f580:	183ee83a 	callr	r3
 800f584:	003fef06 	br	800f544 <__alt_data_end+0xfc00f544>
 800f588:	98800017 	ldw	r2,0(r19)
 800f58c:	982b883a 	mov	r21,r19
 800f590:	1027883a 	mov	r19,r2
 800f594:	983fb61e 	bne	r19,zero,800f470 <__alt_data_end+0xfc00f470>
 800f598:	003fd106 	br	800f4e0 <__alt_data_end+0xfc00f4e0>
 800f59c:	0005883a 	mov	r2,zero
 800f5a0:	003ffa06 	br	800f58c <__alt_data_end+0xfc00f58c>

0800f5a4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 800f5a4:	defffd04 	addi	sp,sp,-12
 800f5a8:	df000215 	stw	fp,8(sp)
 800f5ac:	df000204 	addi	fp,sp,8
 800f5b0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 800f5b4:	0001883a 	nop
 800f5b8:	e0bfff17 	ldw	r2,-4(fp)
 800f5bc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 800f5c0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 800f5c4:	10000226 	beq	r2,zero,800f5d0 <_exit+0x2c>
    ALT_SIM_FAIL();
 800f5c8:	002af070 	cmpltui	zero,zero,43969
 800f5cc:	00000106 	br	800f5d4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 800f5d0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 800f5d4:	003fff06 	br	800f5d4 <__alt_data_end+0xfc00f5d4>
